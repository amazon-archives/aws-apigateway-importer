{
  "swagger": "2.0",
  "info": {
    "description": "Here is the list of REST APIs available",
    "version": "V1",
    "title": "UBE REST API",
    "termsOfService": "SwaggerUI",
    "contact": {
      "name": "Shodogg"
    },
    "license": {}
  },
  "host": "localhost:8080",
  "basePath": "/",
  "tags": [{
    "name": "video-url-controller",
    "description": "Adding videos assets by URL"
  }, {
    "name": "hpsn-content-controller",
    "description": "HPSN Content Controller"
  }, {
    "name": "o-auth-controller",
    "description": "For authentication via OAuth on supported third party services."
  }, {
    "name": "hp-passport-auth-controller",
    "description": "HP Passport Auth Controller"
  }, {
    "name": "company-controller",
    "description": "Interacting with companies"
  }, {
    "name": "event-controller",
    "description": "Event management"
  }, {
    "name": "file-upload-controller",
    "description": "Upload files to add to your library"
  }, {
    "name": "receiving-screen-controller",
    "description": "Interaction with receiving screens"
  }, {
    "name": "crocodoc-controller",
    "description": "Crocodoc Controller"
  }, {
    "name": "mid-rec-screen-module-controller",
    "description": "Handles the management of custom receiving screen modules"
  }, {
    "name": "user-controller",
    "description": "User-oriented actions"
  }, {
    "name": "event-url-controller",
    "description": "EventUrl management"
  }, {
    "name": "asset-controller",
    "description": "Interacting with assets"
  }, {
    "name": "group-controller",
    "description": "Group management"
  }, {
    "name": "settings-controller",
    "description": "System settings management"
  }, {
    "name": "mobile-analytics-controller",
    "description": "For submitting mobile-related statistical data"
  }, {
    "name": "notification-settings-controller",
    "description": "Notification Settings Controller"
  }, {
    "name": "i-18n-controller",
    "description": "I 18n Controller"
  }, {
    "name": "follow-up-controller",
    "description": "Tracking emails and offline data consumption associated with a presentation"
  }, {
    "name": "mid-content-ingestion-controller",
    "description": "Ingests content metadata."
  }, {
    "name": "twitter-controller",
    "description": "Interacting with Twitter"
  }, {
    "name": "mid-session-controller",
    "description": "MID Session Controller"
  }, {
    "name": "mido-auth-controller",
    "description": "For authentication via OAuth from the MID Library Auth Service"
  }, {
    "name": "linked-in-controller",
    "description": "Linked In Controller"
  }, {
    "name": "screen-controller",
    "description": "Managing and interacting with screen sessions and screens"
  }, {
    "name": "analytics-controller",
    "description": "For submitting statistical data and retrieving it for analysis"
  }, {
    "name": "survey-controller",
    "description": "Managing surveys"
  }, {
    "name": "asset-feedback-controller",
    "description": "User/Presenter feedback on assets"
  }, {
    "name": "mid-receiving-screen-controller",
    "description": "Handles MID-related Receiving Screen functionality."
  }, {
    "name": "box-controller",
    "description": "Box Controller"
  }, {
    "name": "log-controller",
    "description": "Log management"
  }, {
    "name": "notification-type-controller",
    "description": "Notification Type Controller"
  }, {
    "name": "salesforce-controller",
    "description": "Salesforce Controller"
  }, {
    "name": "message-alert-controller",
    "description": "Spring MVC controller for MessageAlerts"
  }, {
    "name": "mid-data-query-controller",
    "description": "MID Data Query Controller"
  }, {
    "name": "dropbox-controller",
    "description": "Access and share a user's Dropbox files"
  }, {
    "name": "you-tube-controller",
    "description": "Access YouTube videos"
  }, {
    "name": "mid-client-controller",
    "description": "MID Client Controller"
  }, {
    "name": "image-url-controller",
    "description": "Adding image assets by URL"
  }, {
    "name": "rec-screen-template-controller",
    "description": "Rec Screen Template Controller"
  }, {
    "name": "folder-controller",
    "description": "Folder Management"
  }, {
    "name": "mid-authentication-controller",
    "description": "For authentication for an MID via user/pw"
  }, {
    "name": "playlist-controller",
    "description": "Playlist management"
  }, {
    "name": "link-asset-controller",
    "description": "Adding link assets"
  }, {
    "name": "consumption-analytics-controller",
    "description": "Consumption Analytics Controller"
  }, {
    "name": "instagram-controller",
    "description": "Interacting with Instagram"
  }, {
    "name": "authentication-controller",
    "description": "For authentication, login, logout, etc."
  }, {
    "name": "brainshark-controller",
    "description": "Interacting with Brainshark"
  }, {
    "name": "comms-factory-controller",
    "description": "Actions for the HP Communications Factory"
  }, {
    "name": "mco-app-controller",
    "description": "MCO App Controller"
  }, {
    "name": "links-controller",
    "description": "Links Controller"
  }, {
    "name": "chargify-controller",
    "description": "Interacting with the Chargify API"
  }, {
    "name": "google-controller",
    "description": "Google Controller"
  }, {
    "name": "hpnn-authorization-controller",
    "description": "HPNN Authorization Controller"
  }, {
    "name": "twilio-controller",
    "description": "Twilio-related actions"
  }, {
    "name": "mid-event-tracking-controller",
    "description": "MID Event Tracking Controller"
  }, {
    "name": "mid-screen-session-controller",
    "description": "Handles MID-specific screen session functionality."
  }, {
    "name": "user-portal-controller",
    "description": "Web interface for users to manage users, assets, modules, and companies."
  }, {
    "name": "notification-feed-controller",
    "description": "Notification Feed Controller"
  }, {
    "name": "screen-session-controller",
    "description": "Screen Session Controller"
  }, {
    "name": "mid-links-controller",
    "description": "Generation and handling of MID share links."
  }, {
    "name": "system-properties-controller",
    "description": "System Properties Controller"
  }, {
    "name": "mobile-client-controller",
    "description": "Mobile Client services."
  }, {
    "name": "embedly-controller",
    "description": "Embedly Controller"
  }, {
    "name": "mid-rec-screen-style-controller",
    "description": "CRUD operations for MIDRecScreenStyles"
  }, {
    "name": "facebook-controller",
    "description": "Interacting with Facebook"
  }, {
    "name": "mid-celery-trigger-test-controller",
    "description": "MID Celery Trigger Test Controller"
  }, {
    "name": "flickr-controller",
    "description": "Interacting with Flickr"
  }, {
    "name": "application-version-controller",
    "description": "Application Version management"
  }, {
    "name": "favorite-controller",
    "description": "Favorite Management"
  }, {
    "name": "mco-admin-controller",
    "description": "MCO Admin Controller"
  }],
  "paths": {
    "/api/POC/feedback/asset/{assetId}/like": {
      "post": {
        "tags": ["asset-feedback-controller"],
        "summary": "submit a rating from 1 to 5 for an asset, page number",
        "operationId": "submitThumbsUpOrDownForAssetAndSlideUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "page",
          "in": "query",
          "description": "page",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "value",
          "in": "query",
          "description": "value",
          "required": true,
          "type": "boolean"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.page": "method.request.querystring.page",
            "integration.request.querystring.value": "method.request.querystring.value"
          },
          "type": "http",
          "uri": "/api/POC/feedback/asset/{assetId}/like"
        }
      }
    },
    "/api/POC/feedback/asset/{assetId}/rating": {
      "post": {
        "tags": ["asset-feedback-controller"],
        "summary": "submit a rating from 1 to 5 for an asset, page number",
        "operationId": "submitRatingForAssetAndSlideUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "page",
          "in": "query",
          "description": "page",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "rating",
          "in": "query",
          "description": "rating",
          "required": true,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.page": "method.request.querystring.page",
            "integration.request.querystring.rating": "method.request.querystring.rating"
          },
          "type": "http",
          "uri": "/api/POC/feedback/asset/{assetId}/rating"
        }
      }
    },
    "/api/admin/asset": {
      "get": {
        "tags": ["asset-controller"],
        "summary": "Find all assets (pageable)",
        "operationId": "findAllUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "repo_provider",
          "in": "query",
          "description": "repo_provider",
          "required": false,
          "type": "string",
          "enum": ["DROPBOX", "BOX", "BRAINSHARK", "COMMS_FACTORY", "FACEBOOK", "S3", "GMAIL", "GOOGLE_PLUS", "TWITTER", "FLICKR", "LINKEDIN", "YOUTUBE", "VIMEO", "NETFLIX", "HULU", "AMAZON_PRIME", "HBO_GO", "ESPN", "CRACKLE", "VUDU", "FTP_SERVER", "ITUNES", "INSTAGRAM", "UPLOADED_BY_USER", "EXTERNAL_LINK"]
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetMinimalDTO"
              }
            }
          },
          "400": {
            "description": "Current user is not admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.repo_provider": "method.request.querystring.repo_provider"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/admin/asset"
        }
      }
    },
    "/api/admin/company": {
      "get": {
        "tags": ["company-controller"],
        "summary": "Gets all companies (with pagination)",
        "operationId": "getAllCompaniesUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Company"
              }
            }
          },
          "403": {
            "description": "User is not admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/admin/company"
        }
      }
    },
    "/api/admin/group": {
      "get": {
        "tags": ["group-controller"],
        "summary": "Retrieve all groups (admin-only)",
        "operationId": "getAllGroupsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "403": {
            "description": "Current user must be admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/admin/group"
        }
      }
    },
    "/api/admin/sysprops": {
      "post": {
        "tags": ["system-properties-controller"],
        "summary": "Get System properties",
        "operationId": "getSystemPropertiesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/admin/sysprops"
        }
      }
    },
    "/api/admin/sysprops/reload": {
      "post": {
        "tags": ["system-properties-controller"],
        "summary": "Reload Properties From Home Directory",
        "operationId": "reloadPropertiesFromHomeDirUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/admin/sysprops/reload"
        }
      }
    },
    "/api/analytics": {
      "get": {
        "tags": ["analytics-controller"],
        "summary": "Returns all the Analytics objects",
        "operationId": "findAllAnalyticsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Analytics"
              }
            }
          },
          "403": {
            "description": "Current user must be admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/analytics"
        }
      },
      "post": {
        "tags": ["analytics-controller"],
        "summary": "Creates a new Analytics entry",
        "operationId": "createAnalyticsEntryUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "act",
          "in": "query",
          "description": "act",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Analytics"
            }
          },
          "403": {
            "description": "Current user must be admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.act": "method.request.querystring.act"
          },
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/analytics"
        }
      }
    },
    "/api/analytics/assetsDownloadCount": {
      "get": {
        "tags": ["analytics-controller"],
        "summary": "Find the Asset download count",
        "operationId": "findAssetDownloadStatisticsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JSONObject"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/analytics/assetsDownloadCount"
        }
      }
    },
    "/api/analytics/assetsFavoriteCount": {
      "get": {
        "tags": ["analytics-controller"],
        "summary": "Find the number of favorites for each asset",
        "operationId": "findAssetFavoriteStatisticsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JSONObject"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/analytics/assetsFavoriteCount"
        }
      }
    },
    "/api/analytics/assetsScreencastCount": {
      "get": {
        "tags": ["analytics-controller"],
        "summary": "Find the Asset screencast count (unique screen sessions in which asset was tossed)",
        "operationId": "findAssetScreencastStatisticsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JSONObject"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/analytics/assetsScreencastCount"
        }
      }
    },
    "/api/analytics/assetsViewCount": {
      "get": {
        "tags": ["analytics-controller"],
        "summary": "Find the number of views for all assets",
        "operationId": "findAssetViewStatisticsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JSONObject"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/analytics/assetsViewCount"
        }
      }
    },
    "/api/analytics/browser": {
      "post": {
        "tags": ["analytics-controller"],
        "summary": "Logs basic browser information to the database.",
        "operationId": "logBrowserAnalyticUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/analytics/browser"
        }
      }
    },
    "/api/analytics/metricsReport": {
      "get": {
        "tags": ["analytics-controller"],
        "summary": "Get the analytics report for the groups the user has access to",
        "operationId": "findMetricsReportUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "start",
          "in": "query",
          "description": "start",
          "required": false,
          "type": "string"
        }, {
          "name": "end",
          "in": "query",
          "description": "end",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AnalyticsReport"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.start": "method.request.querystring.start",
            "integration.request.querystring.end": "method.request.querystring.end"
          },
          "type": "http",
          "uri": "/api/analytics/metricsReport"
        }
      }
    },
    "/api/analytics/mobile/appClose": {
      "post": {
        "tags": ["mobile-analytics-controller"],
        "summary": "Creates an analytics entry about how the mobile user closed the mobile app",
        "operationId": "logAppClosedUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "in": "body",
          "name": "appClosedDTO",
          "description": "appClosedDTO",
          "required": true,
          "schema": {
            "$ref": "#/definitions/MobileAppClosedDTO"
          }
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/analytics/mobile/appClose"
        }
      }
    },
    "/api/analytics/mobile/appCrash": {
      "post": {
        "tags": ["mobile-analytics-controller"],
        "summary": "Creates an analytics entry about how the mobile user closed the mobile app",
        "operationId": "logAppCrashUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "in": "body",
          "name": "appCrashDTO",
          "description": "appCrashDTO",
          "required": true,
          "schema": {
            "$ref": "#/definitions/MobileAppCrashDTO"
          }
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/analytics/mobile/appCrash"
        }
      }
    },
    "/api/analytics/mobile/appOpen": {
      "post": {
        "tags": ["mobile-analytics-controller"],
        "summary": "Creates an analytics entry about how the mobile user opened the mobile app",
        "operationId": "logAppOpenedUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "in": "body",
          "name": "appOpenedDTO",
          "description": "appOpenedDTO",
          "required": true,
          "schema": {
            "$ref": "#/definitions/MobileAppOpenedDTO"
          }
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/analytics/mobile/appOpen"
        }
      }
    },
    "/api/analytics/mobile/userDevice": {
      "post": {
        "tags": ["mobile-analytics-controller"],
        "summary": "Creates an analytics entry linking a user to a device id",
        "operationId": "linkUserToDeviceIdUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "device_id",
          "in": "query",
          "description": "device_id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.device_id": "method.request.querystring.device_id"
          },
          "type": "http",
          "uri": "/api/analytics/mobile/userDevice"
        }
      }
    },
    "/api/analytics/profileUserViews": {
      "get": {
        "tags": ["analytics-controller"],
        "summary": "Find the number of users that viewed each profile",
        "operationId": "findProfileViewStatisticsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JSONObject"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/analytics/profileUserViews"
        }
      }
    },
    "/api/analytics/runStatsJob": {
      "get": {
        "tags": ["analytics-controller"],
        "summary": "Run the background job to create analytics statistics for all analytics. Be careful running this",
        "operationId": "runAnalyticsStatsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "runTheJob",
          "in": "query",
          "description": "runTheJob",
          "required": true,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.runTheJob": "method.request.querystring.runTheJob"
          },
          "type": "http",
          "uri": "/api/analytics/runStatsJob"
        }
      }
    },
    "/api/analytics/screenAsset": {
      "get": {
        "tags": ["analytics-controller"],
        "summary": "Returns all the ScreenAssetAnalytics objects",
        "operationId": "findAllScreenAssetAnalyticsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScreenAssetAnalytics"
              }
            }
          },
          "403": {
            "description": "Current user must be admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/analytics/screenAsset"
        }
      },
      "post": {
        "tags": ["analytics-controller"],
        "summary": "Creates a new ScreenAssetAnalytics entry",
        "operationId": "createScreenAssetAnalyticsEntryUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ScreenAssetAnalytics"
            }
          },
          "403": {
            "description": "Current user must be admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/analytics/screenAsset"
        }
      }
    },
    "/api/analytics/screenBrowser": {
      "get": {
        "tags": ["analytics-controller"],
        "summary": "Returns all the ScreenBrowserAnalytics objects",
        "operationId": "findAllScreenBrowserAnalyticsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScreenBrowserAnalytics"
              }
            }
          },
          "403": {
            "description": "Current user must be admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/analytics/screenBrowser"
        }
      }
    },
    "/api/analytics/ssCons": {
      "post": {
        "tags": ["consumption-analytics-controller"],
        "summary": "Endpoint for collecting analytics on data consumption from the slide share viewer",
        "operationId": "handleSlideShareConsumptionDataUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "in": "body",
          "name": "jsonStr",
          "description": "jsonStr",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "name": "dry_run",
          "in": "query",
          "description": "dry_run",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataConsumptionResultsDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.dry_run": "method.request.querystring.dry_run"
          },
          "type": "http",
          "uri": "/api/analytics/ssCons"
        }
      }
    },
    "/api/analytics/subProfileUserViews": {
      "get": {
        "tags": ["analytics-controller"],
        "summary": "Find the number of users that viewed each sub-profile",
        "operationId": "findSubProfileViewStatisticsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JSONObject"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/analytics/subProfileUserViews"
        }
      }
    },
    "/api/analytics/userProfileSubscriptions": {
      "get": {
        "tags": ["analytics-controller"],
        "summary": "Find the Groups along with their respective subscribed users",
        "operationId": "findUserProfileSubscriptionsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JSONObject"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/analytics/userProfileSubscriptions"
        }
      }
    },
    "/api/api_user": {
      "post": {
        "tags": ["user-controller"],
        "summary": "createPendingAPIKeyUser",
        "operationId": "createPendingAPIKeyUserUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "first_name",
          "in": "query",
          "description": "first_name",
          "required": true,
          "type": "string"
        }, {
          "name": "last_name",
          "in": "query",
          "description": "last_name",
          "required": true,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }, {
          "name": "pass_hash",
          "in": "query",
          "description": "pass_hash",
          "required": false,
          "type": "string"
        }, {
          "name": "phone_number",
          "in": "query",
          "description": "phone_number",
          "required": true,
          "type": "string"
        }, {
          "name": "notes",
          "in": "query",
          "description": "notes",
          "required": true,
          "type": "string"
        }, {
          "name": "company_name",
          "in": "query",
          "description": "company_name",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UserAPIKeyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email",
            "integration.request.querystring.first_name": "method.request.querystring.first_name",
            "integration.request.querystring.pass_hash": "method.request.querystring.pass_hash",
            "integration.request.querystring.company_name": "method.request.querystring.company_name",
            "integration.request.querystring.phone_number": "method.request.querystring.phone_number",
            "integration.request.querystring.notes": "method.request.querystring.notes",
            "integration.request.querystring.last_name": "method.request.querystring.last_name"
          },
          "type": "http",
          "uri": "/api/api_user"
        }
      }
    },
    "/api/api_user/{userId}/approve": {
      "post": {
        "tags": ["user-controller"],
        "summary": "approvePendingAPIAccount",
        "operationId": "approvePendingAPIAccountUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserAPIKeyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/api_user/{userId}/approve"
        }
      }
    },
    "/api/api_user/{userId}/deny": {
      "post": {
        "tags": ["user-controller"],
        "summary": "denyPendingAPIAccount",
        "operationId": "denyPendingAPIAccountUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }, {
          "name": "comments",
          "in": "query",
          "description": "comments",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserAPIKeyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.comments": "method.request.querystring.comments"
          },
          "type": "http",
          "uri": "/api/api_user/{userId}/deny"
        }
      }
    },
    "/api/api_user/{userId}/grant": {
      "post": {
        "tags": ["user-controller"],
        "summary": "grantAPIKey",
        "operationId": "grantAPIKeyUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserAPIKeyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/api_user/{userId}/grant"
        }
      }
    },
    "/api/asset": {
      "get": {
        "tags": ["asset-controller"],
        "summary": "Find all assets that the current user can read (pageable)",
        "operationId": "findAllForCurrentUserUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "repo_provider",
          "in": "query",
          "description": "repo_provider",
          "required": false,
          "type": "string",
          "enum": ["DROPBOX", "BOX", "BRAINSHARK", "COMMS_FACTORY", "FACEBOOK", "S3", "GMAIL", "GOOGLE_PLUS", "TWITTER", "FLICKR", "LINKEDIN", "YOUTUBE", "VIMEO", "NETFLIX", "HULU", "AMAZON_PRIME", "HBO_GO", "ESPN", "CRACKLE", "VUDU", "FTP_SERVER", "ITUNES", "INSTAGRAM", "UPLOADED_BY_USER", "EXTERNAL_LINK"]
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetPrunedNotesDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.repo_provider": "method.request.querystring.repo_provider"
          },
          "type": "http",
          "uri": "/api/asset"
        }
      },
      "post": {
        "tags": ["asset-controller"],
        "summary": "Create a new asset belonging to the current user",
        "operationId": "addAssetUsingPOST",
        "consumes": ["application/json", "application/x-www-form-urlencoded"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "in": "body",
          "name": "assetCreationDTO",
          "description": "assetCreationDTO",
          "required": true,
          "schema": {
            "$ref": "#/definitions/AssetCreationDTO"
          }
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/asset"
        }
      }
    },
    "/api/asset/approveOrReject": {
      "put": {
        "tags": ["asset-controller"],
        "summary": "Update published status for assets.",
        "operationId": "approveOrRejectUploadsUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetIds",
          "in": "query",
          "description": "assetIds",
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "approve",
          "in": "query",
          "description": "approve",
          "required": true,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "400": {
            "description": "assetIds is empty"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.approve": "method.request.querystring.approve",
            "integration.request.querystring.assetIds": "method.request.querystring.assetIds"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/asset/approveOrReject"
        }
      }
    },
    "/api/asset/company/{companyId}": {
      "get": {
        "tags": ["asset-controller"],
        "summary": "Returns all assets that a given company owns",
        "operationId": "findAllCompanyAssetsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetMinimalDTO"
              }
            }
          },
          "400": {
            "description": "Company does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/asset/company/{companyId}"
        }
      }
    },
    "/api/asset/email": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Sends emails to the given email address containing links to the given assets",
        "operationId": "emailAssetsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "asset_ids",
          "in": "query",
          "description": "asset_ids",
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "emails",
          "in": "query",
          "description": "emails",
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "memo",
          "in": "query",
          "description": "memo",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Asset does not exist or user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.memo": "method.request.querystring.memo",
            "integration.request.querystring.emails": "method.request.querystring.emails",
            "integration.request.querystring.asset_ids": "method.request.querystring.asset_ids"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/asset/email"
        }
      }
    },
    "/api/asset/group/{groupId}": {
      "get": {
        "tags": ["asset-controller"],
        "summary": "Find all assets that belong to the specified group id (pageable)",
        "operationId": "findAllGroupAssetsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetPrunedNotesDTO"
              }
            }
          },
          "400": {
            "description": "Group does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/asset/group/{groupId}"
        }
      }
    },
    "/api/asset/group/{groupId}/folder": {
      "get": {
        "tags": ["asset-controller"],
        "summary": "Get all folders for the given group",
        "operationId": "findAllGroupFoldersUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Folder"
              }
            }
          },
          "400": {
            "description": "Group does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/asset/group/{groupId}/folder"
        }
      }
    },
    "/api/asset/group/{groupId}/folder/{folderId}": {
      "get": {
        "tags": ["asset-controller"],
        "summary": "Get a list of all assets in the specified group folder (pageable)",
        "operationId": "findAllAssetsInGroupFolderUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }, {
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetPrunedNotesDTO"
              }
            }
          },
          "400": {
            "description": "Group does not exist or current user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/asset/group/{groupId}/folder/{folderId}"
        }
      }
    },
    "/api/asset/image": {
      "post": {
        "tags": ["image-url-controller"],
        "summary": "Add an image asset by URL",
        "operationId": "addImageURLAssetUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "in": "body",
          "name": "mediaDTO",
          "description": "mediaDTO",
          "required": true,
          "schema": {
            "$ref": "#/definitions/MediaAssetCreationDTO"
          }
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AssetMinimalDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/asset/image"
        }
      }
    },
    "/api/asset/link": {
      "post": {
        "tags": ["link-asset-controller"],
        "summary": "Add a link asset by URL",
        "operationId": "addLinkAssetUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "url",
          "in": "query",
          "description": "url",
          "required": true,
          "type": "string"
        }, {
          "name": "display_name",
          "in": "query",
          "description": "display_name",
          "required": true,
          "type": "string"
        }, {
          "name": "flag",
          "in": "query",
          "description": "flag",
          "required": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          },
          "collectionFormat": "multi",
          "enum": ["VPN", "INTERNAL_USE_ONLY"]
        }, {
          "name": "group_id",
          "in": "query",
          "description": "group_id",
          "required": false,
          "type": "string"
        }, {
          "name": "folder_id",
          "in": "query",
          "description": "folder_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AssetMinimalDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.url": "method.request.querystring.url",
            "integration.request.querystring.flag": "method.request.querystring.flag",
            "integration.request.querystring.folder_id": "method.request.querystring.folder_id",
            "integration.request.querystring.group_id": "method.request.querystring.group_id",
            "integration.request.querystring.display_name": "method.request.querystring.display_name"
          },
          "type": "http",
          "uri": "/api/asset/link"
        }
      }
    },
    "/api/asset/pending/company/{companyId}": {
      "get": {
        "tags": ["asset-controller"],
        "summary": "Get the list of assets belonging to the specified company that need approval/rejection.",
        "operationId": "findAssetsAwaitingApprovalForCompanyUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "include_email",
          "in": "query",
          "description": "include_email",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetMinimalDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.include_email": "method.request.querystring.include_email"
          },
          "type": "http",
          "uri": "/api/asset/pending/company/{companyId}"
        }
      }
    },
    "/api/asset/pending/test/populate": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "FOR TESTING ONLY: Generate a number of pending assets inside a new group under the specified company.",
        "operationId": "populateDBPendingAssetsForCompanyUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "company_id",
          "in": "query",
          "description": "company_id",
          "required": true,
          "type": "string"
        }, {
          "name": "num_assets",
          "in": "query",
          "description": "num_assets",
          "required": true,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.company_id": "method.request.querystring.company_id",
            "integration.request.querystring.num_assets": "method.request.querystring.num_assets"
          },
          "type": "http",
          "uri": "/api/asset/pending/test/populate"
        }
      }
    },
    "/api/asset/search": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Searches all assets for the given text in the displayName or in asset tags.",
        "operationId": "searchAssetsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "q",
          "in": "query",
          "description": "q",
          "required": true,
          "type": "string"
        }, {
          "name": "include_unapproved",
          "in": "query",
          "description": "include_unapproved",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssetSearchResultsDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.include_unapproved": "method.request.querystring.include_unapproved",
            "integration.request.querystring.q": "method.request.querystring.q"
          },
          "type": "http",
          "uri": "/api/asset/search"
        }
      }
    },
    "/api/asset/status": {
      "get": {
        "tags": ["asset-controller"],
        "summary": "Get the current status of the specified asset(s)",
        "operationId": "getAssetConversionStatusUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "asset_ids",
          "in": "query",
          "description": "asset_ids",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetStatus"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.asset_ids": "method.request.querystring.asset_ids"
          },
          "type": "http",
          "uri": "/api/asset/status"
        }
      },
      "post": {
        "tags": ["asset-controller"],
        "summary": "Get the current status of the specified asset(s)",
        "operationId": "getAssetConversionStatusUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "asset_ids",
          "in": "query",
          "description": "asset_ids",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetStatus"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.asset_ids": "method.request.querystring.asset_ids"
          },
          "type": "http",
          "uri": "/api/asset/status"
        }
      }
    },
    "/api/asset/tutorial": {
      "get": {
        "tags": ["asset-controller"],
        "summary": "<NOT YET IMPLEMENTED> Gets the default tutorial Asset object",
        "operationId": "findAssetTutorialUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/asset/tutorial"
        }
      }
    },
    "/api/asset/user/folder": {
      "get": {
        "tags": ["asset-controller"],
        "summary": "Get all folders for the current user",
        "operationId": "findAllFoldersUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Folder"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/asset/user/folder"
        }
      }
    },
    "/api/asset/user/folder/{folderId}": {
      "get": {
        "tags": ["asset-controller"],
        "summary": "Get a list of all assets in the specified current user's folder (pageable)",
        "operationId": "findAllAssetsInCurrentUserFolderUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetPrunedNotesDTO"
              }
            }
          },
          "400": {
            "description": "Folder does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/asset/user/folder/{folderId}"
        }
      }
    },
    "/api/asset/user/{userId}": {
      "get": {
        "tags": ["asset-controller"],
        "summary": "Retrieve all assets for the specified user id (pageable). (Use GET /asset to get all current user's assets.)",
        "operationId": "findAllUserAssetsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            }
          },
          "403": {
            "description": "User is not admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/asset/user/{userId}"
        }
      }
    },
    "/api/asset/user/{userId}/folder": {
      "get": {
        "tags": ["asset-controller"],
        "summary": "Get all folders for the given user",
        "operationId": "findAllUserFoldersUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Folder"
              }
            }
          },
          "400": {
            "description": "User does not exist"
          },
          "403": {
            "description": "Current user is not admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/asset/user/{userId}/folder"
        }
      }
    },
    "/api/asset/user/{userId}/folder/{folderId}": {
      "get": {
        "tags": ["asset-controller"],
        "summary": "Get a list of all assets in the specified user folder (pageable)",
        "operationId": "findAllAssetsInUserFolderUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }, {
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            }
          },
          "400": {
            "description": "User does not exist"
          },
          "403": {
            "description": "Current user is not admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/asset/user/{userId}/folder/{folderId}"
        }
      }
    },
    "/api/asset/video": {
      "post": {
        "tags": ["video-url-controller"],
        "summary": "Add a video asset by URL",
        "operationId": "addVideoURLAssetUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "in": "body",
          "name": "mediaDTO",
          "description": "mediaDTO",
          "required": true,
          "schema": {
            "$ref": "#/definitions/MediaAssetCreationDTO"
          }
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AssetMinimalDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/asset/video"
        }
      }
    },
    "/api/asset/youtube": {
      "post": {
        "tags": ["you-tube-controller"],
        "summary": "Add a YouTube asset by URL",
        "operationId": "addYouTubeAssetUsingPOST",
        "consumes": ["application/json", "application/x-www-form-urlencoded"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "in": "body",
          "name": "youTubeAssetCreationDTO",
          "description": "youTubeAssetCreationDTO",
          "required": true,
          "schema": {
            "$ref": "#/definitions/YouTubeAssetCreationDTO"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResultsDTO«Asset»"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/youtube/asset"
        }
      }
    },
    "/api/asset/{assetId}": {
      "get": {
        "tags": ["asset-controller"],
        "summary": "Get an asset by its id belonging to current user or current user's group",
        "operationId": "findAssetUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "show_deleted",
          "in": "query",
          "description": "show_deleted",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssetPrunedNotesDTO"
            }
          },
          "400": {
            "description": "Asset does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.show_deleted": "method.request.querystring.show_deleted"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/asset/{assetId}"
        }
      },
      "put": {
        "tags": ["asset-controller"],
        "summary": "Edit an existing asset belonging to the current user",
        "operationId": "editAssetFormUsingPUT",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "display_name",
          "in": "query",
          "description": "display_name",
          "required": false,
          "type": "string"
        }, {
          "name": "version",
          "in": "query",
          "description": "version",
          "required": false,
          "type": "string"
        }, {
          "name": "read_only",
          "in": "query",
          "description": "read_only",
          "required": false,
          "type": "boolean"
        }, {
          "name": "thumbnail_url",
          "in": "query",
          "description": "thumbnail_url",
          "required": false,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }, {
          "name": "tag",
          "in": "query",
          "description": "tag",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "flag",
          "in": "query",
          "description": "flag",
          "required": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          },
          "collectionFormat": "multi",
          "enum": ["VPN", "INTERNAL_USE_ONLY"]
        }, {
          "name": "flags_length",
          "in": "query",
          "description": "flags_length",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "tags_length",
          "in": "query",
          "description": "tags_length",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "asset_label_ids",
          "in": "query",
          "description": "asset_label_ids",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "locale_language",
          "in": "query",
          "description": "locale_language",
          "required": false,
          "type": "string"
        }, {
          "name": "locale_country",
          "in": "query",
          "description": "locale_country",
          "required": false,
          "type": "string"
        }, {
          "name": "flight_time_start",
          "in": "query",
          "description": "flight_time_start",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "flight_time_end",
          "in": "query",
          "description": "flight_time_end",
          "required": false,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssetPrunedNotesDTO"
            }
          },
          "400": {
            "description": "Asset does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.asset_label_ids": "method.request.querystring.asset_label_ids",
            "integration.request.querystring.flight_time_end": "method.request.querystring.flight_time_end",
            "integration.request.querystring.flags_length": "method.request.querystring.flags_length",
            "integration.request.querystring.flag": "method.request.querystring.flag",
            "integration.request.querystring.flight_time_start": "method.request.querystring.flight_time_start",
            "integration.request.querystring.thumbnail_url": "method.request.querystring.thumbnail_url",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.tags_length": "method.request.querystring.tags_length",
            "integration.request.querystring.locale_country": "method.request.querystring.locale_country",
            "integration.request.querystring.read_only": "method.request.querystring.read_only",
            "integration.request.querystring.display_name": "method.request.querystring.display_name",
            "integration.request.querystring.version": "method.request.querystring.version",
            "integration.request.querystring.tag": "method.request.querystring.tag",
            "integration.request.querystring.locale_language": "method.request.querystring.locale_language"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/asset/{assetId}"
        }
      },
      "delete": {
        "tags": ["asset-controller"],
        "summary": "Deletes an existing asset belonging to the current user",
        "operationId": "deleteAssetUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "force_delete",
          "in": "query",
          "description": "force_delete",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "400": {
            "description": "Asset does not exist or user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.force_delete": "method.request.querystring.force_delete"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/asset/{assetId}"
        }
      }
    },
    "/api/asset/{assetId}/approve": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Approve the specified asset for publishing.",
        "operationId": "approveAssetAwaitingApprovalUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/asset/{assetId}/approve"
        }
      }
    },
    "/api/asset/{assetId}/folderIds": {
      "put": {
        "tags": ["asset-controller"],
        "summary": "Update the folderIds on an asset",
        "operationId": "setAssetFolderIdsUsingPUT",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "folderIds",
          "in": "query",
          "description": "folderIds",
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Asset does not exist or user does not have read access"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.folderIds": "method.request.querystring.folderIds"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/asset/{assetId}/folderIds"
        }
      }
    },
    "/api/asset/{assetId}/group/{groupId}": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Adds the specified asset to the specified group",
        "operationId": "addAssetToGroupUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Asset does not exist or user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/asset/{assetId}/group/{groupId}"
        }
      },
      "delete": {
        "tags": ["asset-controller"],
        "summary": "Removes the specified asset from the specified group",
        "operationId": "removeAssetFromGroupUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Asset does not exist or does not belong to group"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/asset/{assetId}/group/{groupId}"
        }
      }
    },
    "/api/asset/{assetId}/group/{groupId}/folder/{folderId}": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Adds the given asset to the given group folder.",
        "operationId": "addAssetToGroupFolderUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }, {
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Asset does not exist or user does not have read access"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/asset/{assetId}/group/{groupId}/folder/{folderId}"
        }
      },
      "delete": {
        "tags": ["asset-controller"],
        "summary": "Removes the given asset from the given group folder.",
        "operationId": "removeAssetFromGroupFolderUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }, {
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Asset does not exist or belong to the group"
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Folder does not contain asset"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "404": {
              "statusCode": "404"
            }
          },
          "uri": "/api/asset/{assetId}/group/{groupId}/folder/{folderId}"
        }
      }
    },
    "/api/asset/{assetId}/incDownloadCount": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Increment the download count of an asset.",
        "operationId": "incrementDownloadCountUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/asset/{assetId}/incDownloadCount"
        }
      }
    },
    "/api/asset/{assetId}/incViewCount": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Increment the view count of an asset in the analytics logger.",
        "operationId": "incrementAssetViewCountUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/asset/{assetId}/incViewCount"
        }
      }
    },
    "/api/asset/{assetId}/note": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Adds a new note to the specified asset",
        "operationId": "addNoteToAssetUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "note",
          "in": "query",
          "description": "note",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "400": {
            "description": "Asset does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.note": "method.request.querystring.note"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/asset/{assetId}/note"
        }
      }
    },
    "/api/asset/{assetId}/note/{noteId}": {
      "put": {
        "tags": ["asset-controller"],
        "summary": "Edit a note for the specified asset",
        "operationId": "editNoteOnAssetUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "noteId",
          "in": "path",
          "description": "noteId",
          "required": true,
          "type": "string"
        }, {
          "name": "note",
          "in": "query",
          "description": "note",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "400": {
            "description": "Asset does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.note": "method.request.querystring.note"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/asset/{assetId}/note/{noteId}"
        }
      },
      "delete": {
        "tags": ["asset-controller"],
        "summary": "Deletes the specified note on the specified asset",
        "operationId": "deleteNoteOnAssetUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "noteId",
          "in": "path",
          "description": "noteId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Asset does not exist or user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/asset/{assetId}/note/{noteId}"
        }
      }
    },
    "/api/asset/{assetId}/page": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Adds a new page to the specified asset",
        "operationId": "createPageUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "thumbnail_url",
          "in": "query",
          "description": "thumbnail_url",
          "required": true,
          "type": "string"
        }, {
          "name": "small_thumbnail_url",
          "in": "query",
          "description": "small_thumbnail_url",
          "required": false,
          "type": "string"
        }, {
          "name": "hq_thumbnail_url",
          "in": "query",
          "description": "hq_thumbnail_url",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "Asset does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.thumbnail_url": "method.request.querystring.thumbnail_url",
            "integration.request.querystring.small_thumbnail_url": "method.request.querystring.small_thumbnail_url",
            "integration.request.querystring.hq_thumbnail_url": "method.request.querystring.hq_thumbnail_url"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/asset/{assetId}/page"
        }
      }
    },
    "/api/asset/{assetId}/page/{pageNum}": {
      "delete": {
        "tags": ["asset-controller"],
        "summary": "Deletes the specified page for the specified asset",
        "operationId": "deletePageUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "pageNum",
          "in": "path",
          "description": "pageNum",
          "required": true,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "400": {
            "description": "Asset does not exist or user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/asset/{assetId}/page/{pageNum}"
        }
      }
    },
    "/api/asset/{assetId}/page/{pageNum}/note": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Adds a note to the specified page of the specified asset",
        "operationId": "addPageNoteUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "pageNum",
          "in": "path",
          "description": "pageNum",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "note",
          "in": "query",
          "description": "note",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "400": {
            "description": "Asset does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.note": "method.request.querystring.note"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/asset/{assetId}/page/{pageNum}/note"
        }
      }
    },
    "/api/asset/{assetId}/page/{pageNum}/note/{noteId}": {
      "put": {
        "tags": ["asset-controller"],
        "summary": "Edit the specified note for the specified page of the specified asset",
        "operationId": "editPageNoteUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "pageNum",
          "in": "path",
          "description": "pageNum",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "noteId",
          "in": "path",
          "description": "noteId",
          "required": true,
          "type": "string"
        }, {
          "name": "note",
          "in": "query",
          "description": "note",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "400": {
            "description": "Asset does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.note": "method.request.querystring.note"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/asset/{assetId}/page/{pageNum}/note/{noteId}"
        }
      },
      "delete": {
        "tags": ["asset-controller"],
        "summary": "Deletes the specified note from the specified page of the specified asset",
        "operationId": "deletePageNoteUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "pageNum",
          "in": "path",
          "description": "pageNum",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "noteId",
          "in": "path",
          "description": "noteId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Asset does not exist or user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/asset/{assetId}/page/{pageNum}/note/{noteId}"
        }
      }
    },
    "/api/asset/{assetId}/reject": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Reject the specified asset from publishing.",
        "operationId": "rejectAssetAwaitingApprovalUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/asset/{assetId}/reject"
        }
      }
    },
    "/api/asset/{assetId}/slideshare": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Create a slide share link for an asset.",
        "operationId": "createSlideShareLinkUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Link"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/asset/{assetId}/slideshare"
        }
      }
    },
    "/api/asset/{assetId}/slideshare/email": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Create a slide share link for an asset and email it to a given address.",
        "operationId": "createAndEmailSlideShareLinkUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }, {
          "name": "message",
          "in": "query",
          "description": "message",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Link"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email",
            "integration.request.querystring.message": "method.request.querystring.message"
          },
          "type": "http",
          "uri": "/api/asset/{assetId}/slideshare/email"
        }
      }
    },
    "/api/asset/{assetId}/user/folder/{folderId}": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Adds the given asset to the given folder for the current user.",
        "operationId": "addAssetToCurrentUserFolderUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Asset does not exist or user does not own asset"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/asset/{assetId}/user/folder/{folderId}"
        }
      },
      "delete": {
        "tags": ["asset-controller"],
        "summary": "Removes the given asset from the given folder for the current user.",
        "operationId": "removeAssetFromCurrentUserFolderUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Asset does not exist or user does not have access"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/asset/{assetId}/user/folder/{folderId}"
        }
      }
    },
    "/api/asset/{assetId}/user/{userId}/folder/{folderId}": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Adds the given asset to the given folder for the given user.",
        "operationId": "addAssetToUserFolderUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }, {
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Asset does not exist"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/asset/{assetId}/user/{userId}/folder/{folderId}"
        }
      },
      "delete": {
        "tags": ["asset-controller"],
        "summary": "Removes the given asset from the given folder for the given user.",
        "operationId": "removeAssetFromUserFolderUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }, {
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Asset does not exist"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "User is not admin"
          },
          "409": {
            "description": "Given user does not own asset"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "409": {
              "statusCode": "409"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/asset/{assetId}/user/{userId}/folder/{folderId}"
        }
      }
    },
    "/api/auth/hpnn": {
      "post": {
        "tags": ["hpnn-authorization-controller"],
        "summary": "authorizeViaHMAC",
        "operationId": "authorizeViaHMACUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "X-HPSN-HMAC",
          "in": "header",
          "description": "X-HPSN-HMAC",
          "required": true,
          "type": "string"
        }, {
          "name": "first",
          "in": "query",
          "description": "first",
          "required": true,
          "type": "string"
        }, {
          "name": "last",
          "in": "query",
          "description": "last",
          "required": true,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }, {
          "name": "emp_num",
          "in": "query",
          "description": "emp_num",
          "required": true,
          "type": "string"
        }, {
          "name": "timestamp",
          "in": "query",
          "description": "timestamp",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email",
            "integration.request.querystring.last": "method.request.querystring.last",
            "integration.request.querystring.first": "method.request.querystring.first",
            "integration.request.querystring.timestamp": "method.request.querystring.timestamp",
            "integration.request.querystring.emp_num": "method.request.querystring.emp_num"
          },
          "type": "http",
          "uri": "/api/auth/hpnn"
        }
      }
    },
    "/api/auth/hpp/callback": {
      "get": {
        "tags": ["hp-passport-auth-controller"],
        "summary": "passportLoginCallback",
        "operationId": "passportLoginCallbackUsingGET",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RedirectView"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/auth/hpp/callback"
        }
      },
      "post": {
        "tags": ["hp-passport-auth-controller"],
        "summary": "passportLoginCallback",
        "operationId": "passportLoginCallbackUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RedirectView"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/auth/hpp/callback"
        }
      }
    },
    "/api/auth/hppassport": {
      "get": {
        "tags": ["hp-passport-auth-controller"],
        "summary": "auth",
        "operationId": "authUsingGET",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "username",
          "in": "query",
          "description": "username",
          "required": false,
          "type": "string"
        }, {
          "name": "password",
          "in": "query",
          "description": "password",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.password": "method.request.querystring.password",
            "integration.request.querystring.username": "method.request.querystring.username"
          },
          "type": "http",
          "uri": "/api/auth/hppassport"
        }
      },
      "post": {
        "tags": ["hp-passport-auth-controller"],
        "summary": "auth",
        "operationId": "authUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "username",
          "in": "query",
          "description": "username",
          "required": false,
          "type": "string"
        }, {
          "name": "password",
          "in": "query",
          "description": "password",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.password": "method.request.querystring.password",
            "integration.request.querystring.username": "method.request.querystring.username"
          },
          "type": "http",
          "uri": "/api/auth/hppassport"
        }
      }
    },
    "/api/auth/hppfinal": {
      "get": {
        "tags": ["hp-passport-auth-controller"],
        "summary": "finalDestination",
        "operationId": "finalDestinationUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/auth/hppfinal"
        }
      }
    },
    "/api/auth/jasperserver/user": {
      "post": {
        "tags": ["authentication-controller"],
        "summary": "Verify a user's JasperServer credentials.",
        "operationId": "authorizeForJasperServerUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "username",
          "in": "query",
          "description": "username",
          "required": true,
          "type": "string"
        }, {
          "name": "password",
          "in": "query",
          "description": "password",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.password": "method.request.querystring.password",
            "integration.request.querystring.username": "method.request.querystring.username"
          },
          "type": "http",
          "uri": "/api/auth/jasperserver/user"
        }
      }
    },
    "/api/auth/key": {
      "post": {
        "tags": ["authentication-controller"],
        "summary": "Authenticate and login to your account using your API key",
        "operationId": "loginWithAPIKeyUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "api_key",
          "in": "query",
          "description": "api_key",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.api_key": "method.request.querystring.api_key"
          },
          "type": "http",
          "uri": "/api/auth/key"
        }
      }
    },
    "/api/auth/udid": {
      "post": {
        "tags": ["authentication-controller"],
        "summary": "Login a user by UDID (unique device id)",
        "operationId": "authorizeUsingDeviceUDIDUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "udid",
          "in": "query",
          "description": "udid",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.udid": "method.request.querystring.udid"
          },
          "type": "http",
          "uri": "/api/auth/udid"
        }
      }
    },
    "/api/auth/user": {
      "post": {
        "tags": ["authentication-controller"],
        "summary": "Login a user with email and password. In case of failure the call will return an error code and a message indicating reason for failure. The possible error messages are1) Invalid login information.  Please try again - when the user email is not found in the system or theusername and password does not match2) Your account has not been verified - user account found but the account is not verified yet3) User must finish password reset process by clicking the email link the user received - when user did not complete the password reset process",
        "operationId": "loginUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }, {
          "name": "password",
          "in": "query",
          "description": "password",
          "required": false,
          "type": "string"
        }, {
          "name": "pass_hash",
          "in": "query",
          "description": "pass_hash",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.password": "method.request.querystring.password",
            "integration.request.querystring.email": "method.request.querystring.email",
            "integration.request.querystring.pass_hash": "method.request.querystring.pass_hash"
          },
          "type": "http",
          "uri": "/api/auth/user"
        }
      }
    },
    "/api/billing/plan": {
      "post": {
        "tags": ["chargify-controller"],
        "summary": "Create a new billing plan available to users.",
        "operationId": "createBillingPlanUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": true,
          "type": "string"
        }, {
          "name": "periodLength",
          "in": "query",
          "description": "periodLength",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "periodicCostCents",
          "in": "query",
          "description": "periodicCostCents",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "componentPeriodicCostCents",
          "in": "query",
          "description": "componentPeriodicCostCents",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "is_free",
          "in": "query",
          "description": "is_free",
          "required": false,
          "type": "boolean"
        }, {
          "name": "is_active",
          "in": "query",
          "description": "is_active",
          "required": false,
          "type": "boolean"
        }, {
          "name": "product_id",
          "in": "query",
          "description": "product_id",
          "required": false,
          "type": "string"
        }, {
          "name": "quantity_component_id",
          "in": "query",
          "description": "quantity_component_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BillingPlan"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.periodLength": "method.request.querystring.periodLength",
            "integration.request.querystring.periodicCostCents": "method.request.querystring.periodicCostCents",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.is_active": "method.request.querystring.is_active",
            "integration.request.querystring.product_id": "method.request.querystring.product_id",
            "integration.request.querystring.is_free": "method.request.querystring.is_free",
            "integration.request.querystring.quantity_component_id": "method.request.querystring.quantity_component_id",
            "integration.request.querystring.componentPeriodicCostCents": "method.request.querystring.componentPeriodicCostCents"
          },
          "type": "http",
          "uri": "/api/billing/plan"
        }
      }
    },
    "/api/billing/plan/{planId}": {
      "get": {
        "tags": ["chargify-controller"],
        "summary": "Get a billing plan",
        "operationId": "getBillingPlanByIdUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "planId",
          "in": "path",
          "description": "planId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BillingPlan"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/billing/plan/{planId}"
        }
      },
      "put": {
        "tags": ["chargify-controller"],
        "summary": "Edit an existing billing plan available to users.",
        "operationId": "editBillingPlanUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "planId",
          "in": "path",
          "description": "planId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": false,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }, {
          "name": "periodLength",
          "in": "query",
          "description": "periodLength",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "periodicCostCents",
          "in": "query",
          "description": "periodicCostCents",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "componentPeriodicCostCents",
          "in": "query",
          "description": "componentPeriodicCostCents",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "is_free",
          "in": "query",
          "description": "is_free",
          "required": false,
          "type": "boolean"
        }, {
          "name": "is_active",
          "in": "query",
          "description": "is_active",
          "required": false,
          "type": "boolean"
        }, {
          "name": "product_id",
          "in": "query",
          "description": "product_id",
          "required": false,
          "type": "string"
        }, {
          "name": "quantity_component_id",
          "in": "query",
          "description": "quantity_component_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BillingPlan"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.periodLength": "method.request.querystring.periodLength",
            "integration.request.querystring.periodicCostCents": "method.request.querystring.periodicCostCents",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.is_active": "method.request.querystring.is_active",
            "integration.request.querystring.product_id": "method.request.querystring.product_id",
            "integration.request.querystring.is_free": "method.request.querystring.is_free",
            "integration.request.querystring.quantity_component_id": "method.request.querystring.quantity_component_id",
            "integration.request.querystring.componentPeriodicCostCents": "method.request.querystring.componentPeriodicCostCents"
          },
          "type": "http",
          "uri": "/api/billing/plan/{planId}"
        }
      },
      "delete": {
        "tags": ["chargify-controller"],
        "summary": "Create a new billing plan available to users.",
        "operationId": "deleteBillingPlanUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "planId",
          "in": "path",
          "description": "planId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/billing/plan/{planId}"
        }
      }
    },
    "/api/billing/plans": {
      "get": {
        "tags": ["chargify-controller"],
        "summary": "Get a list of all active billing plans",
        "operationId": "getActiveBillingPlansUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BillingPlan"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/billing/plans"
        }
      }
    },
    "/api/boxSession": {
      "post": {
        "tags": ["box-controller"],
        "summary": "create Box Session",
        "operationId": "createBoxSessionUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "doc_id",
          "in": "query",
          "description": "doc_id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.doc_id": "method.request.querystring.doc_id"
          },
          "type": "http",
          "uri": "/api/boxSession"
        }
      }
    },
    "/api/brainshark/asset": {
      "post": {
        "tags": ["brainshark-controller"],
        "summary": "Add Brainshark assets by id(s)",
        "operationId": "addBrainsharkAssetsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "ids",
          "in": "query",
          "description": "ids",
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "group_id",
          "in": "query",
          "description": "group_id",
          "required": false,
          "type": "string"
        }, {
          "name": "folder_id",
          "in": "query",
          "description": "folder_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetMinimalDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.folder_id": "method.request.querystring.folder_id",
            "integration.request.querystring.group_id": "method.request.querystring.group_id",
            "integration.request.querystring.ids": "method.request.querystring.ids"
          },
          "type": "http",
          "uri": "/api/brainshark/asset"
        }
      }
    },
    "/api/brainshark/search": {
      "post": {
        "tags": ["brainshark-controller"],
        "summary": "Search Brainshark.",
        "operationId": "searchBrainsharkUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "query",
          "in": "query",
          "description": "query",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BrainsharkSearchResultsDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.query": "method.request.querystring.query"
          },
          "type": "http",
          "uri": "/api/brainshark/search"
        }
      }
    },
    "/api/branded_template": {
      "get": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Get all branded templates as a list of RecScreenStyles (pageable) (admin only)",
        "operationId": "getAllBrandedRecScreenStyleUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/recScreenStyle"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/branded_template"
        }
      },
      "post": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Create a new branded receiving screen template",
        "operationId": "createBrandedTemplateUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "template_id",
          "in": "query",
          "description": "template_id",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "subdomain",
          "in": "query",
          "description": "subdomain",
          "required": true,
          "type": "string"
        }, {
          "name": "suppress_subdomain_changes",
          "in": "query",
          "description": "suppress_subdomain_changes",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/recScreenStyle"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.template_id": "method.request.querystring.template_id",
            "integration.request.querystring.subdomain": "method.request.querystring.subdomain",
            "integration.request.querystring.suppress_subdomain_changes": "method.request.querystring.suppress_subdomain_changes"
          },
          "type": "http",
          "uri": "/api/branded_template"
        }
      }
    },
    "/api/branded_template/{recScreenStyleId}": {
      "get": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Get a single branded template (as a RecScreenStyle) by id (admin only)",
        "operationId": "getBrandedTemplateUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "recScreenStyleId",
          "in": "path",
          "description": "recScreenStyleId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/recScreenStyle"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/branded_template/{recScreenStyleId}"
        }
      },
      "put": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Edits an existing branded template receiving screen style",
        "operationId": "editBrandedTemplateUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "recScreenStyleId",
          "in": "path",
          "description": "recScreenStyleId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/recScreenStyle"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.name": "method.request.querystring.name"
          },
          "type": "http",
          "uri": "/api/branded_template/{recScreenStyleId}"
        }
      },
      "delete": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Deletes the specified branded receiving screen style, also freeing up the subdomain",
        "operationId": "deleteBrandedTemplateUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "recScreenStyleId",
          "in": "path",
          "description": "recScreenStyleId",
          "required": true,
          "type": "string"
        }, {
          "name": "suppress_subdomain_changes",
          "in": "query",
          "description": "suppress_subdomain_changes",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.suppress_subdomain_changes": "method.request.querystring.suppress_subdomain_changes"
          },
          "type": "http",
          "uri": "/api/branded_template/{recScreenStyleId}"
        }
      }
    },
    "/api/chargify/payment/updateUrl": {
      "get": {
        "tags": ["chargify-controller"],
        "summary": "Creates the URL for a Chargify payment update page.",
        "operationId": "getChargifyPaymentURLUsingGET",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/chargify/payment/updateUrl"
        }
      }
    },
    "/api/chargify/subscribe/{planId}": {
      "post": {
        "tags": ["chargify-controller"],
        "summary": "Creates a user subscription to a product.",
        "operationId": "createUserSubscriptionUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "planId",
          "in": "path",
          "description": "planId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/chargify/subscribe/{planId}"
        }
      }
    },
    "/api/chargify/updateRequired": {
      "post": {
        "tags": ["chargify-controller"],
        "summary": "Handles a Chargify webhook",
        "operationId": "readChargifyWebhookUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["*/*"],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/chargify/updateRequired"
        }
      }
    },
    "/api/commsfactory/asset": {
      "post": {
        "tags": ["comms-factory-controller"],
        "summary": "Adds a new Comms Factory video as an asset. If a group ID is provided and no folder IDis provided, the asset will be added to the group if the user has permission. If a group ID and folderID are both provided, the asset will be added to the folder within that group if the user has permission.",
        "operationId": "addCommsFactoryAssetUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "title",
          "in": "query",
          "description": "title",
          "required": true,
          "type": "string"
        }, {
          "name": "embed_url",
          "in": "query",
          "description": "embed_url",
          "required": true,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }, {
          "name": "thumb_url",
          "in": "query",
          "description": "thumb_url",
          "required": true,
          "type": "string"
        }, {
          "name": "group_id",
          "in": "query",
          "description": "group_id",
          "required": false,
          "type": "string"
        }, {
          "name": "folder_id",
          "in": "query",
          "description": "folder_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AssetMinimalDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.folder_id": "method.request.querystring.folder_id",
            "integration.request.querystring.group_id": "method.request.querystring.group_id",
            "integration.request.querystring.title": "method.request.querystring.title",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.thumb_url": "method.request.querystring.thumb_url",
            "integration.request.querystring.embed_url": "method.request.querystring.embed_url"
          },
          "type": "http",
          "uri": "/api/commsfactory/asset"
        }
      }
    },
    "/api/commsfactory/search/key": {
      "get": {
        "tags": ["comms-factory-controller"],
        "summary": "Retrieves a JSON converted XML list of Comms Factory search results, querying by key.",
        "operationId": "getCommsFactorySearchResultsByKeyUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/commsfactory/search/key"
        }
      }
    },
    "/api/commsfactory/search/keyword": {
      "get": {
        "tags": ["comms-factory-controller"],
        "summary": "Retrieves a JSON converted XML list of Comm Factory search results, querying by keyword.",
        "operationId": "getCommsFactorySearchResultsByKeywordUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/commsfactory/search/keyword"
        }
      }
    },
    "/api/commsfactory/search/title": {
      "get": {
        "tags": ["comms-factory-controller"],
        "summary": "Retrieves aJSON converted XML list of Comms Factory search results, querying by title.",
        "operationId": "getCommsFactorySearchResultsByTitleUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/commsfactory/search/title"
        }
      }
    },
    "/api/company": {
      "get": {
        "tags": ["company-controller"],
        "summary": "Gets all companies the current user belongs to",
        "operationId": "getCompaniesUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Company"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/company"
        }
      },
      "post": {
        "tags": ["company-controller"],
        "summary": "Creates a new company",
        "operationId": "createCompanyUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "parent_company_id",
          "in": "query",
          "description": "parent_company_id",
          "required": false,
          "type": "string"
        }, {
          "name": "add_current_user",
          "in": "query",
          "description": "add_current_user",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          },
          "403": {
            "description": "User is not admin or doesn't have permission to create child companies for given parent company"
          },
          "409": {
            "description": "Company name already exists"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.add_current_user": "method.request.querystring.add_current_user",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.parent_company_id": "method.request.querystring.parent_company_id"
          },
          "responses": {
            "409": {
              "statusCode": "409"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/company"
        }
      }
    },
    "/api/company/assetLabel": {
      "post": {
        "tags": ["company-controller"],
        "summary": "Add an AssetLabel to user's active company",
        "operationId": "addUserActiveCompanyAssetLabelUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "label",
          "in": "query",
          "description": "label",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetLabel"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.label": "method.request.querystring.label"
          },
          "type": "http",
          "uri": "/api/company/assetLabel"
        }
      }
    },
    "/api/company/assetLabel/{labelId}": {
      "put": {
        "tags": ["company-controller"],
        "summary": "Update an AssetLabel on user's active company",
        "operationId": "updateUserActiveCompanyAssetLabelUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "labelId",
          "in": "path",
          "description": "labelId",
          "required": true,
          "type": "string"
        }, {
          "name": "label",
          "in": "query",
          "description": "label",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetLabel"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.label": "method.request.querystring.label"
          },
          "type": "http",
          "uri": "/api/company/assetLabel/{labelId}"
        }
      },
      "delete": {
        "tags": ["company-controller"],
        "summary": "Delete an AssetLabel on user's active company",
        "operationId": "deleteUserActiveCompanyAssetLabelUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "labelId",
          "in": "path",
          "description": "labelId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetLabel"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/company/assetLabel/{labelId}"
        }
      }
    },
    "/api/company/assetLabels": {
      "get": {
        "tags": ["company-controller"],
        "summary": "Get the AssetLabels for the user's active company",
        "operationId": "getUserActiveCompanyAssetLabelsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetLabel"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/company/assetLabels"
        }
      }
    },
    "/api/company/folder/root": {
      "get": {
        "tags": ["hpsn-content-controller"],
        "summary": "Returns a list of user and company folders the user can access.",
        "operationId": "getRootFoldersUsingGET_1",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FolderContentDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/company/folder/root"
        }
      }
    },
    "/api/company/settings": {
      "get": {
        "tags": ["company-controller"],
        "summary": "Gets all the possible company settings",
        "operationId": "getAvailableCompanySettingsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompanySettingsDTO"
              }
            }
          },
          "403": {
            "description": "Current user isn't system admin or admin of any company"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/company/settings"
        }
      }
    },
    "/api/company/{companyId}": {
      "get": {
        "tags": ["company-controller"],
        "summary": "Retrieves a single company",
        "operationId": "getCompanyUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "expand_child_companies",
          "in": "query",
          "description": "expand_child_companies",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompanyWithChildren"
            }
          },
          "400": {
            "description": "Company does not exist or current user does not have permission"
          },
          "403": {
            "description": "Company cannot view its child companies (only if 'expand_child_companies' parameter specified)"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.expand_child_companies": "method.request.querystring.expand_child_companies"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/company/{companyId}"
        }
      },
      "put": {
        "tags": ["company-controller"],
        "summary": "Edits a company",
        "operationId": "editCompanyUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          },
          "400": {
            "description": "Company does not exist"
          },
          "409": {
            "description": "Company name already exists"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.name": "method.request.querystring.name"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "409": {
              "statusCode": "409"
            }
          },
          "type": "http",
          "uri": "/api/company/{companyId}"
        }
      },
      "delete": {
        "tags": ["company-controller"],
        "summary": "Deletes a company",
        "operationId": "deleteCompanyUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "force_delete",
          "in": "query",
          "description": "force_delete",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "400": {
            "description": "Company does not exist"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.force_delete": "method.request.querystring.force_delete"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/company/{companyId}"
        }
      }
    },
    "/api/company/{companyId}/admin": {
      "get": {
        "tags": ["company-controller"],
        "summary": "Returns a list of all company admin users. Requires that user is company admin.",
        "operationId": "getCompanyAdminsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserWithActiveCompanyDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/company/{companyId}/admin"
        }
      }
    },
    "/api/company/{companyId}/admin/{userId}": {
      "post": {
        "tags": ["company-controller"],
        "summary": "Sets a user as admin to the company",
        "operationId": "addAdminUserUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Company does not exist or current user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/company/{companyId}/admin/{userId}"
        }
      },
      "delete": {
        "tags": ["company-controller"],
        "summary": "Removes the user's admin status for the company",
        "operationId": "removeAdminUserUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Company does not exist or current user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/company/{companyId}/admin/{userId}"
        }
      }
    },
    "/api/company/{companyId}/email": {
      "post": {
        "tags": ["company-controller"],
        "summary": "Adds a user directly to a company by email. Requires company admin.",
        "operationId": "addUserToCompanyByEmailUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email"
          },
          "type": "http",
          "uri": "/api/company/{companyId}/email"
        }
      },
      "delete": {
        "tags": ["company-controller"],
        "summary": "Removes a user from a company by email. Requires company admin.",
        "operationId": "removeUserFromCompanyByEmailUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email"
          },
          "type": "http",
          "uri": "/api/company/{companyId}/email"
        }
      }
    },
    "/api/company/{companyId}/groupDisplaySequence": {
      "get": {
        "tags": ["hpsn-content-controller"],
        "summary": "Retrieve a list of folderIds (or 'USER_DEFINED') that the company selected to display",
        "operationId": "getCompanyFolderSequenceWithExpandedUserSelectionsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FolderDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/company/{companyId}/groupDisplaySequence"
        }
      }
    },
    "/api/company/{companyId}/groupSequence": {
      "get": {
        "tags": ["hpsn-content-controller"],
        "summary": "Retrieve a list of groupIds (or 'USER_DEFINED') that the company has selected to display",
        "operationId": "retrieveCompanyFolderSequenceUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Collection«string»"
            }
          }
        },
        "deprecated": true,
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/company/{companyId}/groupSequence"
        }
      },
      "post": {
        "tags": ["hpsn-content-controller"],
        "summary": "Set the list of groupIds that the company wants its user to see displayed.  Please specify USER_DEFINED if you want the user's selected groups to be shown in the sequence.",
        "operationId": "setGroupDisplaySequenceUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "group_ids",
          "in": "query",
          "description": "a comma-separated list of either folderIds or the string 'USER_DEFINED'",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "deprecated": true,
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.group_ids": "method.request.querystring.group_ids"
          },
          "type": "http",
          "uri": "/api/company/{companyId}/groupSequence"
        }
      },
      "delete": {
        "tags": ["hpsn-content-controller"],
        "summary": "Set the list of groupIds that the company wants its user to see displayed.  Please specify USER_DEFINED if you want the user's selected groups to be shown in the sequence.",
        "operationId": "deleteGroupDisplaySequenceUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/company/{companyId}/groupSequence"
        }
      }
    },
    "/api/company/{companyId}/groupSequences": {
      "get": {
        "tags": ["hpsn-content-controller"],
        "summary": "Retrieve a list of folderIds (or 'USER_DEFINED') that the company has selected to as required and default",
        "operationId": "retrieveCompanyFolderSequencesUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/company/{companyId}/groupSequences"
        }
      },
      "post": {
        "tags": ["hpsn-content-controller"],
        "summary": "Set the list of folderIds that the company wants its user to see displayed along with the default group subscriptions which can be changed by the user.  Please specify USER_DEFINED if you want the user's selected groups to be shown in the sequence.",
        "operationId": "setGroupDisplaySequencesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "required_group_ids",
          "in": "query",
          "description": "a comma-separated list of either groupIds or the string 'USER_DEFINED'",
          "required": false,
          "type": "string"
        }, {
          "name": "default_group_ids",
          "in": "query",
          "description": "a comma-separated list of either groupIds or the string 'USER_DEFINED'",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.required_group_ids": "method.request.querystring.required_group_ids",
            "integration.request.querystring.default_group_ids": "method.request.querystring.default_group_ids"
          },
          "type": "http",
          "uri": "/api/company/{companyId}/groupSequences"
        }
      }
    },
    "/api/company/{companyId}/owner": {
      "put": {
        "tags": ["company-controller"],
        "summary": "Sets owner to the comany",
        "operationId": "setCompanyOwnerUsingPUT",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "ownerId",
          "in": "query",
          "description": "ownerId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.ownerId": "method.request.querystring.ownerId"
          },
          "type": "http",
          "uri": "/api/company/{companyId}/owner"
        }
      }
    },
    "/api/company/{companyId}/seats/update": {
      "post": {
        "tags": ["company-controller"],
        "summary": "Updates chargify's component allocation for a subscription based on a company",
        "operationId": "updateCompanySeatsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "seats",
          "in": "query",
          "description": "seats",
          "required": true,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.seats": "method.request.querystring.seats"
          },
          "type": "http",
          "uri": "/api/company/{companyId}/seats/update"
        }
      }
    },
    "/api/company/{companyId}/selectableGroups": {
      "get": {
        "tags": ["hpsn-content-controller"],
        "summary": "Retrieve a list of of GroupDTOs that the user can choose from to build their group display sequence",
        "operationId": "getSelectableFoldersForDisplayUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FolderDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/company/{companyId}/selectableGroups"
        }
      }
    },
    "/api/company/{companyId}/user/invite": {
      "post": {
        "tags": ["company-controller"],
        "summary": "Invites a user by email to a company.",
        "operationId": "inviteUserToCompanyUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "400": {
            "description": "User does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/company/{companyId}/user/invite"
        }
      }
    },
    "/api/company/{companyId}/user/pending": {
      "get": {
        "tags": ["company-controller"],
        "summary": "Gets all users with active pending company invites.",
        "operationId": "getUsersWithPendingCompanyInvitesUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/company/{companyId}/user/pending"
        }
      }
    },
    "/api/company/{companyId}/user/pending/revoke": {
      "delete": {
        "tags": ["company-controller"],
        "summary": "Disable active company invite links from the given company to the given email address.",
        "operationId": "revokePendingCompanyInvitesUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email"
          },
          "type": "http",
          "uri": "/api/company/{companyId}/user/pending/revoke"
        }
      }
    },
    "/api/company/{companyId}/user/{userId}": {
      "post": {
        "tags": ["company-controller"],
        "summary": "Adds a user to the company",
        "operationId": "addUserUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }, {
          "name": "is_admin",
          "in": "query",
          "description": "is_admin",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "400": {
            "description": "Company does not exist or current user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.is_admin": "method.request.querystring.is_admin"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/company/{companyId}/user/{userId}"
        }
      },
      "delete": {
        "tags": ["company-controller"],
        "summary": "Removes a user from the company",
        "operationId": "removeUserUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Company does not exist or current user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/company/{companyId}/user/{userId}"
        }
      }
    },
    "/api/crocSession": {
      "post": {
        "tags": ["crocodoc-controller"],
        "summary": "Crate Crocodoc session",
        "operationId": "createCrocodocSessionUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "uuid",
          "in": "query",
          "description": "uuid",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.uuid": "method.request.querystring.uuid"
          },
          "type": "http",
          "uri": "/api/crocSession"
        }
      }
    },
    "/api/dropbox/acctinfo": {
      "get": {
        "tags": ["dropbox-controller"],
        "summary": "Get Dropbox account info for the current user",
        "operationId": "getUserInfoUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DropboxAccountDTO"
            }
          },
          "400": {
            "description": "Dropbox account is not linked"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/dropbox/acctinfo"
        }
      }
    },
    "/api/dropbox/link": {
      "post": {
        "tags": ["dropbox-controller"],
        "summary": "Link Dropbox account",
        "operationId": "linkDropboxAccountOauth10UsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "key",
          "in": "query",
          "description": "key",
          "required": true,
          "type": "string"
        }, {
          "name": "secret",
          "in": "query",
          "description": "secret",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResultsDTO«UserLightDTO»"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.key": "method.request.querystring.key",
            "integration.request.querystring.secret": "method.request.querystring.secret"
          },
          "type": "http",
          "uri": "/api/dropbox/link"
        }
      },
      "delete": {
        "tags": ["dropbox-controller"],
        "summary": "Unlink Dropbox account",
        "operationId": "unlinkDropboxAccountUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResultsDTO«UserLightDTO»"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/dropbox/link"
        }
      }
    },
    "/api/dropbox/search": {
      "get": {
        "tags": ["dropbox-controller"],
        "summary": "Search your Dropbox files",
        "operationId": "searchUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "query",
          "in": "query",
          "description": "a comma-separated list of file extensions to search for",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DropboxEntryDTO"
              }
            }
          },
          "400": {
            "description": "Dropbox account is not linked"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.query": "method.request.querystring.query"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/dropbox/search"
        }
      }
    },
    "/api/dropbox/share": {
      "post": {
        "tags": ["dropbox-controller"],
        "summary": "Share files from your Dropbox account.  They will be converted and added to your file library.  The parameters are dynamic and follow this pattern: file_0_path, file_0_url (optional), file_0_rev (optional), file_0_group_id (optional), file_0_folder_id (optional).  You can have as many entries as you want.  Each new file needs a new number, e.g. file_7_path",
        "operationId": "shareDropboxFilesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetMinimalDTO"
              }
            }
          },
          "400": {
            "description": "No files specified for conversion"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/dropbox/share"
        }
      }
    },
    "/api/embedly/iframe": {
      "post": {
        "tags": ["embedly-controller"],
        "summary": "Create Iframe code for URL",
        "operationId": "getIframeCodeForUrlUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "url",
          "in": "query",
          "description": "url",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.url": "method.request.querystring.url"
          },
          "type": "http",
          "uri": "/api/embedly/iframe"
        }
      }
    },
    "/api/event": {
      "get": {
        "tags": ["event-controller"],
        "summary": "Retrieves all the events owned by the current user",
        "operationId": "findAllEventsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/event"
        }
      },
      "post": {
        "tags": ["event-controller"],
        "summary": "Create a new event",
        "operationId": "createEventUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "date",
          "in": "query",
          "description": "date",
          "required": true,
          "type": "string"
        }, {
          "name": "time",
          "in": "query",
          "description": "time",
          "required": true,
          "type": "string"
        }, {
          "name": "duration",
          "in": "query",
          "description": "duration",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "location",
          "in": "query",
          "description": "location",
          "required": true,
          "type": "string"
        }, {
          "name": "phone_number",
          "in": "query",
          "description": "phone_number",
          "required": true,
          "type": "string"
        }, {
          "name": "access_code",
          "in": "query",
          "description": "access_code",
          "required": true,
          "type": "string"
        }, {
          "name": "invitation_memo",
          "in": "query",
          "description": "invitation_memo",
          "required": false,
          "type": "string"
        }, {
          "name": "contact_first_name",
          "in": "query",
          "description": "contact_first_name",
          "required": true,
          "type": "string"
        }, {
          "name": "contact_last_name",
          "in": "query",
          "description": "contact_last_name",
          "required": true,
          "type": "string"
        }, {
          "name": "contact_email",
          "in": "query",
          "description": "contact_email",
          "required": true,
          "type": "string"
        }, {
          "name": "contact_phone",
          "in": "query",
          "description": "contact_phone",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Improperly formatted date (must be in format yyyy-MM-dd)"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.duration": "method.request.querystring.duration",
            "integration.request.querystring.invitation_memo": "method.request.querystring.invitation_memo",
            "integration.request.querystring.contact_email": "method.request.querystring.contact_email",
            "integration.request.querystring.date": "method.request.querystring.date",
            "integration.request.querystring.contact_last_name": "method.request.querystring.contact_last_name",
            "integration.request.querystring.contact_phone": "method.request.querystring.contact_phone",
            "integration.request.querystring.contact_first_name": "method.request.querystring.contact_first_name",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.time": "method.request.querystring.time",
            "integration.request.querystring.access_code": "method.request.querystring.access_code",
            "integration.request.querystring.location": "method.request.querystring.location",
            "integration.request.querystring.phone_number": "method.request.querystring.phone_number"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/event"
        }
      }
    },
    "/api/event/{eventId}": {
      "get": {
        "tags": ["event-controller"],
        "summary": "Retrieves the specified event which must be owned by the current user",
        "operationId": "findEventUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Event does not exist"
          },
          "403": {
            "description": "User does not own event"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/event/{eventId}"
        }
      },
      "put": {
        "tags": ["event-controller"],
        "summary": "Edit an event",
        "operationId": "editEventUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": false,
          "type": "string"
        }, {
          "name": "date",
          "in": "query",
          "description": "date",
          "required": false,
          "type": "string"
        }, {
          "name": "time",
          "in": "query",
          "description": "time",
          "required": false,
          "type": "string"
        }, {
          "name": "duration",
          "in": "query",
          "description": "duration",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "location",
          "in": "query",
          "description": "location",
          "required": false,
          "type": "string"
        }, {
          "name": "phone_number",
          "in": "query",
          "description": "phone_number",
          "required": false,
          "type": "string"
        }, {
          "name": "access_code",
          "in": "query",
          "description": "access_code",
          "required": false,
          "type": "string"
        }, {
          "name": "invitation_memo",
          "in": "query",
          "description": "invitation_memo",
          "required": false,
          "type": "string"
        }, {
          "name": "contact_first_name",
          "in": "query",
          "description": "contact_first_name",
          "required": false,
          "type": "string"
        }, {
          "name": "contact_last_name",
          "in": "query",
          "description": "contact_last_name",
          "required": false,
          "type": "string"
        }, {
          "name": "contact_email",
          "in": "query",
          "description": "contact_email",
          "required": false,
          "type": "string"
        }, {
          "name": "contact_phone",
          "in": "query",
          "description": "contact_phone",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Event does not exist"
          },
          "403": {
            "description": "User does not own event"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.duration": "method.request.querystring.duration",
            "integration.request.querystring.invitation_memo": "method.request.querystring.invitation_memo",
            "integration.request.querystring.contact_email": "method.request.querystring.contact_email",
            "integration.request.querystring.date": "method.request.querystring.date",
            "integration.request.querystring.contact_last_name": "method.request.querystring.contact_last_name",
            "integration.request.querystring.contact_phone": "method.request.querystring.contact_phone",
            "integration.request.querystring.contact_first_name": "method.request.querystring.contact_first_name",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.time": "method.request.querystring.time",
            "integration.request.querystring.access_code": "method.request.querystring.access_code",
            "integration.request.querystring.location": "method.request.querystring.location",
            "integration.request.querystring.phone_number": "method.request.querystring.phone_number"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/event/{eventId}"
        }
      },
      "delete": {
        "tags": ["event-controller"],
        "summary": "Deletes an event",
        "operationId": "deleteEventUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "force_delete",
          "in": "query",
          "description": "force_delete",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "400": {
            "description": "Event does not exist"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "User does not own event"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.force_delete": "method.request.querystring.force_delete"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/event/{eventId}"
        }
      }
    },
    "/api/event/{eventId}/asset/{assetId}": {
      "post": {
        "tags": ["event-controller"],
        "summary": "Adds an asset to an event",
        "operationId": "addAssetUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Event does not exist or user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/event/{eventId}/asset/{assetId}"
        }
      },
      "delete": {
        "tags": ["event-controller"],
        "summary": "Removes an asset from an event",
        "operationId": "removeAssetUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Event does not exist or user does not have permission"
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Asset is not already part of the event"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "404": {
              "statusCode": "404"
            }
          },
          "uri": "/api/event/{eventId}/asset/{assetId}"
        }
      }
    },
    "/api/event/{eventId}/asset/{assetId}/note": {
      "post": {
        "tags": ["event-controller"],
        "summary": "Adds a new note to an event asset",
        "operationId": "createAssetNoteUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "note",
          "in": "query",
          "description": "note",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "400": {
            "description": "Event does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.note": "method.request.querystring.note"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/event/{eventId}/asset/{assetId}/note"
        }
      }
    },
    "/api/event/{eventId}/asset/{assetId}/note/{noteId}": {
      "put": {
        "tags": ["event-controller"],
        "summary": "Edits an event asset note",
        "operationId": "editAssetNoteUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "noteId",
          "in": "path",
          "description": "noteId",
          "required": true,
          "type": "string"
        }, {
          "name": "note",
          "in": "query",
          "description": "note",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "400": {
            "description": "Event does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.note": "method.request.querystring.note"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/event/{eventId}/asset/{assetId}/note/{noteId}"
        }
      },
      "delete": {
        "tags": ["event-controller"],
        "summary": "Deletes an event asset note",
        "operationId": "deleteAssetNoteUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "noteId",
          "in": "path",
          "description": "noteId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Event does not exist or user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/event/{eventId}/asset/{assetId}/note/{noteId}"
        }
      }
    },
    "/api/event/{eventId}/asset/{assetId}/page/{pageNumber}/note": {
      "post": {
        "tags": ["event-controller"],
        "summary": "Adds a new note to an event asset page",
        "operationId": "createAssetPageNoteUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "pageNumber",
          "in": "path",
          "description": "pageNumber",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "note",
          "in": "query",
          "description": "note",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "400": {
            "description": "Event does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.note": "method.request.querystring.note"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/event/{eventId}/asset/{assetId}/page/{pageNumber}/note"
        }
      }
    },
    "/api/event/{eventId}/asset/{assetId}/page/{pageNumber}/note/{noteId}": {
      "put": {
        "tags": ["event-controller"],
        "summary": "Edits an event asset page note",
        "operationId": "editAssetPageNoteUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "pageNumber",
          "in": "path",
          "description": "pageNumber",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "noteId",
          "in": "path",
          "description": "noteId",
          "required": true,
          "type": "string"
        }, {
          "name": "note",
          "in": "query",
          "description": "note",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "400": {
            "description": "Event does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.note": "method.request.querystring.note"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/event/{eventId}/asset/{assetId}/page/{pageNumber}/note/{noteId}"
        }
      },
      "delete": {
        "tags": ["event-controller"],
        "summary": "Deletes an event asset page note",
        "operationId": "deleteAssetPageNoteUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "pageNumber",
          "in": "path",
          "description": "pageNumber",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "noteId",
          "in": "path",
          "description": "noteId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Event does not exist or user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/event/{eventId}/asset/{assetId}/page/{pageNumber}/note/{noteId}"
        }
      }
    },
    "/api/event/{eventId}/attendee/{attendeeId}": {
      "delete": {
        "tags": ["event-controller"],
        "summary": "Removes an attendee from an event",
        "operationId": "deleteAttendeeUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "attendeeId",
          "in": "path",
          "description": "attendeeId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Event does not exist"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "User does not own event"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/event/{eventId}/attendee/{attendeeId}"
        }
      }
    },
    "/api/event/{eventId}/command/{eventCmd}": {
      "put": {
        "tags": ["event-controller"],
        "summary": "Commands an event to start, pause, end, or enter practice mode (NOTE: practice mode does not capture analytics)",
        "operationId": "changeStateUsingPUT",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "eventCmd",
          "in": "path",
          "description": "eventCmd",
          "required": true,
          "type": "string",
          "enum": ["START", "PAUSE", "END"]
        }, {
          "name": "practice_mode",
          "in": "query",
          "description": "practice_mode",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "400": {
            "description": "Event does not exist or user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.practice_mode": "method.request.querystring.practice_mode"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/event/{eventId}/command/{eventCmd}"
        }
      }
    },
    "/api/event/{eventId}/group/{groupId}": {
      "post": {
        "tags": ["event-controller"],
        "summary": "Adds a group to an event",
        "operationId": "addGroupUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Event does not exist or user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/event/{eventId}/group/{groupId}"
        }
      },
      "delete": {
        "tags": ["event-controller"],
        "summary": "Removes a group from an event",
        "operationId": "removeGroupUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Event does not exist or user does not have permission"
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Group is not already part of the event"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "404": {
              "statusCode": "404"
            }
          },
          "uri": "/api/event/{eventId}/group/{groupId}"
        }
      }
    },
    "/api/event/{eventId}/invite": {
      "post": {
        "tags": ["event-controller"],
        "summary": "Email invitations to attendees. If no attendees are specified, emails invitations to all attendees.",
        "operationId": "inviteAttendeesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "attendee_ids",
          "in": "query",
          "description": "attendee_ids",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attendee"
              }
            }
          },
          "400": {
            "description": "Event does not exist or user does not have permission"
          },
          "405": {
            "description": "Attendee represents a sync'ed screen instead of a person with email"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.attendee_ids": "method.request.querystring.attendee_ids"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "405": {
              "statusCode": "405"
            }
          },
          "type": "http",
          "uri": "/api/event/{eventId}/invite"
        }
      }
    },
    "/api/event/{eventId}/note": {
      "post": {
        "tags": ["event-controller"],
        "summary": "Adds a new note to an event",
        "operationId": "createNoteUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "note",
          "in": "query",
          "description": "note",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/EventNote"
            }
          },
          "400": {
            "description": "Event does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.note": "method.request.querystring.note"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/event/{eventId}/note"
        }
      }
    },
    "/api/event/{eventId}/note/{noteId}": {
      "put": {
        "tags": ["event-controller"],
        "summary": "Edits a note on an event",
        "operationId": "editNoteUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "noteId",
          "in": "path",
          "description": "noteId",
          "required": true,
          "type": "string"
        }, {
          "name": "note",
          "in": "query",
          "description": "note",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventNote"
            }
          },
          "400": {
            "description": "Event does not exist"
          },
          "403": {
            "description": "User does not own event"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.note": "method.request.querystring.note"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/event/{eventId}/note/{noteId}"
        }
      },
      "delete": {
        "tags": ["event-controller"],
        "summary": "Deletes a note on an event",
        "operationId": "deleteNoteUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "noteId",
          "in": "path",
          "description": "noteId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Event does not exist"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "User does not own event"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/event/{eventId}/note/{noteId}"
        }
      }
    },
    "/api/event/{eventId}/share": {
      "post": {
        "tags": ["event-controller"],
        "summary": "Email Event assets to Event attendees.",
        "operationId": "shareAssetsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "attendee_ids",
          "in": "query",
          "description": "attendee_ids",
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "asset_ids",
          "in": "query",
          "description": "asset_ids",
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "email_memo",
          "in": "query",
          "description": "email_memo",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Event does not exist or user does not have permission"
          },
          "204": {
            "description": "No Content"
          },
          "405": {
            "description": "Attendee represents a sync'ed screen instead of a person with email"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.attendee_ids": "method.request.querystring.attendee_ids",
            "integration.request.querystring.email_memo": "method.request.querystring.email_memo",
            "integration.request.querystring.asset_ids": "method.request.querystring.asset_ids"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "405": {
              "statusCode": "405"
            }
          },
          "type": "http",
          "uri": "/api/event/{eventId}/share"
        }
      }
    },
    "/api/event/{eventId}/sync/{syncCode}/attendee": {
      "post": {
        "tags": ["event-controller"],
        "summary": "Adds a new attendee to an event",
        "operationId": "createAttendeeUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "description": "eventId",
          "required": true,
          "type": "string"
        }, {
          "name": "syncCode",
          "in": "path",
          "description": "syncCode",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Attendee"
            }
          },
          "400": {
            "description": "Event does not exist or user does not have Event permissions"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.name": "method.request.querystring.name"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/event/{eventId}/sync/{syncCode}/attendee"
        }
      }
    },
    "/api/eventUrl": {
      "get": {
        "tags": ["event-url-controller"],
        "summary": "Retrieves all the EventUrls for the current user.",
        "operationId": "getEventUrlsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventUrl"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/eventUrl"
        }
      },
      "post": {
        "tags": ["event-url-controller"],
        "summary": "Create a new EventUrl",
        "operationId": "createEventUrlUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "uri_path",
          "in": "query",
          "description": "uri_path",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/EventUrl"
            }
          },
          "400": {
            "description": "uri path is invalid (can only contain alphanumeric characters or dashes"
          },
          "405": {
            "description": "current user has reached max number of EventUrls allowed at a time"
          },
          "409": {
            "description": "uri_path is already in use by another EventUrl"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.uri_path": "method.request.querystring.uri_path"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "409": {
              "statusCode": "409"
            },
            "405": {
              "statusCode": "405"
            }
          },
          "type": "http",
          "uri": "/api/eventUrl"
        }
      }
    },
    "/api/eventUrl/url/{eventUriPath}": {
      "get": {
        "tags": ["event-url-controller"],
        "summary": "Finds and returns an event URL (string, not object) by uriPath if it exists.",
        "operationId": "getEventUrlStringByUriPathUsingGET",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "eventUriPath",
          "in": "path",
          "description": "eventUriPath",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "EventUrl does not exist."
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/eventUrl/url/{eventUriPath}"
        }
      }
    },
    "/api/eventUrl/{eventUrlId}": {
      "get": {
        "tags": ["event-url-controller"],
        "summary": "Retrieves a single EventUrl.",
        "operationId": "getEventUrlUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "eventUrlId",
          "in": "path",
          "description": "eventUrlId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventUrl"
            }
          },
          "400": {
            "description": "EventUrl does not exist or current user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/eventUrl/{eventUrlId}"
        }
      },
      "put": {
        "tags": ["event-url-controller"],
        "summary": "Edit an existing EventUrl",
        "operationId": "editEventUrlUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "eventUrlId",
          "in": "path",
          "description": "eventUrlId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": false,
          "type": "string"
        }, {
          "name": "uri_path",
          "in": "query",
          "description": "uri_path",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventUrl"
            }
          },
          "400": {
            "description": "EventUrl does not exist or current user does not have permission"
          },
          "409": {
            "description": "uri_path is already in use by another EventUrl"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.uri_path": "method.request.querystring.uri_path"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "409": {
              "statusCode": "409"
            }
          },
          "type": "http",
          "uri": "/api/eventUrl/{eventUrlId}"
        }
      },
      "delete": {
        "tags": ["event-url-controller"],
        "summary": "Deletes an existing EventUrl",
        "operationId": "deleteEventUrlUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "eventUrlId",
          "in": "path",
          "description": "eventUrlId",
          "required": true,
          "type": "string"
        }, {
          "name": "force_delete",
          "in": "query",
          "description": "force_delete",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "400": {
            "description": "EventUrl does not exist or current user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.force_delete": "method.request.querystring.force_delete"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/eventUrl/{eventUrlId}"
        }
      }
    },
    "/api/eventUrl/{eventUrlId}/sync": {
      "post": {
        "tags": ["event-url-controller"],
        "summary": "Start (activate) an Event URL",
        "operationId": "startEventUrlUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "eventUrlId",
          "in": "path",
          "description": "eventUrlId",
          "required": true,
          "type": "string"
        }, {
          "name": "lockSession",
          "in": "query",
          "description": "lockSession",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventUrlSyncResponse"
            }
          },
          "400": {
            "description": "EventUrl does not exist or current user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.lockSession": "method.request.querystring.lockSession"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/eventUrl/{eventUrlId}/sync"
        }
      },
      "delete": {
        "tags": ["event-url-controller"],
        "summary": "Stop an Event URL (deactivate and disconnect all screens)",
        "operationId": "stopEventUrlUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "eventUrlId",
          "in": "path",
          "description": "eventUrlId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "EventUrl does not exist or current user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/eventUrl/{eventUrlId}/sync"
        }
      }
    },
    "/api/facebook/image": {
      "get": {
        "tags": ["facebook-controller"],
        "summary": "Retrieves photos the current user owns on her Facebook account (i.e. in Facebook albums)",
        "operationId": "getImagesUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "thumbnailWidth",
          "in": "query",
          "description": "thumbnailWidth",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "thumbnailHeight",
          "in": "query",
          "description": "thumbnailHeight",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "fullImageWidth",
          "in": "query",
          "description": "fullImageWidth",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "fullImageHeight",
          "in": "query",
          "description": "fullImageHeight",
          "required": true,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetMinimalDTO"
              }
            }
          },
          "403": {
            "description": "Current user's Facebook profile is not linked"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.fullImageHeight": "method.request.querystring.fullImageHeight",
            "integration.request.querystring.thumbnailWidth": "method.request.querystring.thumbnailWidth",
            "integration.request.querystring.fullImageWidth": "method.request.querystring.fullImageWidth",
            "integration.request.querystring.thumbnailHeight": "method.request.querystring.thumbnailHeight"
          },
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/facebook/image"
        }
      }
    },
    "/api/facebook/link": {
      "post": {
        "tags": ["facebook-controller"],
        "summary": "Link Facebook account",
        "operationId": "linkFacebookAccountUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "access_token",
          "in": "query",
          "description": "access_token",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserLightDTO"
            }
          },
          "400": {
            "description": "No access token provided"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.access_token": "method.request.querystring.access_token"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/facebook/link"
        }
      },
      "delete": {
        "tags": ["facebook-controller"],
        "summary": "Unlink Facebook account",
        "operationId": "unlinkFacebookAccountUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserLightDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/facebook/link"
        }
      }
    },
    "/api/facebook/timeline": {
      "get": {
        "tags": ["facebook-controller"],
        "summary": "Retrieves Facebook photos and videos from current user's timeline",
        "operationId": "getTimelineUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetMinimalDTO"
              }
            }
          },
          "403": {
            "description": "Current user's Facebook profile is not linked"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/facebook/timeline"
        }
      }
    },
    "/api/facebook/video": {
      "get": {
        "tags": ["facebook-controller"],
        "summary": "Retrieves Facebook videos the current user is tagged in",
        "operationId": "getVideosUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "receiverType",
          "in": "query",
          "description": "receiverType",
          "required": true,
          "type": "string"
        }, {
          "name": "thumbnailWidth",
          "in": "query",
          "description": "thumbnailWidth",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "thumbnailHeight",
          "in": "query",
          "description": "thumbnailHeight",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "fullImageWidth",
          "in": "query",
          "description": "fullImageWidth",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "fullImageHeight",
          "in": "query",
          "description": "fullImageHeight",
          "required": true,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetMinimalDTO"
              }
            }
          },
          "403": {
            "description": "Current user's Facebook profile is not linked"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.fullImageHeight": "method.request.querystring.fullImageHeight",
            "integration.request.querystring.receiverType": "method.request.querystring.receiverType",
            "integration.request.querystring.thumbnailWidth": "method.request.querystring.thumbnailWidth",
            "integration.request.querystring.fullImageWidth": "method.request.querystring.fullImageWidth",
            "integration.request.querystring.thumbnailHeight": "method.request.querystring.thumbnailHeight"
          },
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/facebook/video"
        }
      }
    },
    "/api/flickr/image": {
      "get": {
        "tags": ["flickr-controller"],
        "summary": "Retrieves up to the first 100 images the current user owns on her Flickr account",
        "operationId": "getImagesUsingGET_1",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetMinimalDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/flickr/image"
        }
      }
    },
    "/api/flickr/link": {
      "post": {
        "tags": ["flickr-controller"],
        "summary": "Link Flickr account",
        "operationId": "linkFlickrAccountUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "access_token",
          "in": "query",
          "description": "access_token",
          "required": true,
          "type": "string"
        }, {
          "name": "access_token_secret",
          "in": "query",
          "description": "access_token_secret",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResultsDTO«UserLightDTO»"
            }
          },
          "400": {
            "description": "No access token provided"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.access_token_secret": "method.request.querystring.access_token_secret",
            "integration.request.querystring.access_token": "method.request.querystring.access_token"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/flickr/link"
        }
      },
      "delete": {
        "tags": ["flickr-controller"],
        "summary": "Unlink Flickr account",
        "operationId": "unlinkFlickrAccountUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResultsDTO«UserLightDTO»"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/flickr/link"
        }
      }
    },
    "/api/folder/company/{companyId}": {
      "get": {
        "tags": ["group-controller"],
        "summary": "Retrieve all folders for a company",
        "operationId": "getCompanyFoldersFromDefaultGroupUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FolderDTO"
              }
            }
          },
          "400": {
            "description": "Company does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/folder/company/{companyId}"
        }
      }
    },
    "/api/folder/root": {
      "get": {
        "tags": ["folder-controller"],
        "summary": "Returns a list of user and company folders the user can access.",
        "operationId": "getRootFoldersUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Folder"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/folder/root"
        }
      }
    },
    "/api/folder/{folderId}": {
      "get": {
        "tags": ["folder-controller"],
        "summary": "Fetch the contents of a folder, including subfolders and assets.",
        "operationId": "getFolderContentsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }, {
          "name": "include_email",
          "in": "query",
          "description": "include_email",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FolderContentDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.include_email": "method.request.querystring.include_email"
          },
          "type": "http",
          "uri": "/api/folder/{folderId}"
        }
      }
    },
    "/api/folder/{folderId}/authorize/{userId}": {
      "post": {
        "tags": ["folder-controller"],
        "summary": "Add an authorized user to a folder and its subfolders. If the folder belongs to a company group, the user being authorized must belong to the company.",
        "operationId": "addAuthorizedUserToFolderUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }, {
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/folder/{folderId}/authorize/{userId}"
        }
      }
    },
    "/api/folder/{folderId}/authorizeByEmail": {
      "post": {
        "tags": ["folder-controller"],
        "summary": "Authorize a user by email on a folder and its subfolders. If the folder belongs to a company group, the user being authorized must belong to the company.",
        "operationId": "addAuthorizedUserToFolderByEmailUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email"
          },
          "type": "http",
          "uri": "/api/folder/{folderId}/authorizeByEmail"
        }
      }
    },
    "/api/folder/{folderId}/authorizedUsers": {
      "get": {
        "tags": ["folder-controller"],
        "summary": "Get a list of users that are authorized for this folder.",
        "operationId": "getAuthorizedUsersUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserWithActiveCompanyDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/folder/{folderId}/authorizedUsers"
        }
      }
    },
    "/api/folder/{folderId}/deauthorize/{userId}": {
      "post": {
        "tags": ["folder-controller"],
        "summary": "Remove an authorized user from a folder and its subfolders.",
        "operationId": "removeAuthorizedUserFromFolderUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }, {
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/folder/{folderId}/deauthorize/{userId}"
        }
      }
    },
    "/api/folder/{folderId}/deauthorizeByEmail": {
      "post": {
        "tags": ["folder-controller"],
        "summary": "Remove an authorized user from a folder and its subfolders by email.",
        "operationId": "removeAuthorizedUserFromFolderByEmailUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email"
          },
          "type": "http",
          "uri": "/api/folder/{folderId}/deauthorizeByEmail"
        }
      }
    },
    "/api/folders/resetNewAssetCounter": {
      "post": {
        "tags": ["folder-controller"],
        "summary": "Resets the newAssetCount on all folders for all groups in the database.",
        "operationId": "resetNewAssetCounterUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/folders/resetNewAssetCounter"
        }
      }
    },
    "/api/followup": {
      "get": {
        "tags": ["follow-up-controller"],
        "summary": "Get all follow-ups for the current user, order by date descending, and optionally filtered by additional optional request parameters.  Pageable.",
        "operationId": "getFollowUpsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "start_time",
          "in": "query",
          "description": "start_time",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end_time",
          "in": "query",
          "description": "end_time",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "screen_session_id",
          "in": "query",
          "description": "screen_session_id",
          "required": false,
          "type": "string"
        }, {
          "name": "query",
          "in": "query",
          "description": "query",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FollowUpDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.query": "method.request.querystring.query",
            "integration.request.querystring.end_time": "method.request.querystring.end_time",
            "integration.request.querystring.start_time": "method.request.querystring.start_time",
            "integration.request.querystring.screen_session_id": "method.request.querystring.screen_session_id"
          },
          "type": "http",
          "uri": "/api/followup"
        }
      },
      "post": {
        "tags": ["follow-up-controller"],
        "summary": "Create a new FollowUp",
        "operationId": "createFollowUpUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "in": "body",
          "name": "followUpCreationDTO",
          "description": "followUpCreationDTO",
          "required": true,
          "schema": {
            "$ref": "#/definitions/FollowUpCreationDTO"
          }
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FollowUpDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/followup"
        }
      }
    },
    "/api/followup/{followUpId}": {
      "get": {
        "tags": ["follow-up-controller"],
        "summary": "Retrieve a follow-up by id",
        "operationId": "getFollowUpUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "followUpId",
          "in": "path",
          "description": "followUpId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FollowUpDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/followup/{followUpId}"
        }
      }
    },
    "/api/google/image": {
      "get": {
        "tags": ["google-controller"],
        "summary": "Retrieves photos from the current user's Google account",
        "operationId": "getImagesUsingGET_2",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetMinimalDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/google/image"
        }
      }
    },
    "/api/google/link": {
      "post": {
        "tags": ["google-controller"],
        "summary": "Link Google account",
        "operationId": "linkGoogleAccountUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "access_token",
          "in": "query",
          "description": "access_token",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResultsDTO«UserLightDTO»"
            }
          },
          "400": {
            "description": "No access token provided"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.access_token": "method.request.querystring.access_token"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/google/link"
        }
      },
      "delete": {
        "tags": ["google-controller"],
        "summary": "Unlink Google account",
        "operationId": "unlinkGoogleAccountUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResultsDTO«UserLightDTO»"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/google/link"
        }
      }
    },
    "/api/group": {
      "get": {
        "tags": ["group-controller"],
        "summary": "Retrieve all groups the current user belongs to",
        "operationId": "findAllGroupsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/group"
        }
      },
      "post": {
        "tags": ["group-controller"],
        "summary": "Create a new group",
        "operationId": "createGroupUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "company_owner_id",
          "in": "query",
          "description": "company_owner_id",
          "required": false,
          "type": "string"
        }, {
          "name": "upload_approval",
          "in": "query",
          "description": "upload_approval",
          "required": false,
          "type": "boolean"
        }, {
          "name": "thumbnail_url",
          "in": "query",
          "description": "thumbnail_url",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GroupDTO"
            }
          },
          "400": {
            "description": "Company does not exist (when company is to own new group) or user is not company admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.thumbnail_url": "method.request.querystring.thumbnail_url",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.company_owner_id": "method.request.querystring.company_owner_id",
            "integration.request.querystring.upload_approval": "method.request.querystring.upload_approval"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/group"
        }
      }
    },
    "/api/group/company/{companyId}": {
      "get": {
        "tags": ["group-controller"],
        "summary": "Retrieve all groups for a company",
        "operationId": "getCompanyGroupsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupDTO"
              }
            }
          },
          "400": {
            "description": "Company does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/group/company/{companyId}"
        }
      }
    },
    "/api/group/{id}": {
      "get": {
        "tags": ["group-controller"],
        "summary": "Retrieve a specific group",
        "operationId": "findGroupUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupDTO"
            }
          },
          "400": {
            "description": "Group does not exist or current user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/group/{id}"
        }
      },
      "put": {
        "tags": ["group-controller"],
        "summary": "Edit group name",
        "operationId": "editGroupUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "thumbnail_url",
          "in": "query",
          "description": "thumbnail_url",
          "required": false,
          "type": "string"
        }, {
          "name": "flag",
          "in": "query",
          "description": "flag",
          "required": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          },
          "collectionFormat": "multi",
          "enum": ["VPN", "INTERNAL_USE_ONLY"]
        }, {
          "name": "flags_length",
          "in": "query",
          "description": "flags_length",
          "required": false,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupDTO"
            }
          },
          "400": {
            "description": "Group does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.flag": "method.request.querystring.flag",
            "integration.request.querystring.thumbnail_url": "method.request.querystring.thumbnail_url",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.flags_length": "method.request.querystring.flags_length"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/group/{id}"
        }
      },
      "delete": {
        "tags": ["group-controller"],
        "summary": "Delete a group",
        "operationId": "deleteGroupUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }, {
          "name": "force_delete",
          "in": "query",
          "description": "force_delete",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "400": {
            "description": "Group does not exist or user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.force_delete": "method.request.querystring.force_delete"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/group/{id}"
        }
      }
    },
    "/api/group/{id}/admins": {
      "post": {
        "tags": ["group-controller"],
        "summary": "Adds the specified user(s) to be admins of this group.",
        "operationId": "addAdminToGroupUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }, {
          "name": "user_id",
          "in": "query",
          "description": "the user id to be added as a group admin.  To specify multiple users, just use this multiple times.  e.g. user_id=1&user_id=2&user_id=3",
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.user_id": "method.request.querystring.user_id"
          },
          "type": "http",
          "uri": "/api/group/{id}/admins"
        }
      },
      "delete": {
        "tags": ["group-controller"],
        "summary": "Removes the specified users from being admins for this group.",
        "operationId": "deleteAdminFromGroupUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }, {
          "name": "user_id",
          "in": "query",
          "description": "the user id to be added as a group admin.  To specify multiple users, just use this multiple times.  e.g. user_id=1&user_id=2&user_id=3",
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.user_id": "method.request.querystring.user_id"
          },
          "type": "http",
          "uri": "/api/group/{id}/admins"
        }
      }
    },
    "/api/group/{id}/content": {
      "get": {
        "tags": ["hpsn-content-controller"],
        "summary": "Returns the contents for the given group",
        "operationId": "getGroupContentUsingGET_1",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "id",
          "required": true,
          "type": "string"
        }, {
          "name": "include_email",
          "in": "query",
          "description": "include_email",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FolderContentDTO"
            }
          },
          "400": {
            "description": "Group does not exist or current user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.include_email": "method.request.querystring.include_email"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/group/{id}/content"
        }
      }
    },
    "/api/group/{id}/contents": {
      "get": {
        "tags": ["group-controller"],
        "summary": "Returns the contents for the given group",
        "operationId": "getGroupContentUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }, {
          "name": "include_email",
          "in": "query",
          "description": "include_email",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FolderContentDTO"
            }
          },
          "400": {
            "description": "Group does not exist or current user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.include_email": "method.request.querystring.include_email"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/group/{id}/contents"
        }
      }
    },
    "/api/group/{id}/folder": {
      "post": {
        "tags": ["group-controller"],
        "summary": "Adds a new folder to a group.",
        "operationId": "createFolderUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }, {
          "name": "parent_folder_id",
          "in": "query",
          "description": "parent_folder_id",
          "required": false,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "upload_approval",
          "in": "query",
          "description": "upload_approval",
          "required": false,
          "type": "boolean"
        }, {
          "name": "thumbnail_url",
          "in": "query",
          "description": "thumbnail_url",
          "required": false,
          "type": "string"
        }, {
          "name": "subtitle",
          "in": "query",
          "description": "subtitle",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "Group does not exist or current user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.thumbnail_url": "method.request.querystring.thumbnail_url",
            "integration.request.querystring.parent_folder_id": "method.request.querystring.parent_folder_id",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.subtitle": "method.request.querystring.subtitle",
            "integration.request.querystring.upload_approval": "method.request.querystring.upload_approval"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/group/{id}/folder"
        }
      }
    },
    "/api/group/{id}/folder/{folderId}": {
      "get": {
        "tags": ["group-controller"],
        "summary": "Returns the folder in the given group",
        "operationId": "getGroupFolderUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }, {
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "Group does not exist or current user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/group/{id}/folder/{folderId}"
        }
      },
      "put": {
        "tags": ["group-controller"],
        "summary": "Edits a folder of a group.",
        "operationId": "editFolderUsingPUT_1",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }, {
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "thumbnail_url",
          "in": "query",
          "description": "thumbnail_url",
          "required": false,
          "type": "string"
        }, {
          "name": "image_id",
          "in": "query",
          "description": "image_id",
          "required": false,
          "type": "string"
        }, {
          "name": "subtitle",
          "in": "query",
          "description": "subtitle",
          "required": false,
          "type": "string"
        }, {
          "name": "flag",
          "in": "query",
          "description": "flag",
          "required": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          },
          "collectionFormat": "multi",
          "enum": ["VPN", "INTERNAL_USE_ONLY"]
        }, {
          "name": "flags_length",
          "in": "query",
          "description": "flags_length",
          "required": false,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "Group does not exist or current user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.flag": "method.request.querystring.flag",
            "integration.request.querystring.thumbnail_url": "method.request.querystring.thumbnail_url",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.flags_length": "method.request.querystring.flags_length",
            "integration.request.querystring.subtitle": "method.request.querystring.subtitle",
            "integration.request.querystring.image_id": "method.request.querystring.image_id"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/group/{id}/folder/{folderId}"
        }
      },
      "delete": {
        "tags": ["group-controller"],
        "summary": "Deletes a folder from a group.",
        "operationId": "deleteFolderUsingDELETE_1",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }, {
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Group does not exist or current user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/group/{id}/folder/{folderId}"
        }
      }
    },
    "/api/group/{id}/folders": {
      "get": {
        "tags": ["group-controller"],
        "summary": "Returns the root of the directory (folder) structure for the given group",
        "operationId": "getGroupFoldersUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FolderDTO"
            }
          },
          "400": {
            "description": "Group does not exist or current user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/group/{id}/folders"
        }
      }
    },
    "/api/group/{id}/user/{userId}": {
      "post": {
        "tags": ["group-controller"],
        "summary": "Add a user to a group",
        "operationId": "addUserToGroupUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }, {
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Group does not exist or current user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/group/{id}/user/{userId}"
        }
      },
      "delete": {
        "tags": ["group-controller"],
        "summary": "Removes a user from a group",
        "operationId": "removeUserFromGroupUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "groupId",
          "in": "path",
          "description": "groupId",
          "required": true,
          "type": "string"
        }, {
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Group does not exist or current user does not have permission"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/group/{id}/user/{userId}"
        }
      }
    },
    "/api/i18n/{filename}/": {
      "get": {
        "tags": ["i-18n-controller"],
        "summary": "geti18nFile",
        "operationId": "geti18nFileUsingGET",
        "consumes": ["application/json"],
        "produces": ["text/plain"],
        "parameters": [{
          "name": "filename",
          "in": "path",
          "description": "filename",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/i18n/{filename}/"
        }
      }
    },
    "/api/instagram/images": {
      "get": {
        "tags": ["instagram-controller"],
        "summary": "Retrieve instagram images for the currently authenticated user",
        "operationId": "getImagesUsingGET_3",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "page",
          "in": "query",
          "description": "page",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetMinimalDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.page": "method.request.querystring.page"
          },
          "type": "http",
          "uri": "/api/instagram/images"
        }
      }
    },
    "/api/instagram/link": {
      "post": {
        "tags": ["instagram-controller"],
        "summary": "Link Instagram access token with the current user",
        "operationId": "linkUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "access_token",
          "in": "query",
          "description": "access_token",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserLightDTO"
            }
          },
          "401": {
            "description": "No access token provided"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.access_token": "method.request.querystring.access_token"
          },
          "responses": {
            "401": {
              "statusCode": "401"
            }
          },
          "type": "http",
          "uri": "/api/instagram/link"
        }
      },
      "delete": {
        "tags": ["instagram-controller"],
        "summary": "Unlink Instagram account",
        "operationId": "unlinkUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserLightDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/instagram/link"
        }
      }
    },
    "/api/link/{linkCode}": {
      "get": {
        "tags": ["links-controller"],
        "summary": "getLinkInfo",
        "operationId": "getLinkInfoUsingGET",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "linkCode",
          "in": "path",
          "description": "linkCode",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Link"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/link/{linkCode}"
        }
      }
    },
    "/api/linkedin/auth/mobile": {
      "post": {
        "tags": ["linked-in-controller"],
        "summary": "Authenticate via a LinkedIn account for a given authorization code.",
        "operationId": "loginFromMobileWithOAuthUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "code",
          "in": "query",
          "description": "code",
          "required": true,
          "type": "string"
        }, {
          "name": "state",
          "in": "query",
          "description": "state",
          "required": true,
          "type": "string"
        }, {
          "name": "os_type",
          "in": "query",
          "description": "os_type",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.code": "method.request.querystring.code",
            "integration.request.querystring.os_type": "method.request.querystring.os_type",
            "integration.request.querystring.state": "method.request.querystring.state"
          },
          "type": "http",
          "uri": "/api/linkedin/auth/mobile"
        }
      }
    },
    "/api/linkedin/auth/web": {
      "post": {
        "tags": ["linked-in-controller"],
        "summary": "Link LinkedIn account",
        "operationId": "loginFromJSSDKWithOauthUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "first_name",
          "in": "query",
          "description": "first_name",
          "required": true,
          "type": "string"
        }, {
          "name": "last_name",
          "in": "query",
          "description": "last_name",
          "required": true,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email",
            "integration.request.querystring.first_name": "method.request.querystring.first_name",
            "integration.request.querystring.last_name": "method.request.querystring.last_name"
          },
          "type": "http",
          "uri": "/api/linkedin/auth/web"
        }
      }
    },
    "/api/linkedin/authorizationUrl": {
      "get": {
        "tags": ["linked-in-controller"],
        "summary": "Retrieve the authorization URL to authenticate with LinkedIn.",
        "operationId": "getAuthorizationUrlUsingGET",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "os_type",
          "in": "query",
          "description": "os_type",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.os_type": "method.request.querystring.os_type"
          },
          "type": "http",
          "uri": "/api/linkedin/authorizationUrl"
        }
      }
    },
    "/api/linkedin/redirect/ios": {
      "get": {
        "tags": ["linked-in-controller"],
        "summary": "Retrieve the LinkedIn redirect URL for iOS.",
        "operationId": "getIOSRedirectUrlUsingGET",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelAndView"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/linkedin/redirect/ios"
        }
      }
    },
    "/api/log/recScreenError": {
      "get": {
        "tags": ["log-controller"],
        "summary": "findAllRecScreenErrorLogEntries",
        "operationId": "findAllRecScreenErrorLogEntriesUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecScreenErrorLog"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/log/recScreenError"
        }
      },
      "post": {
        "tags": ["log-controller"],
        "summary": "createRecScreenErrorLogEntry",
        "operationId": "createRecScreenErrorLogEntryUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RecScreenErrorLog"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/log/recScreenError"
        }
      }
    },
    "/api/log/request": {
      "get": {
        "tags": ["log-controller"],
        "summary": "findAllRequestLogEntries",
        "operationId": "findAllRequestLogEntriesUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RequestLog"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/log/request"
        }
      },
      "post": {
        "tags": ["log-controller"],
        "summary": "createRequestLogEntry",
        "operationId": "createRequestLogEntryUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RequestLog"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/log/request"
        }
      }
    },
    "/api/log/screenTest": {
      "get": {
        "tags": ["log-controller"],
        "summary": "findAllScreenTestResultEntries",
        "operationId": "findAllScreenTestResultEntriesUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScreenTestResult"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/log/screenTest"
        }
      },
      "post": {
        "tags": ["log-controller"],
        "summary": "createScreenTestLogEntry",
        "operationId": "createScreenTestLogEntryUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ScreenTestResult"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/log/screenTest"
        }
      }
    },
    "/api/log/userPortalError": {
      "post": {
        "tags": ["log-controller"],
        "summary": "createUserPortalErrorLogEntry",
        "operationId": "createUserPortalErrorLogEntryUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UserPortalErrorLog"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/log/userPortalError"
        }
      }
    },
    "/api/mco/app": {
      "get": {
        "tags": ["mco-app-controller"],
        "summary": "getAppsForMCO",
        "operationId": "getAppsForMCOUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MCOApp"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mco/app"
        }
      },
      "post": {
        "tags": ["mco-app-controller"],
        "summary": "createMCOApp",
        "operationId": "createMCOAppUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": true,
          "type": "string"
        }, {
          "name": "platform",
          "in": "query",
          "description": "platform",
          "required": true,
          "type": "string",
          "enum": ["IOS", "ANDROID", "WINDOWS_STORE", "WEB"]
        }, {
          "name": "mcoMidAuthServiceEnabled",
          "in": "query",
          "description": "mcoMidAuthServiceEnabled",
          "required": false,
          "type": "boolean"
        }, {
          "name": "mcoMidAuthServiceUrl",
          "in": "query",
          "description": "mcoMidAuthServiceUrl",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/MCOApp"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.mcoMidAuthServiceUrl": "method.request.querystring.mcoMidAuthServiceUrl",
            "integration.request.querystring.mcoMidAuthServiceEnabled": "method.request.querystring.mcoMidAuthServiceEnabled",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.platform": "method.request.querystring.platform"
          },
          "type": "http",
          "uri": "/api/mco/app"
        }
      }
    },
    "/api/mco/app/{appId}": {
      "get": {
        "tags": ["mco-app-controller"],
        "summary": "getMCOApp",
        "operationId": "getMCOAppUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "appId",
          "in": "path",
          "description": "appId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MCOApp"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mco/app/{appId}"
        }
      },
      "put": {
        "tags": ["mco-app-controller"],
        "summary": "editMCOApp",
        "operationId": "editMCOAppUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "appId",
          "in": "path",
          "description": "appId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": false,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }, {
          "name": "platform",
          "in": "query",
          "description": "platform",
          "required": false,
          "type": "string",
          "enum": ["IOS", "ANDROID", "WINDOWS_STORE", "WEB"]
        }, {
          "name": "mcoMidAuthServiceEnabled",
          "in": "query",
          "description": "mcoMidAuthServiceEnabled",
          "required": false,
          "type": "boolean"
        }, {
          "name": "mcoMidAuthServiceUrl",
          "in": "query",
          "description": "mcoMidAuthServiceUrl",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MCOApp"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.mcoMidAuthServiceUrl": "method.request.querystring.mcoMidAuthServiceUrl",
            "integration.request.querystring.mcoMidAuthServiceEnabled": "method.request.querystring.mcoMidAuthServiceEnabled",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.platform": "method.request.querystring.platform"
          },
          "type": "http",
          "uri": "/api/mco/app/{appId}"
        }
      },
      "delete": {
        "tags": ["mco-app-controller"],
        "summary": "deleteMCOApp",
        "operationId": "deleteMCOAppUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "appId",
          "in": "path",
          "description": "appId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mco/app/{appId}"
        }
      }
    },
    "/api/mco/app/{appId}/key": {
      "post": {
        "tags": ["mco-app-controller"],
        "summary": "createMCOAppKeyPair",
        "operationId": "createMCOAppKeyPairUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "appId",
          "in": "path",
          "description": "appId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MCOApp"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mco/app/{appId}/key"
        }
      }
    },
    "/api/mco/app/{appId}/key/{keyPairId}": {
      "put": {
        "tags": ["mco-app-controller"],
        "summary": "toggleMCOAppKeyPair",
        "operationId": "toggleMCOAppKeyPairUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "appId",
          "in": "path",
          "description": "appId",
          "required": true,
          "type": "string"
        }, {
          "name": "keyPairId",
          "in": "path",
          "description": "keyPairId",
          "required": true,
          "type": "string"
        }, {
          "name": "enabled",
          "in": "query",
          "description": "enabled",
          "required": true,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MCOApp"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.enabled": "method.request.querystring.enabled"
          },
          "type": "http",
          "uri": "/api/mco/app/{appId}/key/{keyPairId}"
        }
      },
      "delete": {
        "tags": ["mco-app-controller"],
        "summary": "deleteMCOAppKeyPair",
        "operationId": "deleteMCOAppKeyPairUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "appId",
          "in": "path",
          "description": "appId",
          "required": true,
          "type": "string"
        }, {
          "name": "keyPairId",
          "in": "path",
          "description": "keyPairId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MCOApp"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mco/app/{appId}/key/{keyPairId}"
        }
      }
    },
    "/api/mco/app/{appId}/social": {
      "post": {
        "tags": ["mco-app-controller"],
        "summary": "addSocialKeyPair",
        "operationId": "addSocialKeyPairUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "appId",
          "in": "path",
          "description": "appId",
          "required": true,
          "type": "string"
        }, {
          "name": "provider",
          "in": "query",
          "description": "provider",
          "required": true,
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        }, {
          "name": "pu_k",
          "in": "query",
          "description": "pu_k",
          "required": true,
          "type": "string"
        }, {
          "name": "pr_k",
          "in": "query",
          "description": "pr_k",
          "required": true,
          "type": "string"
        }, {
          "name": "oauth_app_id",
          "in": "query",
          "description": "oauth_app_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/MCOApp"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.pu_k": "method.request.querystring.pu_k",
            "integration.request.querystring.pr_k": "method.request.querystring.pr_k",
            "integration.request.querystring.oauth_app_id": "method.request.querystring.oauth_app_id",
            "integration.request.querystring.provider": "method.request.querystring.provider"
          },
          "type": "http",
          "uri": "/api/mco/app/{appId}/social"
        }
      },
      "put": {
        "tags": ["mco-app-controller"],
        "summary": "editSocialKeyPair",
        "operationId": "editSocialKeyPairUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "appId",
          "in": "path",
          "description": "appId",
          "required": true,
          "type": "string"
        }, {
          "name": "provider",
          "in": "query",
          "description": "provider",
          "required": true,
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        }, {
          "name": "pu_k",
          "in": "query",
          "description": "pu_k",
          "required": false,
          "type": "string"
        }, {
          "name": "pr_k",
          "in": "query",
          "description": "pr_k",
          "required": false,
          "type": "string"
        }, {
          "name": "oauth_app_id",
          "in": "query",
          "description": "oauth_app_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MCOApp"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.pu_k": "method.request.querystring.pu_k",
            "integration.request.querystring.pr_k": "method.request.querystring.pr_k",
            "integration.request.querystring.oauth_app_id": "method.request.querystring.oauth_app_id",
            "integration.request.querystring.provider": "method.request.querystring.provider"
          },
          "type": "http",
          "uri": "/api/mco/app/{appId}/social"
        }
      },
      "delete": {
        "tags": ["mco-app-controller"],
        "summary": "deleteSocialKeyPair",
        "operationId": "deleteSocialKeyPairUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "appId",
          "in": "path",
          "description": "appId",
          "required": true,
          "type": "string"
        }, {
          "name": "provider",
          "in": "query",
          "description": "provider",
          "required": true,
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MCOApp"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.provider": "method.request.querystring.provider"
          },
          "type": "http",
          "uri": "/api/mco/app/{appId}/social"
        }
      }
    },
    "/api/mcoAdmin/filters": {
      "get": {
        "tags": ["mco-admin-controller"],
        "summary": "getMCOAdminFilterData",
        "operationId": "getMCOAdminFilterDataUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MCOAdminDataFilterDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mcoAdmin/filters"
        }
      }
    },
    "/api/mcoAdmin/signup": {
      "post": {
        "tags": ["mco-admin-controller"],
        "summary": "Sign up for a new account. If a company name is provided, that company will be createdand the new user added to it.",
        "operationId": "performUserRegistrationUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "first_name",
          "in": "query",
          "description": "first_name",
          "required": true,
          "type": "string"
        }, {
          "name": "last_name",
          "in": "query",
          "description": "last_name",
          "required": true,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }, {
          "name": "encrypted_password",
          "in": "query",
          "description": "encrypted_password",
          "required": true,
          "type": "string"
        }, {
          "name": "company_name",
          "in": "query",
          "description": "company_name",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Email address is empty or invalid"
          },
          "409": {
            "description": "Email address is already in use by another user"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.encrypted_password": "method.request.querystring.encrypted_password",
            "integration.request.querystring.email": "method.request.querystring.email",
            "integration.request.querystring.first_name": "method.request.querystring.first_name",
            "integration.request.querystring.company_name": "method.request.querystring.company_name",
            "integration.request.querystring.last_name": "method.request.querystring.last_name"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "409": {
              "statusCode": "409"
            }
          },
          "type": "http",
          "uri": "/api/mcoAdmin/signup"
        }
      }
    },
    "/api/mcoAdmin/user/reset": {
      "post": {
        "tags": ["mco-admin-controller"],
        "summary": "Request to initiate the password reset process",
        "operationId": "requestInitiatePasswordResetUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Link"
            }
          },
          "400": {
            "description": "User does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/mcoAdmin/user/reset"
        }
      }
    },
    "/api/messageAlert": {
      "post": {
        "tags": ["message-alert-controller"],
        "summary": "Create a new MessageAlert",
        "operationId": "createMessageAlertUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "message",
          "in": "query",
          "description": "message",
          "required": true,
          "type": "string"
        }, {
          "name": "title",
          "in": "query",
          "description": "title",
          "required": true,
          "type": "string"
        }, {
          "name": "url",
          "in": "query",
          "description": "url",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/MessageAlert"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.url": "method.request.querystring.url",
            "integration.request.querystring.message": "method.request.querystring.message",
            "integration.request.querystring.title": "method.request.querystring.title"
          },
          "type": "http",
          "uri": "/api/messageAlert"
        }
      }
    },
    "/api/messageAlert/{id}": {
      "get": {
        "tags": ["message-alert-controller"],
        "summary": "Find a MessageAlert",
        "operationId": "getMessageAlertUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MessageAlert"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/messageAlert/{id}"
        }
      },
      "put": {
        "tags": ["message-alert-controller"],
        "summary": "Update a MessageAlert",
        "operationId": "saveMessageAlertUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "id",
          "required": true,
          "type": "string"
        }, {
          "name": "title",
          "in": "query",
          "description": "title",
          "required": true,
          "type": "string"
        }, {
          "name": "message",
          "in": "query",
          "description": "message",
          "required": true,
          "type": "string"
        }, {
          "name": "url",
          "in": "query",
          "description": "url",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MessageAlert"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.url": "method.request.querystring.url",
            "integration.request.querystring.message": "method.request.querystring.message",
            "integration.request.querystring.title": "method.request.querystring.title"
          },
          "type": "http",
          "uri": "/api/messageAlert/{id}"
        }
      },
      "delete": {
        "tags": ["message-alert-controller"],
        "summary": "Delete a MessageAlert",
        "operationId": "deleteMessageAlertUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MessageAlert"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/messageAlert/{id}"
        }
      }
    },
    "/api/messageAlerts": {
      "get": {
        "tags": ["message-alert-controller"],
        "summary": "Find MessageAlerts. all==true will return the deleted messages as well",
        "operationId": "getMessageAlertsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "all",
          "in": "query",
          "description": "all",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MessageAlert"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.all": "method.request.querystring.all"
          },
          "type": "http",
          "uri": "/api/messageAlerts"
        }
      }
    },
    "/api/mid/asset/videos": {
      "post": {
        "tags": ["mid-content-ingestion-controller"],
        "summary": "Register a video asset and its metadata.",
        "operationId": "registerVideoAssetUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "in": "body",
          "name": "contentDTOs",
          "description": "contentDTOs",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MIDContentRegistrationDTO"
            }
          }
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetMinimalDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mid/asset/videos"
        }
      }
    },
    "/api/mid/auth": {
      "post": {
        "tags": ["mid-authentication-controller"],
        "summary": "Login a user with email and password. In case of failure the call will return an error code and a message indicating reason for failure. The possible error messages are1) Invalid login information.  Please try again - when the user email is not found in the system or theusername and password does not match2) Your account has not been verified - user account found but the account is not verified yet3) User must finish password reset process by clicking the email link the user received - when user did not complete the password reset process",
        "operationId": "loginUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }, {
          "name": "pass_hash",
          "in": "query",
          "description": "pass_hash",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email",
            "integration.request.querystring.pass_hash": "method.request.querystring.pass_hash"
          },
          "type": "http",
          "uri": "/api/mid/auth"
        }
      }
    },
    "/api/mid/data/export/history": {
      "get": {
        "tags": ["mid-data-query-controller"],
        "summary": "Retrieves a list of all MIDDataExport objects created by this MCO.",
        "operationId": "getExportHistoryUsingGET",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MIDDataExport"
              }
            }
          },
          "403": {
            "description": "User does not have permission to view this data."
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/mid/data/export/history"
        }
      }
    },
    "/api/mid/data/export/{midDataExportId}": {
      "get": {
        "tags": ["mid-data-query-controller"],
        "summary": "Retrieves an MIDDataExport object with the provided ID.",
        "operationId": "getDataExportUsingGET",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "midDataExportId",
          "in": "path",
          "description": "midDataExportId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MIDDataExport"
            }
          },
          "400": {
            "description": "No MIDDataExport object exists with the provided ID."
          },
          "403": {
            "description": "User does not have permission to view this data."
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/mid/data/export/{midDataExportId}"
        }
      }
    },
    "/api/mid/device/guid": {
      "post": {
        "tags": ["mid-client-controller"],
        "summary": "generateGUIDForDevice",
        "operationId": "generateGUIDForDeviceUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mid/device/guid"
        }
      }
    },
    "/api/mid/eventData": {
      "get": {
        "tags": ["mid-data-query-controller"],
        "summary": "Fetches general event data corresponding to activity in the MID Library.",
        "operationId": "fetchEventDataUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "mid",
          "in": "query",
          "description": "mid",
          "required": false,
          "type": "string"
        }, {
          "name": "start",
          "in": "query",
          "description": "start",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end",
          "in": "query",
          "description": "end",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "mco_id",
          "in": "query",
          "description": "mco_id",
          "required": false,
          "type": "string"
        }, {
          "name": "mco_app_id",
          "in": "query",
          "description": "mco_app_id",
          "required": false,
          "type": "string"
        }, {
          "name": "event_type",
          "in": "query",
          "description": "event_type",
          "required": false,
          "type": "string"
        }, {
          "name": "event_types",
          "in": "query",
          "description": "event_types",
          "required": false,
          "type": "string"
        }, {
          "name": "full_data",
          "in": "query",
          "description": "full_data",
          "required": false,
          "type": "boolean",
          "default": false
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MIDEventQueryResult"
              }
            }
          },
          "403": {
            "description": "User does not have permission to view this data."
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.mco_id": "method.request.querystring.mco_id",
            "integration.request.querystring.start": "method.request.querystring.start",
            "integration.request.querystring.full_data": "method.request.querystring.full_data",
            "integration.request.querystring.mco_app_id": "method.request.querystring.mco_app_id",
            "integration.request.querystring.event_types": "method.request.querystring.event_types",
            "integration.request.querystring.mid": "method.request.querystring.mid",
            "integration.request.querystring.end": "method.request.querystring.end",
            "integration.request.querystring.event_type": "method.request.querystring.event_type"
          },
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/mid/eventData"
        }
      }
    },
    "/api/mid/eventData/columns": {
      "get": {
        "tags": ["mid-data-query-controller"],
        "summary": "Fetches a list of column names available for event data export.",
        "operationId": "getAvailableEventDataColumnsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "403": {
            "description": "User does not have permission to view this data."
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/mid/eventData/columns"
        }
      }
    },
    "/api/mid/eventData/count": {
      "get": {
        "tags": ["mid-data-query-controller"],
        "summary": "Returns the number of rows that match the provided event data query parameters.",
        "operationId": "countEventDataUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "mid",
          "in": "query",
          "description": "mid",
          "required": false,
          "type": "string"
        }, {
          "name": "start",
          "in": "query",
          "description": "start",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end",
          "in": "query",
          "description": "end",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "mco_id",
          "in": "query",
          "description": "mco_id",
          "required": false,
          "type": "string"
        }, {
          "name": "mco_app_id",
          "in": "query",
          "description": "mco_app_id",
          "required": false,
          "type": "string"
        }, {
          "name": "event_type",
          "in": "query",
          "description": "event_type",
          "required": false,
          "type": "string"
        }, {
          "name": "event_types",
          "in": "query",
          "description": "event_types",
          "required": false,
          "type": "string"
        }, {
          "name": "full_data",
          "in": "query",
          "description": "full_data",
          "required": false,
          "type": "boolean",
          "default": false
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleCountResultDTO"
            }
          },
          "403": {
            "description": "User does not have permission to view this data."
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.mco_id": "method.request.querystring.mco_id",
            "integration.request.querystring.start": "method.request.querystring.start",
            "integration.request.querystring.full_data": "method.request.querystring.full_data",
            "integration.request.querystring.mco_app_id": "method.request.querystring.mco_app_id",
            "integration.request.querystring.event_types": "method.request.querystring.event_types",
            "integration.request.querystring.mid": "method.request.querystring.mid",
            "integration.request.querystring.end": "method.request.querystring.end",
            "integration.request.querystring.event_type": "method.request.querystring.event_type"
          },
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/mid/eventData/count"
        }
      }
    },
    "/api/mid/eventData/export": {
      "post": {
        "tags": ["mid-data-query-controller"],
        "summary": "Initiates a task to export event data asynchronously.",
        "operationId": "initiateEventDataExportUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "file_type",
          "in": "query",
          "description": "file_type",
          "required": true,
          "type": "string",
          "enum": ["CSV", "XLSX"]
        }, {
          "name": "mid",
          "in": "query",
          "description": "mid",
          "required": false,
          "type": "string"
        }, {
          "name": "start",
          "in": "query",
          "description": "start",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end",
          "in": "query",
          "description": "end",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "mco_id",
          "in": "query",
          "description": "mco_id",
          "required": false,
          "type": "string"
        }, {
          "name": "mco_app_id",
          "in": "query",
          "description": "mco_app_id",
          "required": false,
          "type": "string"
        }, {
          "name": "event_type",
          "in": "query",
          "description": "event_type",
          "required": false,
          "type": "string"
        }, {
          "name": "event_types",
          "in": "query",
          "description": "event_types",
          "required": false,
          "type": "string"
        }, {
          "name": "selected_columns",
          "in": "query",
          "description": "selected_columns",
          "required": false,
          "type": "string"
        }, {
          "name": "full_data",
          "in": "query",
          "description": "full_data",
          "required": false,
          "type": "boolean",
          "default": false
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "User does not have permission to view this data."
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.mco_id": "method.request.querystring.mco_id",
            "integration.request.querystring.start": "method.request.querystring.start",
            "integration.request.querystring.full_data": "method.request.querystring.full_data",
            "integration.request.querystring.mco_app_id": "method.request.querystring.mco_app_id",
            "integration.request.querystring.event_types": "method.request.querystring.event_types",
            "integration.request.querystring.selected_columns": "method.request.querystring.selected_columns",
            "integration.request.querystring.file_type": "method.request.querystring.file_type",
            "integration.request.querystring.mid": "method.request.querystring.mid",
            "integration.request.querystring.end": "method.request.querystring.end",
            "integration.request.querystring.event_type": "method.request.querystring.event_type"
          },
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/mid/eventData/export"
        }
      }
    },
    "/api/mid/init": {
      "post": {
        "tags": ["mid-client-controller"],
        "summary": "initClient",
        "operationId": "initClientUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MIDAppInitResponseDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mid/init"
        }
      }
    },
    "/api/mid/logout": {
      "post": {
        "tags": ["mid-authentication-controller"],
        "summary": "Logout the current user",
        "operationId": "logoutCurrentUserUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "do_not_disconnect",
          "in": "query",
          "description": "do_not_disconnect",
          "required": false,
          "type": "boolean",
          "default": false
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogoutResponseBody"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.do_not_disconnect": "method.request.querystring.do_not_disconnect"
          },
          "type": "http",
          "uri": "/api/mid/logout"
        }
      }
    },
    "/api/mid/mcoApp/{mcoAppId}/recScreenStyle": {
      "get": {
        "tags": ["mid-rec-screen-style-controller"],
        "summary": "Get all MIDRecScreenStyles by MCO App",
        "operationId": "getMIDRecScreenStyleByMCOAppUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "mcoAppId",
          "in": "path",
          "description": "mcoAppId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MIDRecScreenStyle"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mid/mcoApp/{mcoAppId}/recScreenStyle"
        }
      }
    },
    "/api/mid/mcoApp/{mcoAppId}/recScreenStyle/{styleId}/activate": {
      "post": {
        "tags": ["mid-rec-screen-style-controller"],
        "summary": "Activates a particular recscreen style for a particular MCO App.",
        "operationId": "activateMIDRecScreenStyleForMCOAppUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "mcoAppId",
          "in": "path",
          "description": "mcoAppId",
          "required": true,
          "type": "string"
        }, {
          "name": "styleId",
          "in": "path",
          "description": "styleId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/MCOApp"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mid/mcoApp/{mcoAppId}/recScreenStyle/{styleId}/activate"
        }
      }
    },
    "/api/mid/mcoApp/{mcoAppId}/recScreenStyle/{styleId}/deactivate": {
      "post": {
        "tags": ["mid-rec-screen-style-controller"],
        "summary": "Deactivates a particular active recscreen style for a particular MCO App.",
        "operationId": "deactivateMIDRecScreenStyleForMCOAppUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "mcoAppId",
          "in": "path",
          "description": "mcoAppId",
          "required": true,
          "type": "string"
        }, {
          "name": "styleId",
          "in": "path",
          "description": "styleId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/MCOApp"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mid/mcoApp/{mcoAppId}/recScreenStyle/{styleId}/deactivate"
        }
      }
    },
    "/api/mid/oauth/{provider}/{version}/redirect/android": {
      "get": {
        "tags": ["mido-auth-controller"],
        "summary": "Retrieve an Android redirect URL for the specified oauth service.",
        "operationId": "getAndroidRedirectUrlUsingGET",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "provider",
          "in": "path",
          "description": "provider",
          "required": true,
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        }, {
          "name": "version",
          "in": "path",
          "description": "version",
          "required": true,
          "type": "string",
          "enum": ["V1A", "V2"]
        }, {
          "name": "code",
          "in": "query",
          "description": "code",
          "required": true,
          "type": "string"
        }, {
          "name": "state",
          "in": "query",
          "description": "state",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelAndView"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.code": "method.request.querystring.code",
            "integration.request.querystring.state": "method.request.querystring.state"
          },
          "type": "http",
          "uri": "/api/mid/oauth/{provider}/{version}/redirect/android"
        }
      }
    },
    "/api/mid/oauth/{provider}/{version}/redirect/ios": {
      "get": {
        "tags": ["mido-auth-controller"],
        "summary": "Retrieve an iOS redirect URL for the specified oauth service.",
        "operationId": "getIOSRedirectUrlUsingGET_1",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "provider",
          "in": "path",
          "description": "provider",
          "required": true,
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        }, {
          "name": "version",
          "in": "path",
          "description": "version",
          "required": true,
          "type": "string",
          "enum": ["V1A", "V2"]
        }, {
          "name": "code",
          "in": "query",
          "description": "code",
          "required": true,
          "type": "string"
        }, {
          "name": "state",
          "in": "query",
          "description": "state",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelAndView"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.code": "method.request.querystring.code",
            "integration.request.querystring.state": "method.request.querystring.state"
          },
          "type": "http",
          "uri": "/api/mid/oauth/{provider}/{version}/redirect/ios"
        }
      }
    },
    "/api/mid/rabbitMsg": {
      "post": {
        "tags": ["mid-celery-trigger-test-controller"],
        "summary": "queueMessageToRabbitMQ",
        "operationId": "queueMessageToRabbitMQUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "payloadJSON",
          "in": "query",
          "description": "payloadJSON",
          "required": true,
          "type": "string"
        }, {
          "name": "exchangeName",
          "in": "query",
          "description": "exchangeName",
          "required": false,
          "type": "string",
          "default": "taskCommandsDirectExchange"
        }, {
          "name": "routingKey",
          "in": "query",
          "description": "routingKey",
          "required": false,
          "type": "string",
          "default": "taskRequests.key"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.payloadJSON": "method.request.querystring.payloadJSON",
            "integration.request.querystring.exchangeName": "method.request.querystring.exchangeName",
            "integration.request.querystring.routingKey": "method.request.querystring.routingKey"
          },
          "type": "http",
          "uri": "/api/mid/rabbitMsg"
        }
      }
    },
    "/api/mid/recScreenStyle": {
      "post": {
        "tags": ["mid-rec-screen-style-controller"],
        "summary": "Create a new MIDRecScreenStyle",
        "operationId": "createMIDRecScreenStyleUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "owner_id",
          "in": "query",
          "description": "owner_id",
          "required": true,
          "type": "string"
        }, {
          "name": "owner_type",
          "in": "query",
          "description": "owner_type",
          "required": true,
          "type": "string",
          "enum": ["USER", "COMPANY", "MCO_APP", "SYSTEM"]
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }, {
          "name": "splash_bg_color_hex",
          "in": "query",
          "description": "splash_bg_color_hex",
          "required": false,
          "type": "string"
        }, {
          "name": "disconnect_bg_color_hex",
          "in": "query",
          "description": "disconnect_bg_color_hex",
          "required": false,
          "type": "string"
        }, {
          "name": "splash_image_ids",
          "in": "query",
          "description": "splash_image_ids",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "disconnect_image_ids",
          "in": "query",
          "description": "disconnect_image_ids",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/MIDRecScreenStyle"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.owner_id": "method.request.querystring.owner_id",
            "integration.request.querystring.disconnect_bg_color_hex": "method.request.querystring.disconnect_bg_color_hex",
            "integration.request.querystring.disconnect_image_ids": "method.request.querystring.disconnect_image_ids",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.splash_bg_color_hex": "method.request.querystring.splash_bg_color_hex",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.owner_type": "method.request.querystring.owner_type",
            "integration.request.querystring.splash_image_ids": "method.request.querystring.splash_image_ids"
          },
          "type": "http",
          "uri": "/api/mid/recScreenStyle"
        }
      }
    },
    "/api/mid/recScreenStyle/{styleId}": {
      "get": {
        "tags": ["mid-rec-screen-style-controller"],
        "summary": "Get an existing MIDRecScreenStyle by ID",
        "operationId": "getMIDRecScreenStyleUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "styleId",
          "in": "path",
          "description": "styleId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MIDRecScreenStyle"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mid/recScreenStyle/{styleId}"
        }
      },
      "put": {
        "tags": ["mid-rec-screen-style-controller"],
        "summary": "Edit an existing MIDRecScreenStyle",
        "operationId": "editMIDRecScreenStyleUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "styleId",
          "in": "path",
          "description": "styleId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": false,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }, {
          "name": "splash_bg_color_hex",
          "in": "query",
          "description": "splash_bg_color_hex",
          "required": false,
          "type": "string"
        }, {
          "name": "disconnect_bg_color_hex",
          "in": "query",
          "description": "disconnect_bg_color_hex",
          "required": false,
          "type": "string"
        }, {
          "name": "splash_image_ids",
          "in": "query",
          "description": "splash_image_ids",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "disconnect_image_ids",
          "in": "query",
          "description": "disconnect_image_ids",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MIDRecScreenStyle"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.disconnect_bg_color_hex": "method.request.querystring.disconnect_bg_color_hex",
            "integration.request.querystring.disconnect_image_ids": "method.request.querystring.disconnect_image_ids",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.splash_bg_color_hex": "method.request.querystring.splash_bg_color_hex",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.splash_image_ids": "method.request.querystring.splash_image_ids"
          },
          "type": "http",
          "uri": "/api/mid/recScreenStyle/{styleId}"
        }
      },
      "delete": {
        "tags": ["mid-rec-screen-style-controller"],
        "summary": "Delete an existing MIDRecScreenStyle by ID",
        "operationId": "deleteMIDRecScreenStyleUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "styleId",
          "in": "path",
          "description": "styleId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mid/recScreenStyle/{styleId}"
        }
      }
    },
    "/api/mid/recscreen/init": {
      "post": {
        "tags": ["mid-receiving-screen-controller"],
        "summary": "Gather and send initialization data to a receiving screen.",
        "operationId": "initUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "screenSessionId",
          "in": "query",
          "description": "screenSessionId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MIDReceivingScreenInitDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.screenSessionId": "method.request.querystring.screenSessionId"
          },
          "type": "http",
          "uri": "/api/mid/recscreen/init"
        }
      }
    },
    "/api/mid/screenSession/presync": {
      "post": {
        "tags": ["mid-screen-session-controller"],
        "summary": "Pre syncs by creating a new screen session with one new screen and generates the appropriate URL to access the new screen. Supports both authorized and unauthorized users.",
        "operationId": "createPreSyncedSessionAndScreenUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/MIDPreSyncDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mid/screenSession/presync"
        }
      }
    },
    "/api/mid/session": {
      "post": {
        "tags": ["mid-session-controller"],
        "summary": "createMIDSession",
        "operationId": "createMIDSessionUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "in": "body",
          "name": "sessionCreationRequest",
          "description": "sessionCreationRequest",
          "required": true,
          "schema": {
            "$ref": "#/definitions/MIDSessionCreationRequest"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MIDUserSession"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mid/session"
        }
      }
    },
    "/api/mid/shareData": {
      "get": {
        "tags": ["mid-data-query-controller"],
        "summary": "Fetches share data that has been generated through shared links and link clicks.",
        "operationId": "fetchShareDataUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "mid",
          "in": "query",
          "description": "mid",
          "required": false,
          "type": "string"
        }, {
          "name": "provider",
          "in": "query",
          "description": "provider",
          "required": false,
          "type": "string"
        }, {
          "name": "start",
          "in": "query",
          "description": "start",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end",
          "in": "query",
          "description": "end",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "mco_id",
          "in": "query",
          "description": "mco_id",
          "required": false,
          "type": "string"
        }, {
          "name": "mco_app_id",
          "in": "query",
          "description": "mco_app_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MIDShareQueryResult"
              }
            }
          },
          "403": {
            "description": "User does not have permission to view this data."
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.mco_id": "method.request.querystring.mco_id",
            "integration.request.querystring.start": "method.request.querystring.start",
            "integration.request.querystring.mco_app_id": "method.request.querystring.mco_app_id",
            "integration.request.querystring.mid": "method.request.querystring.mid",
            "integration.request.querystring.provider": "method.request.querystring.provider",
            "integration.request.querystring.end": "method.request.querystring.end"
          },
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/mid/shareData"
        }
      }
    },
    "/api/mid/shareData/columns": {
      "get": {
        "tags": ["mid-data-query-controller"],
        "summary": "Fetches a list of column names available for share data export.",
        "operationId": "getAvailableShareDataColumnsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "403": {
            "description": "User does not have permission to view this data."
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/mid/shareData/columns"
        }
      }
    },
    "/api/mid/shareData/count": {
      "get": {
        "tags": ["mid-data-query-controller"],
        "summary": "Returns the number of rows that match the provided share data query parameters.",
        "operationId": "countShareDataUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "mid",
          "in": "query",
          "description": "mid",
          "required": false,
          "type": "string"
        }, {
          "name": "provider",
          "in": "query",
          "description": "provider",
          "required": false,
          "type": "string"
        }, {
          "name": "start",
          "in": "query",
          "description": "start",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end",
          "in": "query",
          "description": "end",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "mco_id",
          "in": "query",
          "description": "mco_id",
          "required": false,
          "type": "string"
        }, {
          "name": "mco_app_id",
          "in": "query",
          "description": "mco_app_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleCountResultDTO"
            }
          },
          "403": {
            "description": "User does not have permission to view this data."
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.mco_id": "method.request.querystring.mco_id",
            "integration.request.querystring.start": "method.request.querystring.start",
            "integration.request.querystring.mco_app_id": "method.request.querystring.mco_app_id",
            "integration.request.querystring.mid": "method.request.querystring.mid",
            "integration.request.querystring.provider": "method.request.querystring.provider",
            "integration.request.querystring.end": "method.request.querystring.end"
          },
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/mid/shareData/count"
        }
      }
    },
    "/api/mid/shareData/export": {
      "post": {
        "tags": ["mid-data-query-controller"],
        "summary": "Initiates a task to export share data asynchronously.",
        "operationId": "initiateShareDataExportUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "file_type",
          "in": "query",
          "description": "file_type",
          "required": true,
          "type": "string",
          "enum": ["CSV", "XLSX"]
        }, {
          "name": "mid",
          "in": "query",
          "description": "mid",
          "required": false,
          "type": "string"
        }, {
          "name": "provider",
          "in": "query",
          "description": "provider",
          "required": false,
          "type": "string"
        }, {
          "name": "start",
          "in": "query",
          "description": "start",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end",
          "in": "query",
          "description": "end",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "mco_id",
          "in": "query",
          "description": "mco_id",
          "required": false,
          "type": "string"
        }, {
          "name": "mco_app_id",
          "in": "query",
          "description": "mco_app_id",
          "required": false,
          "type": "string"
        }, {
          "name": "selected_columns",
          "in": "query",
          "description": "selected_columns",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "User does not have permission to view this data."
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.mco_id": "method.request.querystring.mco_id",
            "integration.request.querystring.start": "method.request.querystring.start",
            "integration.request.querystring.mco_app_id": "method.request.querystring.mco_app_id",
            "integration.request.querystring.selected_columns": "method.request.querystring.selected_columns",
            "integration.request.querystring.file_type": "method.request.querystring.file_type",
            "integration.request.querystring.mid": "method.request.querystring.mid",
            "integration.request.querystring.provider": "method.request.querystring.provider",
            "integration.request.querystring.end": "method.request.querystring.end"
          },
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/mid/shareData/export"
        }
      }
    },
    "/api/mid/socialData": {
      "get": {
        "tags": ["mid-data-query-controller"],
        "summary": "Fetches social data that has been gathered from public social profiles or friend lists.",
        "operationId": "fetchSocialDataUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "mid",
          "in": "query",
          "description": "mid",
          "required": false,
          "type": "string"
        }, {
          "name": "provider",
          "in": "query",
          "description": "provider",
          "required": false,
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        }, {
          "name": "start",
          "in": "query",
          "description": "start",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end",
          "in": "query",
          "description": "end",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "mco_id",
          "in": "query",
          "description": "mco_id",
          "required": false,
          "type": "string"
        }, {
          "name": "mco_app_id",
          "in": "query",
          "description": "mco_app_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MIDSocialData"
              }
            }
          },
          "403": {
            "description": "User does not have permission to view this data."
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.mco_id": "method.request.querystring.mco_id",
            "integration.request.querystring.start": "method.request.querystring.start",
            "integration.request.querystring.mco_app_id": "method.request.querystring.mco_app_id",
            "integration.request.querystring.mid": "method.request.querystring.mid",
            "integration.request.querystring.provider": "method.request.querystring.provider",
            "integration.request.querystring.end": "method.request.querystring.end"
          },
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/mid/socialData"
        }
      }
    },
    "/api/mid/socialData/count": {
      "get": {
        "tags": ["mid-data-query-controller"],
        "summary": "Returns the number of rows that match the provided social data query parameters.",
        "operationId": "countSocialDataUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "mid",
          "in": "query",
          "description": "mid",
          "required": false,
          "type": "string"
        }, {
          "name": "provider",
          "in": "query",
          "description": "provider",
          "required": false,
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        }, {
          "name": "start",
          "in": "query",
          "description": "start",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end",
          "in": "query",
          "description": "end",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "mco_id",
          "in": "query",
          "description": "mco_id",
          "required": false,
          "type": "string"
        }, {
          "name": "mco_app_id",
          "in": "query",
          "description": "mco_app_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleCountResultDTO"
            }
          },
          "403": {
            "description": "User does not have permission to view this data."
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.mco_id": "method.request.querystring.mco_id",
            "integration.request.querystring.start": "method.request.querystring.start",
            "integration.request.querystring.mco_app_id": "method.request.querystring.mco_app_id",
            "integration.request.querystring.mid": "method.request.querystring.mid",
            "integration.request.querystring.provider": "method.request.querystring.provider",
            "integration.request.querystring.end": "method.request.querystring.end"
          },
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/mid/socialData/count"
        }
      }
    },
    "/api/mid/socialData/export": {
      "post": {
        "tags": ["mid-data-query-controller"],
        "summary": "Initiates a task to export social data asynchronously.",
        "operationId": "initiateSocialDataExportUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "file_type",
          "in": "query",
          "description": "file_type",
          "required": true,
          "type": "string",
          "enum": ["CSV", "XLSX"]
        }, {
          "name": "mid",
          "in": "query",
          "description": "mid",
          "required": false,
          "type": "string"
        }, {
          "name": "provider",
          "in": "query",
          "description": "provider",
          "required": false,
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        }, {
          "name": "start",
          "in": "query",
          "description": "start",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end",
          "in": "query",
          "description": "end",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "mco_id",
          "in": "query",
          "description": "mco_id",
          "required": false,
          "type": "string"
        }, {
          "name": "mco_app_id",
          "in": "query",
          "description": "mco_app_id",
          "required": false,
          "type": "string"
        }, {
          "name": "selected_columns",
          "in": "query",
          "description": "selected_columns",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "User does not have permission to view this data."
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.mco_id": "method.request.querystring.mco_id",
            "integration.request.querystring.start": "method.request.querystring.start",
            "integration.request.querystring.mco_app_id": "method.request.querystring.mco_app_id",
            "integration.request.querystring.selected_columns": "method.request.querystring.selected_columns",
            "integration.request.querystring.file_type": "method.request.querystring.file_type",
            "integration.request.querystring.mid": "method.request.querystring.mid",
            "integration.request.querystring.provider": "method.request.querystring.provider",
            "integration.request.querystring.end": "method.request.querystring.end"
          },
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/mid/socialData/export"
        }
      }
    },
    "/api/mid/track": {
      "post": {
        "tags": ["mid-event-tracking-controller"],
        "summary": "MID event tracking",
        "operationId": "trackEventsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "in": "body",
          "name": "midEvents",
          "description": "midEvents",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MIDEvent"
            }
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MIDEventLoggingResults"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mid/track"
        }
      }
    },
    "/api/mid/userSocialData": {
      "get": {
        "tags": ["mid-data-query-controller"],
        "summary": "fetchSocialDataForUsers",
        "operationId": "fetchSocialDataForUsersUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "mid",
          "in": "query",
          "description": "mid",
          "required": false,
          "type": "string"
        }, {
          "name": "start",
          "in": "query",
          "description": "start",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end",
          "in": "query",
          "description": "end",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "mco_id",
          "in": "query",
          "description": "mco_id",
          "required": false,
          "type": "string"
        }, {
          "name": "mco_app_id",
          "in": "query",
          "description": "mco_app_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MIDUserSocialDataDTO"
              }
            }
          }
        },
        "deprecated": true,
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.mco_id": "method.request.querystring.mco_id",
            "integration.request.querystring.start": "method.request.querystring.start",
            "integration.request.querystring.mco_app_id": "method.request.querystring.mco_app_id",
            "integration.request.querystring.mid": "method.request.querystring.mid",
            "integration.request.querystring.end": "method.request.querystring.end"
          },
          "type": "http",
          "uri": "/api/mid/userSocialData"
        }
      }
    },
    "/api/mid/verifySession": {
      "post": {
        "tags": ["mid-session-controller"],
        "summary": "verifySession",
        "operationId": "verifySessionUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "X-UBE-HMAC",
          "in": "header",
          "description": "X-UBE-HMAC",
          "required": true,
          "type": "string"
        }, {
          "name": "X-UBE-PAYLOAD-SHA1",
          "in": "header",
          "description": "X-UBE-PAYLOAD-SHA1",
          "required": true,
          "type": "string"
        }, {
          "name": "sessionToken",
          "in": "query",
          "description": "sessionToken",
          "required": true,
          "type": "string"
        }, {
          "name": "timestamp",
          "in": "query",
          "description": "timestamp",
          "required": true,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VerifySessionResponseDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.sessionToken": "method.request.querystring.sessionToken",
            "integration.request.querystring.timestamp": "method.request.querystring.timestamp"
          },
          "type": "http",
          "uri": "/api/mid/verifySession"
        }
      }
    },
    "/api/mid/verifyUST": {
      "post": {
        "tags": ["mid-session-controller"],
        "summary": "verifyUST",
        "operationId": "verifyUSTUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "X-UBE-HMAC",
          "in": "header",
          "description": "X-UBE-HMAC",
          "required": true,
          "type": "string"
        }, {
          "name": "X-UBE-PAYLOAD-SHA1",
          "in": "header",
          "description": "X-UBE-PAYLOAD-SHA1",
          "required": true,
          "type": "string"
        }, {
          "name": "ust",
          "in": "query",
          "description": "ust",
          "required": true,
          "type": "string"
        }, {
          "name": "timestamp",
          "in": "query",
          "description": "timestamp",
          "required": true,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UnauthorizedSessionToken"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.ust": "method.request.querystring.ust",
            "integration.request.querystring.timestamp": "method.request.querystring.timestamp"
          },
          "type": "http",
          "uri": "/api/mid/verifyUST"
        }
      }
    },
    "/api/mid/{appId}/oauth/{provider}/{version}/auth": {
      "post": {
        "tags": ["mido-auth-controller"],
        "summary": "Use a valid OAuth authorization code to authenticate.",
        "operationId": "loginWithOAuthUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "appId",
          "in": "path",
          "description": "appId",
          "required": true,
          "type": "string"
        }, {
          "name": "provider",
          "in": "path",
          "description": "provider",
          "required": true,
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        }, {
          "name": "version",
          "in": "path",
          "description": "version",
          "required": true,
          "type": "string",
          "enum": ["V1A", "V2"]
        }, {
          "name": "code",
          "in": "query",
          "description": "code",
          "required": true,
          "type": "string"
        }, {
          "name": "redirect_url",
          "in": "query",
          "description": "redirect_url",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.code": "method.request.querystring.code",
            "integration.request.querystring.redirect_url": "method.request.querystring.redirect_url"
          },
          "type": "http",
          "uri": "/api/mid/{appId}/oauth/{provider}/{version}/auth"
        }
      }
    },
    "/api/mid/{appId}/oauth/{provider}/{version}/authorizationUrl": {
      "get": {
        "tags": ["mido-auth-controller"],
        "summary": "Retrieve the authorization URL to authenticate with a specified oauth service.",
        "operationId": "getAuthorizationUrlUsingGET_1",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "appId",
          "in": "path",
          "description": "appId",
          "required": true,
          "type": "string"
        }, {
          "name": "provider",
          "in": "path",
          "description": "provider",
          "required": true,
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        }, {
          "name": "version",
          "in": "path",
          "description": "version",
          "required": true,
          "type": "string",
          "enum": ["V1A", "V2"]
        }, {
          "name": "redirect_url",
          "in": "query",
          "description": "redirect_url",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.redirect_url": "method.request.querystring.redirect_url"
          },
          "type": "http",
          "uri": "/api/mid/{appId}/oauth/{provider}/{version}/authorizationUrl"
        }
      }
    },
    "/api/mobileClient/init": {
      "get": {
        "tags": ["mobile-client-controller"],
        "summary": "getMobileInitializationData",
        "operationId": "getMobileInitializationDataUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MobileInitDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/mobileClient/init"
        }
      }
    },
    "/api/notification/markAsRead": {
      "post": {
        "tags": ["notification-feed-controller"],
        "summary": "Update the is_read flag on NotificationEntries for the current user.  This is an async task.",
        "operationId": "markAsReadForCurrentUserUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "start_time",
          "in": "query",
          "description": "number of milliseconds since epoch",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end_time",
          "in": "query",
          "description": "number of milliseconds since epoch",
          "required": false,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleMessageResultDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.end_time": "method.request.querystring.end_time",
            "integration.request.querystring.start_time": "method.request.querystring.start_time"
          },
          "type": "http",
          "uri": "/api/notification/markAsRead"
        }
      }
    },
    "/api/notification/user/{userId}/markAsRead": {
      "post": {
        "tags": ["notification-feed-controller"],
        "summary": "Update the is_read flag on NotificationEntries for the specified user.  This is an async task.",
        "operationId": "markAsReadUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }, {
          "name": "start_time",
          "in": "query",
          "description": "number of milliseconds since epoch",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end_time",
          "in": "query",
          "description": "number of milliseconds since epoch",
          "required": false,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleMessageResultDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.end_time": "method.request.querystring.end_time",
            "integration.request.querystring.start_time": "method.request.querystring.start_time"
          },
          "type": "http",
          "uri": "/api/notification/user/{userId}/markAsRead"
        }
      }
    },
    "/api/notification/{notificationId}": {
      "put": {
        "tags": ["notification-feed-controller"],
        "summary": "Update the is_read flag on the specified NotificationEntry",
        "operationId": "updateNotificationEntryUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "notificationId",
          "in": "path",
          "description": "notificationId",
          "required": true,
          "type": "string"
        }, {
          "name": "is_read",
          "in": "query",
          "description": "is_read",
          "required": true,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.is_read": "method.request.querystring.is_read"
          },
          "type": "http",
          "uri": "/api/notification/{notificationId}"
        }
      }
    },
    "/api/notificationEnums": {
      "get": {
        "tags": ["notification-type-controller"],
        "summary": "get a JSON object that combines all of the enums together for category, recipient type, frequency, etc.",
        "operationId": "getNotificationEnumsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationEnums"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/notificationEnums"
        }
      }
    },
    "/api/notificationSettings": {
      "get": {
        "tags": ["notification-settings-controller"],
        "summary": "Get all NotificationSettings for the current user",
        "operationId": "getNotificationSettingsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationSettingsDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/notificationSettings"
        }
      }
    },
    "/api/notificationSettings/company/{companyId}": {
      "get": {
        "tags": ["notification-settings-controller"],
        "summary": "(company admin only) Get a list of NotificationSettings for the specified company",
        "operationId": "getNotificationSettingsForCompanyUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationSettingsDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/notificationSettings/company/{companyId}"
        }
      }
    },
    "/api/notificationSettings/system": {
      "get": {
        "tags": ["notification-settings-controller"],
        "summary": "(admin only) Get a list of system default NotificationSettings for each NotificationType",
        "operationId": "getNotificationSettingsForSystemUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationSettingsDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/notificationSettings/system"
        }
      }
    },
    "/api/notificationSettings/user/{userId}": {
      "get": {
        "tags": ["notification-settings-controller"],
        "summary": "Get a list of NotificationSettings for the specified userId. If the current user is different from the specified userId, then the current user must be a system admin.",
        "operationId": "getNotificationSettingsForUserUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationSettingsDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/notificationSettings/user/{userId}"
        }
      }
    },
    "/api/notificationSettings/{notificationSettingsId}": {
      "put": {
        "tags": ["notification-settings-controller"],
        "summary": "Update the specified NotificationSettings for the current user",
        "operationId": "editNotificationSettingsUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "notificationSettingsId",
          "in": "path",
          "description": "notificationSettingsId",
          "required": true,
          "type": "string"
        }, {
          "name": "in_feed",
          "in": "query",
          "description": "in_feed",
          "required": true,
          "type": "boolean"
        }, {
          "name": "send_email",
          "in": "query",
          "description": "send_email",
          "required": true,
          "type": "boolean"
        }, {
          "name": "mobile_push",
          "in": "query",
          "description": "mobile_push",
          "required": true,
          "type": "boolean"
        }, {
          "name": "send_text",
          "in": "query",
          "description": "send_text",
          "required": true,
          "type": "boolean"
        }, {
          "name": "portal_push",
          "in": "query",
          "description": "portal_push",
          "required": true,
          "type": "boolean"
        }, {
          "name": "frequency",
          "in": "query",
          "description": "frequency",
          "required": true,
          "type": "string",
          "enum": ["instant", "instantOnceComplete", "daily", "weekly", "monthly", "dateTime"]
        }, {
          "name": "frequency_data_json",
          "in": "query",
          "description": "frequency_data_json",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationSettingsDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.send_email": "method.request.querystring.send_email",
            "integration.request.querystring.frequency": "method.request.querystring.frequency",
            "integration.request.querystring.send_text": "method.request.querystring.send_text",
            "integration.request.querystring.frequency_data_json": "method.request.querystring.frequency_data_json",
            "integration.request.querystring.mobile_push": "method.request.querystring.mobile_push",
            "integration.request.querystring.in_feed": "method.request.querystring.in_feed",
            "integration.request.querystring.portal_push": "method.request.querystring.portal_push"
          },
          "type": "http",
          "uri": "/api/notificationSettings/{notificationSettingsId}"
        }
      },
      "delete": {
        "tags": ["notification-settings-controller"],
        "summary": "Delete the specified NotificationSettings for the current user",
        "operationId": "deleteNotificationSettingsUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "notificationSettingsId",
          "in": "path",
          "description": "notificationSettingsId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/notificationSettings/{notificationSettingsId}"
        }
      }
    },
    "/api/notificationSettings/{notificationSettingsId}/company/{companyId}": {
      "put": {
        "tags": ["notification-settings-controller"],
        "summary": "(company admin only) Update the specified NotificationSettings for the company",
        "operationId": "editNotificationSettingsForCompanyUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "notificationSettingsId",
          "in": "path",
          "description": "notificationSettingsId",
          "required": true,
          "type": "string"
        }, {
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "in_feed",
          "in": "query",
          "description": "in_feed",
          "required": true,
          "type": "boolean"
        }, {
          "name": "send_email",
          "in": "query",
          "description": "send_email",
          "required": true,
          "type": "boolean"
        }, {
          "name": "mobile_push",
          "in": "query",
          "description": "mobile_push",
          "required": true,
          "type": "boolean"
        }, {
          "name": "send_text",
          "in": "query",
          "description": "send_text",
          "required": true,
          "type": "boolean"
        }, {
          "name": "portal_push",
          "in": "query",
          "description": "portal_push",
          "required": true,
          "type": "boolean"
        }, {
          "name": "frequency",
          "in": "query",
          "description": "frequency",
          "required": true,
          "type": "string",
          "enum": ["instant", "instantOnceComplete", "daily", "weekly", "monthly", "dateTime"]
        }, {
          "name": "frequency_data_json",
          "in": "query",
          "description": "frequency_data_json",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationSettingsDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.send_email": "method.request.querystring.send_email",
            "integration.request.querystring.frequency": "method.request.querystring.frequency",
            "integration.request.querystring.send_text": "method.request.querystring.send_text",
            "integration.request.querystring.frequency_data_json": "method.request.querystring.frequency_data_json",
            "integration.request.querystring.mobile_push": "method.request.querystring.mobile_push",
            "integration.request.querystring.in_feed": "method.request.querystring.in_feed",
            "integration.request.querystring.portal_push": "method.request.querystring.portal_push"
          },
          "type": "http",
          "uri": "/api/notificationSettings/{notificationSettingsId}/company/{companyId}"
        }
      }
    },
    "/api/notificationSettings/{notificationSettingsId}/system": {
      "put": {
        "tags": ["notification-settings-controller"],
        "summary": "(admin only) Update the system default NotificationSettings",
        "operationId": "editNotificationSettingsForSystemDefaultUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "notificationSettingsId",
          "in": "path",
          "description": "notificationSettingsId",
          "required": true,
          "type": "string"
        }, {
          "name": "in_feed",
          "in": "query",
          "description": "in_feed",
          "required": true,
          "type": "boolean"
        }, {
          "name": "send_email",
          "in": "query",
          "description": "send_email",
          "required": true,
          "type": "boolean"
        }, {
          "name": "mobile_push",
          "in": "query",
          "description": "mobile_push",
          "required": true,
          "type": "boolean"
        }, {
          "name": "send_text",
          "in": "query",
          "description": "send_text",
          "required": true,
          "type": "boolean"
        }, {
          "name": "portal_push",
          "in": "query",
          "description": "portal_push",
          "required": true,
          "type": "boolean"
        }, {
          "name": "frequency",
          "in": "query",
          "description": "frequency",
          "required": true,
          "type": "string",
          "enum": ["instant", "instantOnceComplete", "daily", "weekly", "monthly", "dateTime"]
        }, {
          "name": "frequency_data_json",
          "in": "query",
          "description": "frequency_data_json",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationSettingsDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.send_email": "method.request.querystring.send_email",
            "integration.request.querystring.frequency": "method.request.querystring.frequency",
            "integration.request.querystring.send_text": "method.request.querystring.send_text",
            "integration.request.querystring.frequency_data_json": "method.request.querystring.frequency_data_json",
            "integration.request.querystring.mobile_push": "method.request.querystring.mobile_push",
            "integration.request.querystring.in_feed": "method.request.querystring.in_feed",
            "integration.request.querystring.portal_push": "method.request.querystring.portal_push"
          },
          "type": "http",
          "uri": "/api/notificationSettings/{notificationSettingsId}/system"
        }
      }
    },
    "/api/notificationSettings/{notificationSettingsId}/user/{userId}": {
      "put": {
        "tags": ["notification-settings-controller"],
        "summary": "Update the NotificationSettings for the specified userId.  If the current user is different from the specified userId, then the current user must be a system admin.",
        "operationId": "editNotificationSettingsForUserUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "notificationSettingsId",
          "in": "path",
          "description": "notificationSettingsId",
          "required": true,
          "type": "string"
        }, {
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }, {
          "name": "in_feed",
          "in": "query",
          "description": "in_feed",
          "required": true,
          "type": "boolean"
        }, {
          "name": "send_email",
          "in": "query",
          "description": "send_email",
          "required": true,
          "type": "boolean"
        }, {
          "name": "mobile_push",
          "in": "query",
          "description": "mobile_push",
          "required": true,
          "type": "boolean"
        }, {
          "name": "send_text",
          "in": "query",
          "description": "send_text",
          "required": true,
          "type": "boolean"
        }, {
          "name": "portal_push",
          "in": "query",
          "description": "portal_push",
          "required": true,
          "type": "boolean"
        }, {
          "name": "frequency",
          "in": "query",
          "description": "frequency",
          "required": true,
          "type": "string",
          "enum": ["instant", "instantOnceComplete", "daily", "weekly", "monthly", "dateTime"]
        }, {
          "name": "frequency_data_json",
          "in": "query",
          "description": "frequency_data_json",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationSettingsDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.send_email": "method.request.querystring.send_email",
            "integration.request.querystring.frequency": "method.request.querystring.frequency",
            "integration.request.querystring.send_text": "method.request.querystring.send_text",
            "integration.request.querystring.frequency_data_json": "method.request.querystring.frequency_data_json",
            "integration.request.querystring.mobile_push": "method.request.querystring.mobile_push",
            "integration.request.querystring.in_feed": "method.request.querystring.in_feed",
            "integration.request.querystring.portal_push": "method.request.querystring.portal_push"
          },
          "type": "http",
          "uri": "/api/notificationSettings/{notificationSettingsId}/user/{userId}"
        }
      }
    },
    "/api/notificationType": {
      "get": {
        "tags": ["notification-type-controller"],
        "summary": "Get all NotificationTypes",
        "operationId": "getAllNotificationTypesUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "include_deleted",
          "in": "query",
          "description": "include_deleted",
          "required": false,
          "type": "boolean",
          "default": false
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationType"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.include_deleted": "method.request.querystring.include_deleted"
          },
          "type": "http",
          "uri": "/api/notificationType"
        }
      },
      "post": {
        "tags": ["notification-type-controller"],
        "summary": "(admin only) Create a new NotificationType with default NotificationSettings values",
        "operationId": "addNotificationTypeUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }, {
          "name": "recipient_type",
          "in": "query",
          "description": "recipient_type",
          "required": true,
          "type": "string",
          "enum": ["user", "allInCompany", "presenter", "companyAdmin", "systemAdmin", "groupMembers", "allUsers"]
        }, {
          "name": "category",
          "in": "query",
          "description": "category",
          "required": true,
          "type": "string",
          "enum": ["teamContentUpdated", "personalContentUpdated", "salesActivity", "teamActivity", "shodoggCommunication"]
        }, {
          "name": "message_template",
          "in": "query",
          "description": "message_template",
          "required": true,
          "type": "string"
        }, {
          "name": "email_template_name",
          "in": "query",
          "description": "email_template_name",
          "required": false,
          "type": "string"
        }, {
          "name": "system_action",
          "in": "query",
          "description": "system_action",
          "required": true,
          "type": "string",
          "enum": ["login", "logout", "loginFail", "resetPW", "s", "sa", "rv", "aa", "ad", "ag", "v", "vE", "cilc", "cilca", "cilcr", "cilcE", "sucilc", "sucilcE", "as", "scSyncCo", "scSyncEv", "scDisc", "ssEUd", "lockSs", "ssDisc", "evUrlPresStart", "evUrlPresEnd", "evUrlDeactivate", "ucP", "ucL", "ucS", "AaCS", "ACF", "pc", "wnu", "fatpcf", "fripcf", "fdipcf", "pcfc", "pcfd", "mobCmd", "mobDeviceInfo", "mobAppCrash", "mobAppUse", "mobUserDevLink", "cA", "cR", "prt", "prtOLD", "prtSL", "als", "AOPL", "ash", "aS", "aPI", "aMI", "aSAN", "aAA", "aDA", "agSS", "agSSs", "auSS", "agSSScrCnt", "apiReapSS", "apiUploadBrainshark", "apiUploadFile", "apiUploadYouTube", "aUVbU", "aUIbU", "auCF", "auTn", "auLA", "auCR", "acUser", "ujc", "auUser", "adUser", "aCC", "aGC", "aUC", "aDC", "aAUtC", "aRUtC", "acGroup", "auGroup", "adGroup", "aga", "dga", "aAddAssetGroup", "aAAtF", "aRAfF", "aAAtGF", "aRAfGF", "aCA", "aUA", "aCAl", "aARA", "aSAFs", "aRA", "aGAlrt", "aGAlrts", "aUAl", "aRAl", "aCFG", "aFAAa", "aFAAu", "aFAAF", "aFAAFU", "aFAAc", "aFAAGF", "aFAAG", "aFAFU", "aFAFG", "aaPtA", "adPfA", "aRemAssetGroup", "acAssetNote", "auAssetNote", "adAssetNote", "aAD", "acPageNote", "auPageNote", "adPageNote", "adUGS", "arUGS", "aaUGS", "apUGS", "adCGS", "apCGS", "apCI", "apSUCI", "agFC", "agRF", "agCRF", "agUF", "auF", "adF", "acF", "auFP", "agFcR", "aRNAC", "agAsset", "acFav", "adFav", "agFav", "acSSL", "aSSLC", "aSSLCE", "aCESSL", "aEAL", "aGACS", "aDBfu", "aDBal", "aDBau", "aDBs", "aDBui", "aaLC", "aaLCE", "aFAU", "aFDU", "aFGAU", "acFU", "oGAU", "oGWR", "oGIR", "oGAR", "oL", "moGAU", "moGWR", "moGIR", "moGAR", "moL", "amaC", "amaGa", "amaG", "amaE", "amaD", "amkC", "amkD", "amkT", "amskC", "amskE", "amskD", "amRV", "amPSSS", "oMRS", "iMRS", "aGFSL", "aFSLC", "aFSLE", "plc", "ple", "pld", "plia", "plie", "plid", "browserInfo"]
        }, {
          "name": "in_feed",
          "in": "query",
          "description": "in_feed",
          "required": true,
          "type": "boolean"
        }, {
          "name": "send_email",
          "in": "query",
          "description": "send_email",
          "required": true,
          "type": "boolean"
        }, {
          "name": "mobile_push",
          "in": "query",
          "description": "mobile_push",
          "required": true,
          "type": "boolean"
        }, {
          "name": "send_text",
          "in": "query",
          "description": "send_text",
          "required": true,
          "type": "boolean"
        }, {
          "name": "portal_push",
          "in": "query",
          "description": "portal_push",
          "required": true,
          "type": "boolean"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NotificationType"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.send_email": "method.request.querystring.send_email",
            "integration.request.querystring.email_template_name": "method.request.querystring.email_template_name",
            "integration.request.querystring.send_text": "method.request.querystring.send_text",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.system_action": "method.request.querystring.system_action",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.message_template": "method.request.querystring.message_template",
            "integration.request.querystring.mobile_push": "method.request.querystring.mobile_push",
            "integration.request.querystring.recipient_type": "method.request.querystring.recipient_type",
            "integration.request.querystring.in_feed": "method.request.querystring.in_feed",
            "integration.request.querystring.category": "method.request.querystring.category",
            "integration.request.querystring.portal_push": "method.request.querystring.portal_push"
          },
          "type": "http",
          "uri": "/api/notificationType"
        }
      }
    },
    "/api/notificationType/{notificationTypeId}": {
      "put": {
        "tags": ["notification-type-controller"],
        "summary": "(admin only) Edit an existing notification type",
        "operationId": "editNotificationTypeUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "notificationTypeId",
          "in": "path",
          "description": "notificationTypeId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }, {
          "name": "recipient_type",
          "in": "query",
          "description": "recipient_type",
          "required": true,
          "type": "string",
          "enum": ["user", "allInCompany", "presenter", "companyAdmin", "systemAdmin", "groupMembers", "allUsers"]
        }, {
          "name": "category",
          "in": "query",
          "description": "category",
          "required": true,
          "type": "string",
          "enum": ["teamContentUpdated", "personalContentUpdated", "salesActivity", "teamActivity", "shodoggCommunication"]
        }, {
          "name": "message_template",
          "in": "query",
          "description": "message_template",
          "required": true,
          "type": "string"
        }, {
          "name": "email_template_name",
          "in": "query",
          "description": "email_template_name",
          "required": false,
          "type": "string"
        }, {
          "name": "system_action",
          "in": "query",
          "description": "system_action",
          "required": true,
          "type": "string",
          "enum": ["login", "logout", "loginFail", "resetPW", "s", "sa", "rv", "aa", "ad", "ag", "v", "vE", "cilc", "cilca", "cilcr", "cilcE", "sucilc", "sucilcE", "as", "scSyncCo", "scSyncEv", "scDisc", "ssEUd", "lockSs", "ssDisc", "evUrlPresStart", "evUrlPresEnd", "evUrlDeactivate", "ucP", "ucL", "ucS", "AaCS", "ACF", "pc", "wnu", "fatpcf", "fripcf", "fdipcf", "pcfc", "pcfd", "mobCmd", "mobDeviceInfo", "mobAppCrash", "mobAppUse", "mobUserDevLink", "cA", "cR", "prt", "prtOLD", "prtSL", "als", "AOPL", "ash", "aS", "aPI", "aMI", "aSAN", "aAA", "aDA", "agSS", "agSSs", "auSS", "agSSScrCnt", "apiReapSS", "apiUploadBrainshark", "apiUploadFile", "apiUploadYouTube", "aUVbU", "aUIbU", "auCF", "auTn", "auLA", "auCR", "acUser", "ujc", "auUser", "adUser", "aCC", "aGC", "aUC", "aDC", "aAUtC", "aRUtC", "acGroup", "auGroup", "adGroup", "aga", "dga", "aAddAssetGroup", "aAAtF", "aRAfF", "aAAtGF", "aRAfGF", "aCA", "aUA", "aCAl", "aARA", "aSAFs", "aRA", "aGAlrt", "aGAlrts", "aUAl", "aRAl", "aCFG", "aFAAa", "aFAAu", "aFAAF", "aFAAFU", "aFAAc", "aFAAGF", "aFAAG", "aFAFU", "aFAFG", "aaPtA", "adPfA", "aRemAssetGroup", "acAssetNote", "auAssetNote", "adAssetNote", "aAD", "acPageNote", "auPageNote", "adPageNote", "adUGS", "arUGS", "aaUGS", "apUGS", "adCGS", "apCGS", "apCI", "apSUCI", "agFC", "agRF", "agCRF", "agUF", "auF", "adF", "acF", "auFP", "agFcR", "aRNAC", "agAsset", "acFav", "adFav", "agFav", "acSSL", "aSSLC", "aSSLCE", "aCESSL", "aEAL", "aGACS", "aDBfu", "aDBal", "aDBau", "aDBs", "aDBui", "aaLC", "aaLCE", "aFAU", "aFDU", "aFGAU", "acFU", "oGAU", "oGWR", "oGIR", "oGAR", "oL", "moGAU", "moGWR", "moGIR", "moGAR", "moL", "amaC", "amaGa", "amaG", "amaE", "amaD", "amkC", "amkD", "amkT", "amskC", "amskE", "amskD", "amRV", "amPSSS", "oMRS", "iMRS", "aGFSL", "aFSLC", "aFSLE", "plc", "ple", "pld", "plia", "plie", "plid", "browserInfo"]
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationType"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email_template_name": "method.request.querystring.email_template_name",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.system_action": "method.request.querystring.system_action",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.message_template": "method.request.querystring.message_template",
            "integration.request.querystring.recipient_type": "method.request.querystring.recipient_type",
            "integration.request.querystring.category": "method.request.querystring.category"
          },
          "type": "http",
          "uri": "/api/notificationType/{notificationTypeId}"
        }
      },
      "delete": {
        "tags": ["notification-type-controller"],
        "summary": "delete a NotificationType",
        "operationId": "deleteNotificationTypeUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "notificationTypeId",
          "in": "path",
          "description": "notificationTypeId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/notificationType/{notificationTypeId}"
        }
      }
    },
    "/api/notifications": {
      "get": {
        "tags": ["notification-feed-controller"],
        "summary": "Get a list of notifications for the current user (ordered by timestamp, descending).Accepts paging parameters.",
        "operationId": "getNotificationFeedUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "start_time",
          "in": "query",
          "description": "number of milliseconds since epoch",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end_time",
          "in": "query",
          "description": "number of milliseconds since epoch",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "include_read",
          "in": "query",
          "description": "include_read",
          "required": false,
          "type": "boolean",
          "default": true
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.include_read": "method.request.querystring.include_read",
            "integration.request.querystring.end_time": "method.request.querystring.end_time",
            "integration.request.querystring.start_time": "method.request.querystring.start_time"
          },
          "type": "http",
          "uri": "/api/notifications"
        }
      }
    },
    "/api/notifications/company/{companyId}": {
      "get": {
        "tags": ["notification-feed-controller"],
        "summary": "(company admin only) Get the notifications feed for the specified company.  Pageable.",
        "operationId": "getNotificationFeedForCompanyUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "start_time",
          "in": "query",
          "description": "number of milliseconds since epoch",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end_time",
          "in": "query",
          "description": "number of milliseconds since epoch",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "include_read",
          "in": "query",
          "description": "include_read",
          "required": false,
          "type": "boolean",
          "default": true
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.include_read": "method.request.querystring.include_read",
            "integration.request.querystring.end_time": "method.request.querystring.end_time",
            "integration.request.querystring.start_time": "method.request.querystring.start_time"
          },
          "type": "http",
          "uri": "/api/notifications/company/{companyId}"
        }
      }
    },
    "/api/notifications/count": {
      "get": {
        "tags": ["notification-feed-controller"],
        "summary": "Get the count of notifications posted after a given time",
        "operationId": "getUreadNotificationFeedUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "start_time",
          "in": "query",
          "description": "number of milliseconds since epoch",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "include_read",
          "in": "query",
          "description": "include_read",
          "required": false,
          "type": "boolean",
          "default": false
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.include_read": "method.request.querystring.include_read",
            "integration.request.querystring.start_time": "method.request.querystring.start_time"
          },
          "type": "http",
          "uri": "/api/notifications/count"
        }
      }
    },
    "/api/notifications/user/{userId}": {
      "get": {
        "tags": ["notification-feed-controller"],
        "summary": "Get a list of notifications for the specified user (ordered by timestamp, descending).Accepts paging parameters.",
        "operationId": "getNotificationFeedForUserUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }, {
          "name": "start_time",
          "in": "query",
          "description": "number of milliseconds since epoch",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end_time",
          "in": "query",
          "description": "number of milliseconds since epoch",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "include_read",
          "in": "query",
          "description": "include_read",
          "required": false,
          "type": "boolean",
          "default": true
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.include_read": "method.request.querystring.include_read",
            "integration.request.querystring.end_time": "method.request.querystring.end_time",
            "integration.request.querystring.start_time": "method.request.querystring.start_time"
          },
          "type": "http",
          "uri": "/api/notifications/user/{userId}"
        }
      }
    },
    "/api/oauth/{provider}/{version}/auth": {
      "post": {
        "tags": ["o-auth-controller"],
        "summary": "Use a valid OAuth authorization code to authenticate.",
        "operationId": "loginWithOAuthUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "provider",
          "in": "path",
          "description": "provider",
          "required": true,
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        }, {
          "name": "version",
          "in": "path",
          "description": "version",
          "required": true,
          "type": "string",
          "enum": ["V1A", "V2"]
        }, {
          "name": "code",
          "in": "query",
          "description": "code",
          "required": true,
          "type": "string"
        }, {
          "name": "platform",
          "in": "query",
          "description": "platform",
          "required": true,
          "type": "string",
          "enum": ["IOS", "ANDROID", "WINDOWS_STORE", "WEB"]
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.code": "method.request.querystring.code",
            "integration.request.querystring.platform": "method.request.querystring.platform"
          },
          "type": "http",
          "uri": "/api/oauth/{provider}/{version}/auth"
        }
      }
    },
    "/api/oauth/{provider}/{version}/authorizationUrl": {
      "get": {
        "tags": ["o-auth-controller"],
        "summary": "Retrieve the authorization URL to authenticate with a specified oauth service.",
        "operationId": "getAuthorizationUrlUsingGET_2",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "provider",
          "in": "path",
          "description": "provider",
          "required": true,
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        }, {
          "name": "version",
          "in": "path",
          "description": "version",
          "required": true,
          "type": "string",
          "enum": ["V1A", "V2"]
        }, {
          "name": "platform",
          "in": "query",
          "description": "platform",
          "required": true,
          "type": "string",
          "enum": ["IOS", "ANDROID", "WINDOWS_STORE", "WEB"]
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.platform": "method.request.querystring.platform"
          },
          "type": "http",
          "uri": "/api/oauth/{provider}/{version}/authorizationUrl"
        }
      }
    },
    "/api/oauth/{provider}/{version}/redirect/android": {
      "get": {
        "tags": ["o-auth-controller"],
        "summary": "Retrieve an Android redirect URL for the specified oauth service.",
        "operationId": "getAndroidRedirectUrlUsingGET_1",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "provider",
          "in": "path",
          "description": "provider",
          "required": true,
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        }, {
          "name": "version",
          "in": "path",
          "description": "version",
          "required": true,
          "type": "string",
          "enum": ["V1A", "V2"]
        }, {
          "name": "code",
          "in": "query",
          "description": "code",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelAndView"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.code": "method.request.querystring.code"
          },
          "type": "http",
          "uri": "/api/oauth/{provider}/{version}/redirect/android"
        }
      }
    },
    "/api/oauth/{provider}/{version}/redirect/ios": {
      "get": {
        "tags": ["o-auth-controller"],
        "summary": "Retrieve an iOS redirect URL for the specified oauth service.",
        "operationId": "getIOSRedirectUrlUsingGET_2",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "provider",
          "in": "path",
          "description": "provider",
          "required": true,
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        }, {
          "name": "version",
          "in": "path",
          "description": "version",
          "required": true,
          "type": "string",
          "enum": ["V1A", "V2"]
        }, {
          "name": "code",
          "in": "query",
          "description": "code",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelAndView"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.code": "method.request.querystring.code"
          },
          "type": "http",
          "uri": "/api/oauth/{provider}/{version}/redirect/ios"
        }
      }
    },
    "/api/oauth/{provider}/{version}/redirect/web": {
      "get": {
        "tags": ["o-auth-controller"],
        "summary": "Retrieve a web redirect URL for the specified oauth service.",
        "operationId": "getWebRedirectUrlUsingGET",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "provider",
          "in": "path",
          "description": "provider",
          "required": true,
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        }, {
          "name": "version",
          "in": "path",
          "description": "version",
          "required": true,
          "type": "string",
          "enum": ["V1A", "V2"]
        }, {
          "name": "code",
          "in": "query",
          "description": "code",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "redirectAttributes",
          "description": "redirectAttributes",
          "required": false,
          "schema": {
            "$ref": "#/definitions/RedirectAttributes"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelAndView"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.code": "method.request.querystring.code"
          },
          "type": "http",
          "uri": "/api/oauth/{provider}/{version}/redirect/web"
        }
      }
    },
    "/api/pending_api_users": {
      "get": {
        "tags": ["user-controller"],
        "summary": "getPendingAPIUsers",
        "operationId": "getPendingAPIUsersUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserAPIKeyDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/pending_api_users"
        }
      }
    },
    "/api/playlist": {
      "get": {
        "tags": ["playlist-controller"],
        "summary": "Get all playlists for the current user",
        "operationId": "getPlaylistsForCurrentUserUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Playlist"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/playlist"
        }
      },
      "post": {
        "tags": ["playlist-controller"],
        "summary": "Create a new Playlist",
        "operationId": "createPlaylistUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }, {
          "name": "isDefault",
          "in": "query",
          "description": "isDefault",
          "required": false,
          "type": "boolean"
        }, {
          "name": "isPublic",
          "in": "query",
          "description": "isPublic",
          "required": false,
          "type": "boolean"
        }, {
          "name": "ownerId",
          "in": "query",
          "description": "ownerId",
          "required": false,
          "type": "string"
        }, {
          "name": "ownerType",
          "in": "query",
          "description": "ownerType",
          "required": false,
          "type": "string",
          "enum": ["USER", "COMPANY", "MCO_APP", "SYSTEM"]
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.ownerId": "method.request.querystring.ownerId",
            "integration.request.querystring.ownerType": "method.request.querystring.ownerType",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.isDefault": "method.request.querystring.isDefault",
            "integration.request.querystring.isPublic": "method.request.querystring.isPublic"
          },
          "type": "http",
          "uri": "/api/playlist"
        }
      }
    },
    "/api/playlist/default": {
      "get": {
        "tags": ["playlist-controller"],
        "summary": "Get default playlist for the current user",
        "operationId": "getDefaultPlaylistForCurrentUserUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/playlist/default"
        }
      }
    },
    "/api/playlist/owner/{ownerId}": {
      "get": {
        "tags": ["playlist-controller"],
        "summary": "Get all playlists for owner.",
        "operationId": "getPlaylistsForOwnerUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "ownerId",
          "in": "path",
          "description": "ownerId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Playlist"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/playlist/owner/{ownerId}"
        }
      }
    },
    "/api/playlist/{playlistId}": {
      "get": {
        "tags": ["playlist-controller"],
        "summary": "Get an existing Playlist by ID",
        "operationId": "getPlaylistUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "playlistId",
          "in": "path",
          "description": "playlistId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/playlist/{playlistId}"
        }
      },
      "put": {
        "tags": ["playlist-controller"],
        "summary": "Edit an existing Playlist",
        "operationId": "editPlaylistUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "playlistId",
          "in": "path",
          "description": "playlistId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": false,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }, {
          "name": "isDefault",
          "in": "query",
          "description": "isDefault",
          "required": false,
          "type": "boolean"
        }, {
          "name": "isPublic",
          "in": "query",
          "description": "isPublic",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.isDefault": "method.request.querystring.isDefault",
            "integration.request.querystring.isPublic": "method.request.querystring.isPublic"
          },
          "type": "http",
          "uri": "/api/playlist/{playlistId}"
        }
      },
      "delete": {
        "tags": ["playlist-controller"],
        "summary": "Delete an existing Playlist by ID",
        "operationId": "deletePlaylistUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "playlistId",
          "in": "path",
          "description": "playlistId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/playlist/{playlistId}"
        }
      }
    },
    "/api/playlist/{playlistId}/asset": {
      "put": {
        "tags": ["playlist-controller"],
        "summary": "Add item to playlist",
        "operationId": "addItemToPlaylistUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "playlistId",
          "in": "path",
          "description": "playlistId",
          "required": true,
          "type": "string"
        }, {
          "name": "assetId",
          "in": "query",
          "description": "assetId",
          "required": false,
          "type": "string"
        }, {
          "name": "externalAssetId",
          "in": "query",
          "description": "externalAssetId",
          "required": false,
          "type": "string"
        }, {
          "name": "url",
          "in": "query",
          "description": "url",
          "required": false,
          "type": "string"
        }, {
          "name": "insertAfterAssetRefId",
          "in": "query",
          "description": "insertAfterAssetRefId",
          "required": false,
          "type": "string"
        }, {
          "name": "addToBeginning",
          "in": "query",
          "description": "addToBeginning",
          "required": false,
          "type": "boolean"
        }, {
          "name": "addToEnd",
          "in": "query",
          "description": "addToEnd",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.url": "method.request.querystring.url",
            "integration.request.querystring.externalAssetId": "method.request.querystring.externalAssetId",
            "integration.request.querystring.assetId": "method.request.querystring.assetId",
            "integration.request.querystring.addToEnd": "method.request.querystring.addToEnd",
            "integration.request.querystring.addToBeginning": "method.request.querystring.addToBeginning",
            "integration.request.querystring.insertAfterAssetRefId": "method.request.querystring.insertAfterAssetRefId"
          },
          "type": "http",
          "uri": "/api/playlist/{playlistId}/asset"
        }
      }
    },
    "/api/playlist/{playlistId}/asset/{assetRefId}": {
      "delete": {
        "tags": ["playlist-controller"],
        "summary": "Remove and item from an existing playlist.",
        "operationId": "removeItemFromPlaylistUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "playlistId",
          "in": "path",
          "description": "playlistId",
          "required": true,
          "type": "string"
        }, {
          "name": "assetRefId",
          "in": "path",
          "description": "assetRefId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/playlist/{playlistId}/asset/{assetRefId}"
        }
      }
    },
    "/api/poc/asset/{assetId}/linkAsset": {
      "post": {
        "tags": ["asset-controller"],
        "summary": "Add a link to another asset in between two pages of an existing asset",
        "operationId": "augmentAssetPageUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "asset_id_to_link",
          "in": "query",
          "description": "asset_id_to_link",
          "required": true,
          "type": "string"
        }, {
          "name": "after_page_number",
          "in": "query",
          "description": "after_page_number",
          "required": true,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AssetPrunedNotesDTO"
            }
          }
        },
        "deprecated": true,
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.after_page_number": "method.request.querystring.after_page_number",
            "integration.request.querystring.asset_id_to_link": "method.request.querystring.asset_id_to_link"
          },
          "type": "http",
          "uri": "/api/poc/asset/{assetId}/linkAsset"
        }
      }
    },
    "/api/poc/asset/{assetId}/unlinkAsset": {
      "delete": {
        "tags": ["asset-controller"],
        "summary": "Removes all or some augmented page data from the asset. If after_page_number is specified with a value of 'ALL' or a negative number, then all will be deleted.  Otherwise it will only delete the items after that page number.",
        "operationId": "removeAugmentedAssetPagesUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }, {
          "name": "after_page_number",
          "in": "query",
          "description": "after_page_number",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": true,
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.after_page_number": "method.request.querystring.after_page_number"
          },
          "type": "http",
          "uri": "/api/poc/asset/{assetId}/unlinkAsset"
        }
      }
    },
    "/api/portal/init": {
      "get": {
        "tags": ["user-portal-controller"],
        "summary": "getPortalInitializationData",
        "operationId": "getPortalInitializationDataUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "in": "body",
          "name": "m",
          "description": "m",
          "required": false,
          "schema": {
            "$ref": "#/definitions/Model"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PortalInitDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/portal/init"
        }
      }
    },
    "/api/recScreenStyle": {
      "get": {
        "tags": ["settings-controller"],
        "summary": "Retrieve all RecScreenStyle objects",
        "operationId": "findAllRecScreenStyleUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/recScreenStyle"
              }
            }
          },
          "403": {
            "description": "Current user is not admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/recScreenStyle"
        }
      },
      "post": {
        "tags": ["settings-controller"],
        "summary": "Create RecScreenStyle object",
        "operationId": "createRecScreenStyleUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/recScreenStyle"
            }
          },
          "403": {
            "description": "Current user is not admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/recScreenStyle"
        }
      }
    },
    "/api/recScreenStyle/{recScreenStyleId}": {
      "get": {
        "tags": ["settings-controller"],
        "summary": "Retrieve a single RecScreenStyle object",
        "operationId": "findRecScreenStyleUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "recScreenStyleId",
          "in": "path",
          "description": "recScreenStyleId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/recScreenStyle"
            }
          },
          "400": {
            "description": "Specified RecScreenStyle object does not exist."
          },
          "403": {
            "description": "Current user is not admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/recScreenStyle/{recScreenStyleId}"
        }
      },
      "put": {
        "tags": ["settings-controller"],
        "summary": "Add attribute(s) to a RecScreenStyle object",
        "operationId": "editRecScreenStyleUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "recScreenStyleId",
          "in": "path",
          "description": "recScreenStyleId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/recScreenStyle"
            }
          },
          "400": {
            "description": "Specified RecScreenStyle object does not exist."
          },
          "403": {
            "description": "Current user is not admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/recScreenStyle/{recScreenStyleId}"
        }
      }
    },
    "/api/recscreen/addCustomStyle": {
      "post": {
        "tags": ["receiving-screen-controller"],
        "summary": "Adds a custom receiving screen style to the database for a particular URI.",
        "operationId": "addNewStyleUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "in": "body",
          "name": "styleDTO",
          "description": "styleDTO",
          "required": true,
          "schema": {
            "$ref": "#/definitions/ScreenStyleDTO"
          }
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/recscreen/addCustomStyle"
        }
      }
    },
    "/api/rs_template/{recScreenTemplateId}": {
      "get": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Get a single RecScreenTemplate by id",
        "operationId": "getOneRecScreenTemplateUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "recScreenTemplateId",
          "in": "path",
          "description": "recScreenTemplateId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RecScreenTemplate"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/rs_template/{recScreenTemplateId}"
        }
      }
    },
    "/api/rsmodule/mcoApp/{mcoAppId}": {
      "get": {
        "tags": ["mid-rec-screen-module-controller"],
        "summary": "getAllModulesByMCOAppId",
        "operationId": "getAllModulesByMCOAppIdUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "mcoAppId",
          "in": "path",
          "description": "mcoAppId",
          "required": true,
          "type": "string"
        }, {
          "name": "include_deleted",
          "in": "query",
          "description": "include_deleted",
          "required": false,
          "type": "boolean",
          "default": false
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecScreenModule"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.include_deleted": "method.request.querystring.include_deleted"
          },
          "type": "http",
          "uri": "/api/rsmodule/mcoApp/{mcoAppId}"
        }
      },
      "post": {
        "tags": ["mid-rec-screen-module-controller"],
        "summary": "createModuleForMCOAppId",
        "operationId": "createModuleForMCOAppIdUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "mcoAppId",
          "in": "path",
          "description": "mcoAppId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }, {
          "name": "javascript_module_url",
          "in": "query",
          "description": "javascript_module_url",
          "required": false,
          "type": "string"
        }, {
          "name": "additional_js_file_urls",
          "in": "query",
          "description": "additional_js_file_urls",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "css_file_urls",
          "in": "query",
          "description": "css_file_urls",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RecScreenModule"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.css_file_urls": "method.request.querystring.css_file_urls",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.additional_js_file_urls": "method.request.querystring.additional_js_file_urls",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.javascript_module_url": "method.request.querystring.javascript_module_url"
          },
          "type": "http",
          "uri": "/api/rsmodule/mcoApp/{mcoAppId}"
        }
      }
    },
    "/api/rsmodule/{recScreenModuleId}": {
      "get": {
        "tags": ["mid-rec-screen-module-controller"],
        "summary": "getModuleById",
        "operationId": "getModuleByIdUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "recScreenModuleId",
          "in": "path",
          "description": "recScreenModuleId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RecScreenModule"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/rsmodule/{recScreenModuleId}"
        }
      },
      "put": {
        "tags": ["mid-rec-screen-module-controller"],
        "summary": "editModuleById",
        "operationId": "editModuleByIdUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "recScreenModuleId",
          "in": "path",
          "description": "recScreenModuleId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }, {
          "name": "javascript_module_url",
          "in": "query",
          "description": "javascript_module_url",
          "required": false,
          "type": "string"
        }, {
          "name": "additional_js_file_urls",
          "in": "query",
          "description": "additional_js_file_urls",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "css_file_urls",
          "in": "query",
          "description": "css_file_urls",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RecScreenModule"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.css_file_urls": "method.request.querystring.css_file_urls",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.additional_js_file_urls": "method.request.querystring.additional_js_file_urls",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.javascript_module_url": "method.request.querystring.javascript_module_url"
          },
          "type": "http",
          "uri": "/api/rsmodule/{recScreenModuleId}"
        }
      },
      "delete": {
        "tags": ["mid-rec-screen-module-controller"],
        "summary": "deleteModuleById",
        "operationId": "deleteModuleByIdUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "recScreenModuleId",
          "in": "path",
          "description": "recScreenModuleId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/rsmodule/{recScreenModuleId}"
        }
      }
    },
    "/api/rspreview/{templateId}/{previewType}": {
      "get": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Loads a preview of a branded receiving screen template.Acceptable values for {type} are: '1' for Sync Code receiving screen, '2' for Event Url receiving screen.  POST parameters should include field_<name> key/value pairs.",
        "operationId": "previewBrandedTemplateUsingGET",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "previewType",
          "in": "path",
          "description": "previewType",
          "required": true,
          "type": "string"
        }, {
          "name": "templateId",
          "in": "path",
          "description": "templateId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelAndView"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/rspreview/{templateId}/{previewType}"
        }
      },
      "post": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Loads a preview of a branded receiving screen template.Acceptable values for {type} are: '1' for Sync Code receiving screen, '2' for Event Url receiving screen.  POST parameters should include field_<name> key/value pairs.",
        "operationId": "previewBrandedTemplateUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "previewType",
          "in": "path",
          "description": "previewType",
          "required": true,
          "type": "string"
        }, {
          "name": "templateId",
          "in": "path",
          "description": "templateId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelAndView"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/rspreview/{templateId}/{previewType}"
        }
      }
    },
    "/api/rstemplate": {
      "get": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Get all RecScreenTemplates (pageable)",
        "operationId": "getAllRecScreenTemplatesUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecScreenTemplate"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/rstemplate"
        }
      }
    },
    "/api/rstemplate/{recScreenTemplateId}": {
      "get": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Get a single RecScreenTemplate by id (admin only)",
        "operationId": "getRecScreenTemplateUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "recScreenTemplateId",
          "in": "path",
          "description": "recScreenTemplateId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RecScreenTemplate"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/rstemplate/{recScreenTemplateId}"
        }
      }
    },
    "/api/rstemplate/{templateId}": {
      "delete": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Disables/deactivates the specified receiving screen template so that it is no longer available as a choice in the wizard",
        "operationId": "disableTemplateUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "templateId",
          "in": "path",
          "description": "templateId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/rstemplate/{templateId}"
        }
      }
    },
    "/api/salesforce/auth": {
      "post": {
        "tags": ["salesforce-controller"],
        "summary": "Authenticate via a Salesforce account for a given authorization code.",
        "operationId": "loginWithOAuthUsingPOST_2",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "code",
          "in": "query",
          "description": "code",
          "required": true,
          "type": "string"
        }, {
          "name": "state",
          "in": "query",
          "description": "state",
          "required": true,
          "type": "string"
        }, {
          "name": "os_type",
          "in": "query",
          "description": "os_type",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.code": "method.request.querystring.code",
            "integration.request.querystring.os_type": "method.request.querystring.os_type",
            "integration.request.querystring.state": "method.request.querystring.state"
          },
          "type": "http",
          "uri": "/api/salesforce/auth"
        }
      }
    },
    "/api/salesforce/authorizationUrl": {
      "get": {
        "tags": ["salesforce-controller"],
        "summary": "Retrieve the authorization URL to authenticate with Salesforce.",
        "operationId": "getAuthorizationUrlUsingGET_3",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "os_type",
          "in": "query",
          "description": "os_type",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.os_type": "method.request.querystring.os_type"
          },
          "type": "http",
          "uri": "/api/salesforce/authorizationUrl"
        }
      }
    },
    "/api/salesforce/redirect": {
      "get": {
        "tags": ["salesforce-controller"],
        "summary": "Retrieve the Salesforce redirect URL for web.",
        "operationId": "getWebRedirectUrlUsingGET_1",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "in": "body",
          "name": "redirectAttributes",
          "description": "redirectAttributes",
          "required": false,
          "schema": {
            "$ref": "#/definitions/RedirectAttributes"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelAndView"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/salesforce/redirect"
        }
      }
    },
    "/api/screen/autosync": {
      "post": {
        "tags": ["screen-controller"],
        "summary": "Automatically pre-sync to a receiving screen",
        "operationId": "autoSyncUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AutoSyncDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/screen/autosync"
        }
      }
    },
    "/api/screen/sync/{syncCode}": {
      "post": {
        "tags": ["screen-controller"],
        "summary": "Sync a mobile device to a receiving screen via sync code",
        "operationId": "syncScreenUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "syncCode",
          "in": "path",
          "description": "syncCode",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResultsDTO«ScreenWithSessionDTO»"
            }
          },
          "400": {
            "description": "Sync code does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/screen/sync/{syncCode}"
        }
      },
      "delete": {
        "tags": ["screen-controller"],
        "summary": "Disconnect a screen THAT YOU CONTROL via sync code",
        "operationId": "disconnectScreenUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "syncCode",
          "in": "path",
          "description": "syncCode",
          "required": true,
          "type": "string"
        }, {
          "name": "screen_id",
          "in": "query",
          "description": "screen_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResultsDTO«ScreenWithSessionDTO»"
            }
          },
          "400": {
            "description": "Sync code does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.screen_id": "method.request.querystring.screen_id"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/screen/sync/{syncCode}"
        }
      }
    },
    "/api/screen/{screenSessionId}": {
      "put": {
        "tags": ["screen-controller"],
        "summary": "Update screen's state for a specific asset",
        "operationId": "sendCommandUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "screenSessionId",
          "in": "path",
          "description": "screenSessionId",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "mobileCommandDTO",
          "description": "mobileCommandDTO",
          "required": true,
          "schema": {
            "$ref": "#/definitions/MobileCommandDTO"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScreenSessionLight"
            }
          },
          "400": {
            "description": "ScreenSession does not exist"
          },
          "409": {
            "description": "ScreenSession has expired"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "409": {
              "statusCode": "409"
            }
          },
          "uri": "/api/screen/{screenSessionId}"
        }
      }
    },
    "/api/screenSession": {
      "get": {
        "tags": ["screen-session-controller"],
        "summary": "Get screen sessions for the current user, sorted by date, descending.  Pageable",
        "operationId": "getScreenSessionsForCurrentUserUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "start_time",
          "in": "query",
          "description": "start_time",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "end_time",
          "in": "query",
          "description": "end_time",
          "required": false,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "include_assets",
          "in": "query",
          "description": "include_assets",
          "required": false,
          "type": "boolean",
          "default": false
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScreenSessionDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.include_assets": "method.request.querystring.include_assets",
            "integration.request.querystring.end_time": "method.request.querystring.end_time",
            "integration.request.querystring.start_time": "method.request.querystring.start_time"
          },
          "type": "http",
          "uri": "/api/screenSession"
        }
      }
    },
    "/api/screenSession/current": {
      "get": {
        "tags": ["screen-session-controller"],
        "summary": "Get the current user's screen session",
        "operationId": "getMyCurrentScreenSessionUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScreenSessionLight"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/screenSession/current"
        }
      }
    },
    "/api/screenSession/reap/0500c3743ffd11e391eace3f5508acd9": {
      "get": {
        "tags": ["screen-session-controller"],
        "summary": "reapScreensAndSessions",
        "operationId": "reapScreensAndSessionsUsingGET",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/screenSession/reap/0500c3743ffd11e391eace3f5508acd9"
        }
      },
      "post": {
        "tags": ["screen-session-controller"],
        "summary": "reapScreensAndSessions",
        "operationId": "reapScreensAndSessionsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/screenSession/reap/0500c3743ffd11e391eace3f5508acd9"
        }
      }
    },
    "/api/screenSession/{screenSessionId}": {
      "get": {
        "tags": ["screen-session-controller"],
        "summary": "Get a ScreenSession by id",
        "operationId": "getScreenSessionUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "screenSessionId",
          "in": "path",
          "description": "screenSessionId",
          "required": true,
          "type": "string"
        }, {
          "name": "include_assets",
          "in": "query",
          "description": "include_assets",
          "required": false,
          "type": "boolean",
          "default": false
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScreenSessionDTO"
            }
          },
          "400": {
            "description": "Screen session does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.include_assets": "method.request.querystring.include_assets"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/screenSession/{screenSessionId}"
        }
      },
      "put": {
        "tags": ["screen-session-controller"],
        "summary": "Update/Edit a ScreenSession by id",
        "operationId": "updateScreenSessionUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "screenSessionId",
          "in": "path",
          "description": "screenSessionId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScreenSessionDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.name": "method.request.querystring.name"
          },
          "type": "http",
          "uri": "/api/screenSession/{screenSessionId}"
        }
      },
      "delete": {
        "tags": ["screen-controller"],
        "summary": "Disconnect a screen session",
        "operationId": "disconnectSessionUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "screenSessionId",
          "in": "path",
          "description": "screenSessionId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResultsDTO«ScreenSession»"
            }
          },
          "400": {
            "description": "Screen session does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/screenSession/{screenSessionId}"
        }
      }
    },
    "/api/screenSession/{screenSessionId}/lock": {
      "put": {
        "tags": ["screen-session-controller"],
        "summary": "Update the lock on the screensession",
        "operationId": "setScreenSessionLockUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "screenSessionId",
          "in": "path",
          "description": "screenSessionId",
          "required": true,
          "type": "string"
        }, {
          "name": "locked",
          "in": "query",
          "description": "locked",
          "required": true,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScreenSessionStatus"
            }
          },
          "400": {
            "description": "Screen session does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.locked": "method.request.querystring.locked"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/screenSession/{screenSessionId}/lock"
        }
      }
    },
    "/api/screenSession/{screenSessionId}/screen/{screenId}": {
      "get": {
        "tags": ["screen-session-controller"],
        "summary": "Get a ScreenSession by screenSessionId and screenId",
        "operationId": "getScreenSessionFromScreenUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "screenSessionId",
          "in": "path",
          "description": "screenSessionId",
          "required": true,
          "type": "string"
        }, {
          "name": "screenId",
          "in": "path",
          "description": "screenId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScreenSession"
            }
          },
          "400": {
            "description": "Screen session does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/screenSession/{screenSessionId}/screen/{screenId}"
        }
      },
      "put": {
        "tags": ["screen-controller"],
        "summary": "Handler for attendee join request. The receiving screen uses to this send the attendeeName of attendee",
        "operationId": "handleSendAttendeeNameUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "screenId",
          "in": "path",
          "description": "screenId",
          "required": true,
          "type": "string"
        }, {
          "name": "screenSessionId",
          "in": "path",
          "description": "screenSessionId",
          "required": true,
          "type": "string"
        }, {
          "name": "attendeeName",
          "in": "query",
          "description": "attendeeName",
          "required": true,
          "type": "string"
        }, {
          "name": "isAutoReconnect",
          "in": "query",
          "description": "isAutoReconnect",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScreenDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.isAutoReconnect": "method.request.querystring.isAutoReconnect",
            "integration.request.querystring.attendeeName": "method.request.querystring.attendeeName"
          },
          "type": "http",
          "uri": "/api/screenSession/{screenSessionId}/screen/{screenId}"
        }
      },
      "delete": {
        "tags": ["screen-controller"],
        "summary": "Disconnect a screen from screensession using screenId. The kickout event",
        "operationId": "disconnectScreenFromScreenSessionUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "screenSessionId",
          "in": "path",
          "description": "screenSessionId",
          "required": true,
          "type": "string"
        }, {
          "name": "screenId",
          "in": "path",
          "description": "screenId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScreenWithSessionDTO"
            }
          },
          "400": {
            "description": "Screen not found with the provided information"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/screenSession/{screenSessionId}/screen/{screenId}"
        }
      }
    },
    "/api/screenSession/{screenSessionId}/screen/{screenId}/accept": {
      "put": {
        "tags": ["screen-controller"],
        "summary": "Handler for mobile device response for new attendee join request",
        "operationId": "handleAttendeeJoinRequestUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "screenSessionId",
          "in": "path",
          "description": "screenSessionId",
          "required": true,
          "type": "string"
        }, {
          "name": "screenId",
          "in": "path",
          "description": "screenId",
          "required": true,
          "type": "string"
        }, {
          "name": "accept",
          "in": "query",
          "description": "accept",
          "required": true,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Screen not found with the provided information"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.accept": "method.request.querystring.accept"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/screenSession/{screenSessionId}/screen/{screenId}/accept"
        }
      }
    },
    "/api/screenSession/{screenSessionId}/screen/{screenId}/status": {
      "get": {
        "tags": ["screen-controller"],
        "summary": "Use this endpoint to get the status for the specified screen.",
        "operationId": "getScreenStatusUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "screenId",
          "in": "path",
          "description": "screenId",
          "required": true,
          "type": "string"
        }, {
          "name": "screenSessionId",
          "in": "path",
          "description": "screenSessionId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScreenDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/screenSession/{screenSessionId}/screen/{screenId}/status"
        }
      }
    },
    "/api/screenSession/{screenSessionId}/screenCount": {
      "get": {
        "tags": ["screen-session-controller"],
        "summary": "Get the number of active Screens on a given ScreenSession. Return value: {\"count\":NUMBER_OF_ACTIVE_SCREENS}",
        "operationId": "getActiveScreensCountUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "screenSessionId",
          "in": "path",
          "description": "screenSessionId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "400": {
            "description": "Screen session does not exist or user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/screenSession/{screenSessionId}/screenCount"
        }
      }
    },
    "/api/screenSession/{screenSessionId}/status": {
      "get": {
        "tags": ["screen-session-controller"],
        "summary": "Get a ScreenSession's status by id",
        "operationId": "getScreenSessionStatusUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "screenSessionId",
          "in": "path",
          "description": "screenSessionId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScreenSessionStatus"
            }
          },
          "400": {
            "description": "Screen session does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/screenSession/{screenSessionId}/status"
        }
      }
    },
    "/api/screenTemplate": {
      "get": {
        "tags": ["rec-screen-template-controller"],
        "summary": "get a list of style receiving screen templates for the current user",
        "operationId": "getAllStyledScreensForUserUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "include_system_default",
          "in": "query",
          "description": "include_system_default",
          "required": false,
          "type": "boolean"
        }, {
          "name": "include_company_styles",
          "in": "query",
          "description": "include_company_styles",
          "required": false,
          "type": "boolean"
        }, {
          "name": "company_id",
          "in": "query",
          "description": "company_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/recScreenStyle"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.company_id": "method.request.querystring.company_id",
            "integration.request.querystring.include_system_default": "method.request.querystring.include_system_default",
            "integration.request.querystring.include_company_styles": "method.request.querystring.include_company_styles"
          },
          "type": "http",
          "uri": "/api/screenTemplate"
        }
      },
      "post": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Adds a new receiving screen template to the current user",
        "operationId": "createRecScreenStyleForUserUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "template_id",
          "in": "query",
          "description": "template_id",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }, {
          "name": "company_id",
          "in": "query",
          "description": "company_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/recScreenStyle"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.company_id": "method.request.querystring.company_id",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.template_id": "method.request.querystring.template_id"
          },
          "type": "http",
          "uri": "/api/screenTemplate"
        }
      }
    },
    "/api/screenTemplate/{recScreenStyleId}": {
      "get": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Get the specified recScreenStyle",
        "operationId": "getRecScreenStyleUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "recScreenStyleId",
          "in": "path",
          "description": "recScreenStyleId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/recScreenStyle"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/screenTemplate/{recScreenStyleId}"
        }
      },
      "put": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Edits an existing receiving screen template that belongs to the current user",
        "operationId": "editRecScreenStyleForUserUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "recScreenStyleId",
          "in": "path",
          "description": "recScreenStyleId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }, {
          "name": "company_id",
          "in": "query",
          "description": "company_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/recScreenStyle"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.company_id": "method.request.querystring.company_id",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.description": "method.request.querystring.description"
          },
          "type": "http",
          "uri": "/api/screenTemplate/{recScreenStyleId}"
        }
      },
      "delete": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Delete the specified branded recScreenStyle, if you own it",
        "operationId": "deleteRecScreenStyleUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "recScreenStyleId",
          "in": "path",
          "description": "recScreenStyleId",
          "required": true,
          "type": "string"
        }, {
          "name": "company_id",
          "in": "query",
          "description": "company_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.company_id": "method.request.querystring.company_id"
          },
          "type": "http",
          "uri": "/api/screenTemplate/{recScreenStyleId}"
        }
      }
    },
    "/api/screenTemplate/{recScreenStyleId}/activate": {
      "post": {
        "tags": ["rec-screen-template-controller"],
        "summary": "Set the specified receiving screen template to be the user's active one",
        "operationId": "setActiveRecScreenStyleForUserUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "recScreenStyleId",
          "in": "path",
          "description": "recScreenStyleId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/recScreenStyle"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/screenTemplate/{recScreenStyleId}/activate"
        }
      }
    },
    "/api/share/email": {
      "post": {
        "tags": ["mid-links-controller"],
        "summary": "Generates a new email share link.",
        "operationId": "generateEmailShareLinkUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "url",
          "in": "query",
          "description": "url",
          "required": true,
          "type": "string"
        }, {
          "name": "mco_app_id",
          "in": "query",
          "description": "mco_app_id",
          "required": true,
          "type": "string"
        }, {
          "name": "mco_app_pub_key",
          "in": "query",
          "description": "mco_app_pub_key",
          "required": true,
          "type": "string"
        }, {
          "name": "timestamp_utc",
          "in": "query",
          "description": "timestamp_utc",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "asset_id",
          "in": "query",
          "description": "asset_id",
          "required": false,
          "type": "string"
        }, {
          "name": "mco_asset_id",
          "in": "query",
          "description": "mco_asset_id",
          "required": false,
          "type": "string"
        }, {
          "name": "email_subject",
          "in": "query",
          "description": "email_subject",
          "required": false,
          "type": "string"
        }, {
          "name": "email_to",
          "in": "query",
          "description": "email_to",
          "required": false,
          "type": "string"
        }, {
          "name": "email_text",
          "in": "query",
          "description": "email_text",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.url": "method.request.querystring.url",
            "integration.request.querystring.email_to": "method.request.querystring.email_to",
            "integration.request.querystring.email_text": "method.request.querystring.email_text",
            "integration.request.querystring.mco_app_id": "method.request.querystring.mco_app_id",
            "integration.request.querystring.timestamp_utc": "method.request.querystring.timestamp_utc",
            "integration.request.querystring.email_subject": "method.request.querystring.email_subject",
            "integration.request.querystring.mco_asset_id": "method.request.querystring.mco_asset_id",
            "integration.request.querystring.asset_id": "method.request.querystring.asset_id",
            "integration.request.querystring.mco_app_pub_key": "method.request.querystring.mco_app_pub_key"
          },
          "type": "http",
          "uri": "/api/share/email"
        }
      }
    },
    "/api/share/facebook": {
      "post": {
        "tags": ["mid-links-controller"],
        "summary": "Generates a new facebook share link.",
        "operationId": "generateFacebookShareLinkUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "url",
          "in": "query",
          "description": "url",
          "required": true,
          "type": "string"
        }, {
          "name": "mco_app_id",
          "in": "query",
          "description": "mco_app_id",
          "required": true,
          "type": "string"
        }, {
          "name": "mco_app_pub_key",
          "in": "query",
          "description": "mco_app_pub_key",
          "required": true,
          "type": "string"
        }, {
          "name": "timestamp_utc",
          "in": "query",
          "description": "timestamp_utc",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "asset_id",
          "in": "query",
          "description": "asset_id",
          "required": false,
          "type": "string"
        }, {
          "name": "mco_asset_id",
          "in": "query",
          "description": "mco_asset_id",
          "required": false,
          "type": "string"
        }, {
          "name": "text",
          "in": "query",
          "description": "text",
          "required": false,
          "type": "string"
        }, {
          "name": "fb_redirect_uri",
          "in": "query",
          "description": "fb_redirect_uri",
          "required": false,
          "type": "string"
        }, {
          "name": "fb_app_id",
          "in": "query",
          "description": "fb_app_id",
          "required": false,
          "type": "string"
        }, {
          "name": "fb_method",
          "in": "query",
          "description": "fb_method",
          "required": false,
          "type": "string",
          "enum": ["SHARE", "FEED", "SEND"]
        }, {
          "name": "fb_display",
          "in": "query",
          "description": "fb_display",
          "required": false,
          "type": "string",
          "enum": ["PAGE", "IFRAME", "ASYNC", "POPUP", "TOUCH"]
        }, {
          "name": "fb_from",
          "in": "query",
          "description": "fb_from",
          "required": false,
          "type": "string"
        }, {
          "name": "fb_to",
          "in": "query",
          "description": "fb_to",
          "required": false,
          "type": "string"
        }, {
          "name": "fb_picture",
          "in": "query",
          "description": "fb_picture",
          "required": false,
          "type": "string"
        }, {
          "name": "fb_source",
          "in": "query",
          "description": "fb_source",
          "required": false,
          "type": "string"
        }, {
          "name": "fb_name",
          "in": "query",
          "description": "fb_name",
          "required": false,
          "type": "string"
        }, {
          "name": "fb_caption",
          "in": "query",
          "description": "fb_caption",
          "required": false,
          "type": "string"
        }, {
          "name": "fb_description",
          "in": "query",
          "description": "fb_description",
          "required": false,
          "type": "string"
        }, {
          "name": "fb_ref",
          "in": "query",
          "description": "fb_ref",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.fb_source": "method.request.querystring.fb_source",
            "integration.request.querystring.fb_app_id": "method.request.querystring.fb_app_id",
            "integration.request.querystring.fb_name": "method.request.querystring.fb_name",
            "integration.request.querystring.mco_asset_id": "method.request.querystring.mco_asset_id",
            "integration.request.querystring.fb_caption": "method.request.querystring.fb_caption",
            "integration.request.querystring.text": "method.request.querystring.text",
            "integration.request.querystring.fb_redirect_uri": "method.request.querystring.fb_redirect_uri",
            "integration.request.querystring.url": "method.request.querystring.url",
            "integration.request.querystring.fb_picture": "method.request.querystring.fb_picture",
            "integration.request.querystring.mco_app_id": "method.request.querystring.mco_app_id",
            "integration.request.querystring.timestamp_utc": "method.request.querystring.timestamp_utc",
            "integration.request.querystring.fb_to": "method.request.querystring.fb_to",
            "integration.request.querystring.fb_ref": "method.request.querystring.fb_ref",
            "integration.request.querystring.fb_description": "method.request.querystring.fb_description",
            "integration.request.querystring.asset_id": "method.request.querystring.asset_id",
            "integration.request.querystring.fb_from": "method.request.querystring.fb_from",
            "integration.request.querystring.mco_app_pub_key": "method.request.querystring.mco_app_pub_key",
            "integration.request.querystring.fb_display": "method.request.querystring.fb_display",
            "integration.request.querystring.fb_method": "method.request.querystring.fb_method"
          },
          "type": "http",
          "uri": "/api/share/facebook"
        }
      }
    },
    "/api/share/google": {
      "post": {
        "tags": ["mid-links-controller"],
        "summary": "Generates a new google share link.",
        "operationId": "generateGoogleShareLinkUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "url",
          "in": "query",
          "description": "url",
          "required": true,
          "type": "string"
        }, {
          "name": "mco_app_id",
          "in": "query",
          "description": "mco_app_id",
          "required": true,
          "type": "string"
        }, {
          "name": "mco_app_pub_key",
          "in": "query",
          "description": "mco_app_pub_key",
          "required": true,
          "type": "string"
        }, {
          "name": "timestamp_utc",
          "in": "query",
          "description": "timestamp_utc",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "asset_id",
          "in": "query",
          "description": "asset_id",
          "required": false,
          "type": "string"
        }, {
          "name": "mco_asset_id",
          "in": "query",
          "description": "mco_asset_id",
          "required": false,
          "type": "string"
        }, {
          "name": "title",
          "in": "query",
          "description": "title",
          "required": false,
          "type": "string"
        }, {
          "name": "image",
          "in": "query",
          "description": "image",
          "required": false,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.url": "method.request.querystring.url",
            "integration.request.querystring.mco_app_id": "method.request.querystring.mco_app_id",
            "integration.request.querystring.timestamp_utc": "method.request.querystring.timestamp_utc",
            "integration.request.querystring.title": "method.request.querystring.title",
            "integration.request.querystring.mco_asset_id": "method.request.querystring.mco_asset_id",
            "integration.request.querystring.asset_id": "method.request.querystring.asset_id",
            "integration.request.querystring.image": "method.request.querystring.image",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.mco_app_pub_key": "method.request.querystring.mco_app_pub_key"
          },
          "type": "http",
          "uri": "/api/share/google"
        }
      }
    },
    "/api/share/text": {
      "post": {
        "tags": ["mid-links-controller"],
        "summary": "Generates a new text share link.",
        "operationId": "generateTextShareLinkUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "url",
          "in": "query",
          "description": "url",
          "required": true,
          "type": "string"
        }, {
          "name": "mco_app_id",
          "in": "query",
          "description": "mco_app_id",
          "required": true,
          "type": "string"
        }, {
          "name": "mco_app_pub_key",
          "in": "query",
          "description": "mco_app_pub_key",
          "required": true,
          "type": "string"
        }, {
          "name": "timestamp_utc",
          "in": "query",
          "description": "timestamp_utc",
          "required": true,
          "type": "integer",
          "format": "int64"
        }, {
          "name": "asset_id",
          "in": "query",
          "description": "asset_id",
          "required": false,
          "type": "string"
        }, {
          "name": "mco_asset_id",
          "in": "query",
          "description": "mco_asset_id",
          "required": false,
          "type": "string"
        }, {
          "name": "text_content",
          "in": "query",
          "description": "text_content",
          "required": false,
          "type": "string"
        }, {
          "name": "text_recipient_numbers",
          "in": "query",
          "description": "text_recipient_numbers",
          "required": false,
          "type": "string"
        }, {
          "name": "text_recipient_names",
          "in": "query",
          "description": "text_recipient_names",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.url": "method.request.querystring.url",
            "integration.request.querystring.text_content": "method.request.querystring.text_content",
            "integration.request.querystring.mco_app_id": "method.request.querystring.mco_app_id",
            "integration.request.querystring.timestamp_utc": "method.request.querystring.timestamp_utc",
            "integration.request.querystring.mco_asset_id": "method.request.querystring.mco_asset_id",
            "integration.request.querystring.asset_id": "method.request.querystring.asset_id",
            "integration.request.querystring.text_recipient_numbers": "method.request.querystring.text_recipient_numbers",
            "integration.request.querystring.mco_app_pub_key": "method.request.querystring.mco_app_pub_key",
            "integration.request.querystring.text_recipient_names": "method.request.querystring.text_recipient_names"
          },
          "type": "http",
          "uri": "/api/share/text"
        }
      }
    },
    "/api/subscription/cancel": {
      "delete": {
        "tags": ["chargify-controller"],
        "summary": "Cancel the current user's product subscription",
        "operationId": "cancelUserSubscriptionUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/subscription/cancel"
        }
      }
    },
    "/api/subscription/coupon": {
      "post": {
        "tags": ["chargify-controller"],
        "summary": "Add a Coupon to user subscription",
        "operationId": "addCouponToUserSubscriptionUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/subscription/coupon"
        }
      }
    },
    "/api/subscription/reactivate": {
      "put": {
        "tags": ["chargify-controller"],
        "summary": "Reactivate current user's product subscription",
        "operationId": "reActivateUserSubscriptionUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/subscription/reactivate"
        }
      }
    },
    "/api/survey/response": {
      "post": {
        "tags": ["survey-controller"],
        "summary": "digestSurveyResponse",
        "operationId": "digestSurveyResponseUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "survey_id",
          "in": "query",
          "description": "survey_id",
          "required": true,
          "type": "string"
        }, {
          "name": "surveyor_id",
          "in": "query",
          "description": "surveyor_id",
          "required": true,
          "type": "string"
        }, {
          "name": "surveyor_type",
          "in": "query",
          "description": "surveyor_type",
          "required": true,
          "type": "string",
          "enum": ["EVENT", "SCREEN_SESSION"]
        }],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.surveyor_id": "method.request.querystring.surveyor_id",
            "integration.request.querystring.surveyor_type": "method.request.querystring.surveyor_type",
            "integration.request.querystring.survey_id": "method.request.querystring.survey_id"
          },
          "type": "http",
          "uri": "/api/survey/response"
        }
      }
    },
    "/api/survey/surveygizmo/{surveyGizmoId}": {
      "post": {
        "tags": ["survey-controller"],
        "summary": "addSurveyViaSurveyGizmo",
        "operationId": "addSurveyViaSurveyGizmoUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "surveyGizmoId",
          "in": "path",
          "description": "surveyGizmoId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/survey/surveygizmo/{surveyGizmoId}"
        }
      }
    },
    "/api/survey/test": {
      "get": {
        "tags": ["survey-controller"],
        "summary": "displaySurveyTest",
        "operationId": "displaySurveyTestUsingGET",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "in": "body",
          "name": "model",
          "description": "model",
          "required": false,
          "schema": {
            "$ref": "#/definitions/Model"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/survey/test"
        }
      }
    },
    "/api/survey/{surveyId}": {
      "get": {
        "tags": ["survey-controller"],
        "summary": "getSurvey",
        "operationId": "getSurveyUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "surveyId",
          "in": "path",
          "description": "surveyId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/survey/{surveyId}"
        }
      },
      "delete": {
        "tags": ["survey-controller"],
        "summary": "deleteSurvey",
        "operationId": "deleteSurveyUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "surveyId",
          "in": "path",
          "description": "surveyId",
          "required": true,
          "type": "string"
        }, {
          "name": "force_delete",
          "in": "query",
          "description": "force_delete",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.force_delete": "method.request.querystring.force_delete"
          },
          "type": "http",
          "uri": "/api/survey/{surveyId}"
        }
      }
    },
    "/api/systemConfig": {
      "get": {
        "tags": ["settings-controller"],
        "summary": "Retrieve the SystemConfig object",
        "operationId": "findSystemConfigUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemConfig"
            }
          },
          "403": {
            "description": "Current user is not admin"
          },
          "409": {
            "description": "Illegal database state: more than one SystemConfig objects exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "409": {
              "statusCode": "409"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/systemConfig"
        }
      },
      "put": {
        "tags": ["settings-controller"],
        "summary": "Add attribute(s) to SystemConfig object",
        "operationId": "editSystemConfigUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemConfig"
            }
          },
          "403": {
            "description": "Current user is not admin"
          },
          "409": {
            "description": "Illegal database state: more than one SystemConfig objects exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "409": {
              "statusCode": "409"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/systemConfig"
        }
      }
    },
    "/api/twilio/call": {
      "post": {
        "tags": ["twilio-controller"],
        "summary": "Calls a person at the specified phone number via Twilio",
        "operationId": "makeCallUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "phone_number",
          "in": "query",
          "description": "phone_number",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.phone_number": "method.request.querystring.phone_number"
          },
          "type": "http",
          "uri": "/api/twilio/call"
        }
      }
    },
    "/api/twilio/callback": {
      "get": {
        "tags": ["twilio-controller"],
        "summary": "callbackXML",
        "operationId": "callbackXMLUsingGET",
        "consumes": ["application/json"],
        "produces": ["text/xml;charset=UTF-8"],
        "parameters": [{
          "name": "number",
          "in": "query",
          "description": "number",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.number": "method.request.querystring.number"
          },
          "type": "http",
          "uri": "/api/twilio/callback"
        }
      },
      "post": {
        "tags": ["twilio-controller"],
        "summary": "callbackXML",
        "operationId": "callbackXMLUsingPOST",
        "consumes": ["application/json"],
        "produces": ["text/xml;charset=UTF-8"],
        "parameters": [{
          "name": "number",
          "in": "query",
          "description": "number",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.number": "method.request.querystring.number"
          },
          "type": "http",
          "uri": "/api/twilio/callback"
        }
      }
    },
    "/api/twitter/image": {
      "get": {
        "tags": ["twitter-controller"],
        "summary": "Retrieves current user's Twitter photos",
        "operationId": "getImagesUsingGET_4",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetMinimalDTO"
              }
            }
          },
          "400": {
            "description": "Twitter access token for user is invalid"
          },
          "403": {
            "description": "Current user's Twitter profile is not linked"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/twitter/image"
        }
      }
    },
    "/api/twitter/link": {
      "post": {
        "tags": ["twitter-controller"],
        "summary": "Link Twitter account",
        "operationId": "linkTwitterAccountUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "access_token",
          "in": "query",
          "description": "access_token",
          "required": true,
          "type": "string"
        }, {
          "name": "access_token_secret",
          "in": "query",
          "description": "access_token_secret",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResultsDTO«UserLightDTO»"
            }
          },
          "400": {
            "description": "No access token provided"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.access_token_secret": "method.request.querystring.access_token_secret",
            "integration.request.querystring.access_token": "method.request.querystring.access_token"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/twitter/link"
        }
      },
      "delete": {
        "tags": ["twitter-controller"],
        "summary": "Unlink Twitter account",
        "operationId": "unlinkTwitterAccountUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResultsDTO«UserLightDTO»"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/twitter/link"
        }
      }
    },
    "/api/twitter/timeline": {
      "get": {
        "tags": ["twitter-controller"],
        "summary": "Retrieves current user's Twitter timeline photos",
        "operationId": "getTimelineImagesUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetMinimalDTO"
              }
            }
          },
          "400": {
            "description": "Twitter access token for user is invalid"
          },
          "403": {
            "description": "Current user's Twitter profile is not linked"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/twitter/timeline"
        }
      }
    },
    "/api/upload": {
      "post": {
        "tags": ["file-upload-controller"],
        "summary": "Upload a (compatible) file to your file library.",
        "operationId": "handleFormUploadUsingPOST",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "file",
          "in": "formData",
          "description": "file",
          "required": true,
          "type": "file"
        }, {
          "name": "group_id",
          "in": "query",
          "description": "group_id",
          "required": false,
          "type": "string"
        }, {
          "name": "folder_id",
          "in": "query",
          "description": "folder_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssetMinimalDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.file": "method.request.querystring.file",
            "integration.request.querystring.folder_id": "method.request.querystring.folder_id",
            "integration.request.querystring.group_id": "method.request.querystring.group_id"
          },
          "type": "http",
          "uri": "/api/upload"
        }
      }
    },
    "/api/upload/fileURL": {
      "post": {
        "tags": ["file-upload-controller"],
        "summary": "Upload a file from a web URL to your file library.",
        "operationId": "handleFileUploadWithURLUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "fileURL",
          "in": "query",
          "description": "fileURL",
          "required": true,
          "type": "string"
        }, {
          "name": "fileName",
          "in": "query",
          "description": "fileName",
          "required": false,
          "type": "string"
        }, {
          "name": "group_id",
          "in": "query",
          "description": "group_id",
          "required": false,
          "type": "string"
        }, {
          "name": "folder_id",
          "in": "query",
          "description": "folder_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssetMinimalDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.fileName": "method.request.querystring.fileName",
            "integration.request.querystring.folder_id": "method.request.querystring.folder_id",
            "integration.request.querystring.group_id": "method.request.querystring.group_id",
            "integration.request.querystring.fileURL": "method.request.querystring.fileURL"
          },
          "type": "http",
          "uri": "/api/upload/fileURL"
        }
      }
    },
    "/api/upload/iframeTransport": {
      "post": {
        "tags": ["file-upload-controller"],
        "summary": "Upload a file from a browser using the iframe transport method. This requires that theresponse be wrapped in HTML and utilizes a JSP that sets values in the iframe's parent.",
        "operationId": "handleFileUploadWithIframeTransportUsingPOST",
        "consumes": ["multipart/form-data"],
        "produces": ["text/html"],
        "parameters": [{
          "name": "file",
          "in": "formData",
          "description": "file",
          "required": false,
          "type": "file"
        }, {
          "name": "group_id",
          "in": "query",
          "description": "group_id",
          "required": false,
          "type": "string"
        }, {
          "name": "folder_id",
          "in": "query",
          "description": "folder_id",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelAndView"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.file": "method.request.querystring.file",
            "integration.request.querystring.folder_id": "method.request.querystring.folder_id",
            "integration.request.querystring.group_id": "method.request.querystring.group_id"
          },
          "type": "http",
          "uri": "/api/upload/iframeTransport"
        }
      }
    },
    "/api/upload/image": {
      "post": {
        "tags": ["file-upload-controller"],
        "summary": "Upload an image of a supported type to cloud storage.",
        "operationId": "uploadImageUsingPOST",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "image_file",
          "in": "formData",
          "description": "image_file",
          "required": true,
          "type": "file"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": false,
          "type": "string"
        }, {
          "name": "description",
          "in": "query",
          "description": "description",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.description": "method.request.querystring.description",
            "integration.request.querystring.image_file": "method.request.querystring.image_file"
          },
          "type": "http",
          "uri": "/api/upload/image"
        }
      }
    },
    "/api/upload/thumbnail": {
      "post": {
        "tags": ["file-upload-controller"],
        "summary": "Upload an image of type (JPG, PNG, GIF) to cloud storage. Returns an Image object.",
        "operationId": "uploadThumbnailImageUsingPOST",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "thumbnail_file",
          "in": "formData",
          "description": "thumbnail_file",
          "required": true,
          "type": "file"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.thumbnail_file": "method.request.querystring.thumbnail_file"
          },
          "type": "http",
          "uri": "/api/upload/thumbnail"
        }
      }
    },
    "/api/upload/{assetId}/retry": {
      "post": {
        "tags": ["file-upload-controller"],
        "summary": "Retry conversion on an asset that failed to convert properly.",
        "operationId": "retryUploadUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "assetId",
          "in": "path",
          "description": "assetId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssetMinimalDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/upload/{assetId}/retry"
        }
      }
    },
    "/api/user": {
      "get": {
        "tags": ["user-controller"],
        "summary": "Retrieves all users",
        "operationId": "getUsersUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserWithActiveCompanyDTO"
              }
            }
          },
          "403": {
            "description": "Current user is not admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/user"
        }
      },
      "post": {
        "tags": ["user-controller"],
        "summary": "Create a new user",
        "operationId": "createUserUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "first_name",
          "in": "query",
          "description": "first_name",
          "required": true,
          "type": "string"
        }, {
          "name": "last_name",
          "in": "query",
          "description": "last_name",
          "required": true,
          "type": "string"
        }, {
          "name": "title",
          "in": "query",
          "description": "title",
          "required": false,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }, {
          "name": "password",
          "in": "query",
          "description": "password",
          "required": false,
          "type": "string"
        }, {
          "name": "pass_hash",
          "in": "query",
          "description": "pass_hash",
          "required": false,
          "type": "string"
        }, {
          "name": "is_system_admin",
          "in": "query",
          "description": "is_system_admin",
          "required": false,
          "type": "boolean"
        }, {
          "name": "company_ids",
          "in": "query",
          "description": "company_ids",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "is_company_admin",
          "in": "query",
          "description": "is_company_admin",
          "required": false,
          "type": "boolean"
        }, {
          "name": "group_ids",
          "in": "query",
          "description": "group_ids",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          },
          "400": {
            "description": "Email address is empty or invalid"
          },
          "403": {
            "description": "Current user is not system admin and trying to perform sys-admin-only action"
          },
          "405": {
            "description": "Group belongs to company, so user should be added to company rather than directly to the group"
          },
          "409": {
            "description": "Email address is already in use by another user"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.company_ids": "method.request.querystring.company_ids",
            "integration.request.querystring.password": "method.request.querystring.password",
            "integration.request.querystring.email": "method.request.querystring.email",
            "integration.request.querystring.is_system_admin": "method.request.querystring.is_system_admin",
            "integration.request.querystring.first_name": "method.request.querystring.first_name",
            "integration.request.querystring.title": "method.request.querystring.title",
            "integration.request.querystring.group_ids": "method.request.querystring.group_ids",
            "integration.request.querystring.pass_hash": "method.request.querystring.pass_hash",
            "integration.request.querystring.is_company_admin": "method.request.querystring.is_company_admin",
            "integration.request.querystring.last_name": "method.request.querystring.last_name"
          },
          "responses": {
            "405": {
              "statusCode": "405"
            },
            "400": {
              "statusCode": "400"
            },
            "409": {
              "statusCode": "409"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/user"
        }
      },
      "put": {
        "tags": ["user-controller"],
        "summary": "Edit current user",
        "operationId": "editCurrentUserUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "first_name",
          "in": "query",
          "description": "first_name",
          "required": false,
          "type": "string"
        }, {
          "name": "last_name",
          "in": "query",
          "description": "last_name",
          "required": false,
          "type": "string"
        }, {
          "name": "title",
          "in": "query",
          "description": "title",
          "required": false,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          },
          "400": {
            "description": "Email address is empty or invalid"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email",
            "integration.request.querystring.first_name": "method.request.querystring.first_name",
            "integration.request.querystring.title": "method.request.querystring.title",
            "integration.request.querystring.last_name": "method.request.querystring.last_name"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/user"
        }
      }
    },
    "/api/user/billingInfo": {
      "get": {
        "tags": ["user-controller"],
        "summary": "Retrieve the current user's billing information.",
        "operationId": "getCurrentUserBillingInformationUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BillingInformationDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/billingInfo"
        }
      }
    },
    "/api/user/company/{companyId}": {
      "get": {
        "tags": ["user-controller"],
        "summary": "Retrieves all the users in the given company.  Results are pageable.",
        "operationId": "getCompanyUsersUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "additional_company_ids",
          "in": "query",
          "description": "additional_company_ids",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "user_ids",
          "in": "query",
          "description": "user_ids",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserWithActiveCompanyDTO"
              }
            }
          },
          "400": {
            "description": "Company does not exist or current user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.user_ids": "method.request.querystring.user_ids",
            "integration.request.querystring.additional_company_ids": "method.request.querystring.additional_company_ids"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/user/company/{companyId}"
        }
      }
    },
    "/api/user/company/{companyId}/count": {
      "get": {
        "tags": ["user-controller"],
        "summary": "Retrieves all the users in the given company.  Results are pageable.",
        "operationId": "countCompanyUsersUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "additional_company_ids",
          "in": "query",
          "description": "additional_company_ids",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "user_ids",
          "in": "query",
          "description": "user_ids",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleCountResultDTO"
            }
          },
          "400": {
            "description": "Company does not exist or current user does not have permission"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.user_ids": "method.request.querystring.user_ids",
            "integration.request.querystring.additional_company_ids": "method.request.querystring.additional_company_ids"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/user/company/{companyId}/count"
        }
      }
    },
    "/api/user/email": {
      "get": {
        "tags": ["user-controller"],
        "summary": "Retrieves a user by email.",
        "operationId": "getUserByEmailUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          },
          "400": {
            "description": "User does not exist."
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/user/email"
        }
      }
    },
    "/api/user/favorite": {
      "post": {
        "tags": ["favorite-controller"],
        "summary": "Add a new favorite item to user",
        "operationId": "createFavoriteForUserUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "item_id",
          "in": "query",
          "description": "item_id",
          "required": true,
          "type": "string"
        }, {
          "name": "type",
          "in": "query",
          "description": "type",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Favorite"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.type": "method.request.querystring.type",
            "integration.request.querystring.item_id": "method.request.querystring.item_id"
          },
          "type": "http",
          "uri": "/api/user/favorite"
        }
      }
    },
    "/api/user/favorite/item/{itemId}": {
      "delete": {
        "tags": ["favorite-controller"],
        "summary": "Delete a favorite by its item ID",
        "operationId": "deleteFavoriteForUserByItemIdUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "itemId",
          "in": "path",
          "description": "itemId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/favorite/item/{itemId}"
        }
      }
    },
    "/api/user/favorite/{favoriteId}": {
      "get": {
        "tags": ["favorite-controller"],
        "summary": "Get a favorite by ID",
        "operationId": "getFavoriteForUserUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "favoriteId",
          "in": "path",
          "description": "favoriteId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Favorite"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/favorite/{favoriteId}"
        }
      },
      "delete": {
        "tags": ["favorite-controller"],
        "summary": "Delete a favorite by ID",
        "operationId": "deleteFavoriteForUserUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "favoriteId",
          "in": "path",
          "description": "favoriteId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/favorite/{favoriteId}"
        }
      }
    },
    "/api/user/favorites": {
      "get": {
        "tags": ["favorite-controller"],
        "summary": "Get all favorites for user",
        "operationId": "getAllFavoritesForUserUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Favorite"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/favorites"
        }
      },
      "post": {
        "tags": ["favorite-controller"],
        "summary": "Create favorites for the itemIds by type and set them as the current user'sfavorites",
        "operationId": "setFavoritesForUserUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "in": "body",
          "name": "favoriteDTOs",
          "description": "favoriteDTOs",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FavoriteDTO"
            }
          }
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/favorites"
        }
      }
    },
    "/api/user/folder": {
      "post": {
        "tags": ["folder-controller"],
        "summary": "Create a new folder in the current user's file library.",
        "operationId": "createFolderUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "parent_folder_id",
          "in": "query",
          "description": "parent_folder_id",
          "required": false,
          "type": "string"
        }, {
          "name": "flag",
          "in": "query",
          "description": "flag",
          "required": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          },
          "collectionFormat": "multi",
          "enum": ["VPN", "INTERNAL_USE_ONLY"]
        }, {
          "name": "flags_length",
          "in": "query",
          "description": "flags_length",
          "required": false,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "Parent folder does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.flag": "method.request.querystring.flag",
            "integration.request.querystring.parent_folder_id": "method.request.querystring.parent_folder_id",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.flags_length": "method.request.querystring.flags_length"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/user/folder"
        }
      }
    },
    "/api/user/folder/dropbox": {
      "get": {
        "tags": ["folder-controller"],
        "summary": "Retrieves the Dropbox repository folder for the current user.",
        "operationId": "getUserDropboxFolderUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FolderContentDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/folder/dropbox"
        }
      }
    },
    "/api/user/folder/portal": {
      "get": {
        "tags": ["folder-controller"],
        "summary": "Retrieves the portal upload folder for the current user.",
        "operationId": "getUserPortalUploadFolderUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FolderContentDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/folder/portal"
        }
      }
    },
    "/api/user/folder/upload": {
      "get": {
        "tags": ["folder-controller"],
        "summary": "Retrieves the portal upload folder for the current user.",
        "operationId": "getUserPortalUploadFolderUsingGET_1",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FolderContentDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/folder/portal"
        }
      }
    },
    "/api/user/folder/youtube": {
      "get": {
        "tags": ["folder-controller"],
        "summary": "Retrieves the YouTube repository folder for the current user.",
        "operationId": "getUserYouTubeFolderUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FolderContentDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/folder/youtube"
        }
      }
    },
    "/api/user/folder/{folderId}": {
      "get": {
        "tags": ["folder-controller"],
        "summary": "Get a user folder by ID.",
        "operationId": "getUserFolderUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/folder/{folderId}"
        }
      },
      "put": {
        "tags": ["folder-controller"],
        "summary": "Edit the name of the given folder in the current user's file library.",
        "operationId": "editFolderUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "thumbnail_url",
          "in": "query",
          "description": "thumbnail_url",
          "required": false,
          "type": "string"
        }, {
          "name": "image_id",
          "in": "query",
          "description": "image_id",
          "required": false,
          "type": "string"
        }, {
          "name": "subtitle",
          "in": "query",
          "description": "subtitle",
          "required": false,
          "type": "string"
        }, {
          "name": "flag",
          "in": "query",
          "description": "flag",
          "required": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          },
          "collectionFormat": "multi",
          "enum": ["VPN", "INTERNAL_USE_ONLY"]
        }, {
          "name": "flags_length",
          "in": "query",
          "description": "flags_length",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "visibility",
          "in": "query",
          "description": "visibility",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "Folder does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.flag": "method.request.querystring.flag",
            "integration.request.querystring.thumbnail_url": "method.request.querystring.thumbnail_url",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.flags_length": "method.request.querystring.flags_length",
            "integration.request.querystring.subtitle": "method.request.querystring.subtitle",
            "integration.request.querystring.visibility": "method.request.querystring.visibility",
            "integration.request.querystring.image_id": "method.request.querystring.image_id"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/user/folder/{folderId}"
        }
      },
      "delete": {
        "tags": ["folder-controller"],
        "summary": "Deletes the given folder from the current user's file library.",
        "operationId": "deleteFolderUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Folder does not exist"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/user/folder/{folderId}"
        }
      }
    },
    "/api/user/folders": {
      "get": {
        "tags": ["folder-controller"],
        "summary": "Returns the root of the directory (folder) structure for the current user.",
        "operationId": "getFoldersUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FolderDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/folders"
        }
      }
    },
    "/api/user/groupSequence": {
      "get": {
        "tags": ["hpsn-content-controller"],
        "summary": "Retrieve a list of group ids that the user has selected to be displayed",
        "operationId": "retrieveUsersGroupSequenceUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupDTO"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/groupSequence"
        }
      },
      "post": {
        "tags": ["hpsn-content-controller"],
        "summary": "Set the list of group ",
        "operationId": "setGroupDisplaySequenceUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "group_ids",
          "in": "query",
          "description": "A comma-separated list of groupIds",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.group_ids": "method.request.querystring.group_ids"
          },
          "type": "http",
          "uri": "/api/user/groupSequence"
        }
      },
      "delete": {
        "tags": ["hpsn-content-controller"],
        "summary": "Delete the list of groupIds that the current user has selected to be displayed",
        "operationId": "deleteUsersGroupSequenceUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "400": {
            "description": "Unable to delete user group sequence"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/user/groupSequence"
        }
      }
    },
    "/api/user/groupSequence/{folderId}": {
      "post": {
        "tags": ["hpsn-content-controller"],
        "summary": "Adds a folder to the user's display sequence.  Returns an array of folderIds.",
        "operationId": "addFolderToDisplaySequenceUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Collection«string»"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/groupSequence/{folderId}"
        }
      },
      "put": {
        "tags": ["hpsn-content-controller"],
        "summary": "Adds a folder to the user's display sequence.  Returns an array of folderIds.",
        "operationId": "addFolderToDisplaySequenceUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Collection«string»"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/groupSequence/{folderId}"
        }
      },
      "delete": {
        "tags": ["hpsn-content-controller"],
        "summary": "Removes a group from the user's display sequence.  Returns an array of groupIds",
        "operationId": "removeGroupFromDisplaySequenceUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Collection«string»"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/groupSequence/{folderId}"
        }
      }
    },
    "/api/user/linkSignUp": {
      "post": {
        "tags": ["user-controller"],
        "summary": "createUserFromSignUpLink",
        "operationId": "createUserFromSignUpLinkUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "link_code",
          "in": "query",
          "description": "link_code",
          "required": true,
          "type": "string"
        }, {
          "name": "first_name",
          "in": "query",
          "description": "first_name",
          "required": true,
          "type": "string"
        }, {
          "name": "last_name",
          "in": "query",
          "description": "last_name",
          "required": true,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }, {
          "name": "password",
          "in": "query",
          "description": "password",
          "required": true,
          "type": "string"
        }, {
          "name": "company_id",
          "in": "query",
          "description": "company_id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.password": "method.request.querystring.password",
            "integration.request.querystring.email": "method.request.querystring.email",
            "integration.request.querystring.company_id": "method.request.querystring.company_id",
            "integration.request.querystring.first_name": "method.request.querystring.first_name",
            "integration.request.querystring.link_code": "method.request.querystring.link_code",
            "integration.request.querystring.last_name": "method.request.querystring.last_name"
          },
          "type": "http",
          "uri": "/api/user/linkSignUp"
        }
      }
    },
    "/api/user/logout": {
      "post": {
        "tags": ["authentication-controller"],
        "summary": "Logout the current user",
        "operationId": "logoutCurrentUserUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogoutResponseBody"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/logout"
        }
      }
    },
    "/api/user/me": {
      "get": {
        "tags": ["user-controller"],
        "summary": "Retrieve the current user",
        "operationId": "findCurrentUserUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/me"
        }
      }
    },
    "/api/user/password": {
      "put": {
        "tags": ["user-controller"],
        "summary": "Change the current user's password",
        "operationId": "changeCurrentUserPasswordUsingPUT",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "original_password",
          "in": "query",
          "description": "original_password",
          "required": false,
          "type": "string"
        }, {
          "name": "original_pass_hash",
          "in": "query",
          "description": "original_pass_hash",
          "required": false,
          "type": "string"
        }, {
          "name": "new_password",
          "in": "query",
          "description": "new_password",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "New hashed password is invalid (empty)"
          },
          "204": {
            "description": "No Content"
          },
          "409": {
            "description": "Original hashed password is incorrect"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.new_password": "method.request.querystring.new_password",
            "integration.request.querystring.original_password": "method.request.querystring.original_password",
            "integration.request.querystring.original_pass_hash": "method.request.querystring.original_pass_hash"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "409": {
              "statusCode": "409"
            }
          },
          "type": "http",
          "uri": "/api/user/password"
        }
      }
    },
    "/api/user/permissions": {
      "get": {
        "tags": ["user-controller"],
        "summary": "Retrieve the current user's aggregated permissions",
        "operationId": "getCurrentUserAggregatePermissionsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["PORTAL_LOGIN", "PORTAL_UPLOAD", "UPLOAD_APPROVER"]
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/permissions"
        }
      }
    },
    "/api/user/portal/logout": {
      "post": {
        "tags": ["authentication-controller"],
        "summary": "Logout the current user from the web portal.  This will NOT result in screens or events being disconnected or terminated.",
        "operationId": "logoutCurrentUserFromWebPortalUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogoutResponseBody"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/user/portal/logout"
        }
      }
    },
    "/api/user/resendVerification": {
      "post": {
        "tags": ["user-controller"],
        "summary": "Re-send the validation email",
        "operationId": "resendVerificationEmailUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email"
          },
          "type": "http",
          "uri": "/api/user/resendVerification"
        }
      }
    },
    "/api/user/reset": {
      "post": {
        "tags": ["user-controller"],
        "summary": "Request to initiate the password reset process",
        "operationId": "requestInitiatePasswordResetUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "User does not exist"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/user/reset"
        }
      }
    },
    "/api/user/sendAppLink": {
      "post": {
        "tags": ["user-portal-controller"],
        "summary": "sendAppLink",
        "operationId": "sendAppLinkUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SimpleMessageResultDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email"
          },
          "type": "http",
          "uri": "/api/user/sendAppLink"
        }
      }
    },
    "/api/user/signup": {
      "post": {
        "tags": ["user-controller"],
        "summary": "Sign up for a new account. If a company name is provided, that company will be createdand the new user added to it.",
        "operationId": "performUserRegistrationUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "first_name",
          "in": "query",
          "description": "first_name",
          "required": true,
          "type": "string"
        }, {
          "name": "last_name",
          "in": "query",
          "description": "last_name",
          "required": true,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }, {
          "name": "encrypted_password",
          "in": "query",
          "description": "encrypted_password",
          "required": true,
          "type": "string"
        }, {
          "name": "company_name",
          "in": "query",
          "description": "company_name",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Email address is empty or invalid"
          },
          "409": {
            "description": "Email address is already in use by another user"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.encrypted_password": "method.request.querystring.encrypted_password",
            "integration.request.querystring.email": "method.request.querystring.email",
            "integration.request.querystring.first_name": "method.request.querystring.first_name",
            "integration.request.querystring.company_name": "method.request.querystring.company_name",
            "integration.request.querystring.last_name": "method.request.querystring.last_name"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "409": {
              "statusCode": "409"
            }
          },
          "type": "http",
          "uri": "/api/user/signup"
        }
      }
    },
    "/api/user/{userId}": {
      "get": {
        "tags": ["user-controller"],
        "summary": "Retrieve a user by id",
        "operationId": "findUserUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          },
          "400": {
            "description": "User does not exist"
          },
          "403": {
            "description": "Current user is not admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "uri": "/api/user/{userId}"
        }
      },
      "put": {
        "tags": ["user-controller"],
        "summary": "Edit the specified user",
        "operationId": "editUserUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }, {
          "name": "first_name",
          "in": "query",
          "description": "first_name",
          "required": false,
          "type": "string"
        }, {
          "name": "last_name",
          "in": "query",
          "description": "last_name",
          "required": false,
          "type": "string"
        }, {
          "name": "title",
          "in": "query",
          "description": "title",
          "required": false,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": false,
          "type": "string"
        }, {
          "name": "is_admin",
          "in": "query",
          "description": "is_admin",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserWithActiveCompanyDTO"
            }
          },
          "400": {
            "description": "User id does not exist"
          },
          "403": {
            "description": "Current user is not admin"
          },
          "409": {
            "description": "Email address is already in use by another user"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.is_admin": "method.request.querystring.is_admin",
            "integration.request.querystring.email": "method.request.querystring.email",
            "integration.request.querystring.first_name": "method.request.querystring.first_name",
            "integration.request.querystring.title": "method.request.querystring.title",
            "integration.request.querystring.last_name": "method.request.querystring.last_name"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "409": {
              "statusCode": "409"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/user/{userId}"
        }
      },
      "delete": {
        "tags": ["user-controller"],
        "summary": "Delete a user",
        "operationId": "deleteUserUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }, {
          "name": "force_delete",
          "in": "query",
          "description": "force_delete",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "400": {
            "description": "User does not exist"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Current user is not admin"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.force_delete": "method.request.querystring.force_delete"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            },
            "403": {
              "statusCode": "403"
            }
          },
          "type": "http",
          "uri": "/api/user/{userId}"
        }
      }
    },
    "/api/user/{userId}/folder": {
      "post": {
        "tags": ["folder-controller"],
        "summary": "Create a new folder in the given user's file library.",
        "operationId": "createUserFolderUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "parent_folder_id",
          "in": "query",
          "description": "parent_folder_id",
          "required": false,
          "type": "string"
        }, {
          "name": "flag",
          "in": "query",
          "description": "flag",
          "required": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          },
          "collectionFormat": "multi",
          "enum": ["VPN", "INTERNAL_USE_ONLY"]
        }, {
          "name": "flags_length",
          "in": "query",
          "description": "flags_length",
          "required": false,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "Parent folder does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.flag": "method.request.querystring.flag",
            "integration.request.querystring.parent_folder_id": "method.request.querystring.parent_folder_id",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.flags_length": "method.request.querystring.flags_length"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/user/{userId}/folder"
        }
      }
    },
    "/api/user/{userId}/folder/{folderId}": {
      "put": {
        "tags": ["folder-controller"],
        "summary": "Edit the name of the given folder in the given user's file library.",
        "operationId": "editUserFolderUsingPUT",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }, {
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "name",
          "required": true,
          "type": "string"
        }, {
          "name": "thumbnail_url",
          "in": "query",
          "description": "thumbnail_url",
          "required": false,
          "type": "string"
        }, {
          "name": "image_id",
          "in": "query",
          "description": "image_id",
          "required": false,
          "type": "string"
        }, {
          "name": "subtitle",
          "in": "query",
          "description": "subtitle",
          "required": false,
          "type": "string"
        }, {
          "name": "flag",
          "in": "query",
          "description": "flag",
          "required": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          },
          "collectionFormat": "multi",
          "enum": ["VPN", "INTERNAL_USE_ONLY"]
        }, {
          "name": "flags_length",
          "in": "query",
          "description": "flags_length",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "shouldMakePublic",
          "in": "query",
          "description": "shouldMakePublic",
          "required": true,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "Folder does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.flag": "method.request.querystring.flag",
            "integration.request.querystring.shouldMakePublic": "method.request.querystring.shouldMakePublic",
            "integration.request.querystring.thumbnail_url": "method.request.querystring.thumbnail_url",
            "integration.request.querystring.name": "method.request.querystring.name",
            "integration.request.querystring.flags_length": "method.request.querystring.flags_length",
            "integration.request.querystring.subtitle": "method.request.querystring.subtitle",
            "integration.request.querystring.image_id": "method.request.querystring.image_id"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api/user/{userId}/folder/{folderId}"
        }
      },
      "delete": {
        "tags": ["folder-controller"],
        "summary": "Deletes the given folder from the given user's file library.",
        "operationId": "deleteUserFolderUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }, {
          "name": "folderId",
          "in": "path",
          "description": "folderId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "400": {
            "description": "Folder does not exist"
          },
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/user/{userId}/folder/{folderId}"
        }
      }
    },
    "/api/user/{userId}/folders": {
      "get": {
        "tags": ["folder-controller"],
        "summary": "Returns the root of the directory (folder) structure for the given user.",
        "operationId": "getUserFoldersUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FolderDTO"
            }
          },
          "400": {
            "description": "User does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "uri": "/api/user/{userId}/folders"
        }
      }
    },
    "/api/user/{userId}/permissions": {
      "post": {
        "tags": ["user-controller"],
        "summary": "Adds the specified permissions to the user.",
        "operationId": "addPermissionsToUserUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }, {
          "name": "perms",
          "in": "query",
          "description": "perms",
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.perms": "method.request.querystring.perms"
          },
          "type": "http",
          "uri": "/api/user/{userId}/permissions"
        }
      },
      "delete": {
        "tags": ["user-controller"],
        "summary": "Removes the specified permissions from the user.",
        "operationId": "removePermissionsFromUserUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "userId",
          "in": "path",
          "description": "userId",
          "required": true,
          "type": "string"
        }, {
          "name": "perms",
          "in": "query",
          "description": "perms",
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.perms": "method.request.querystring.perms"
          },
          "type": "http",
          "uri": "/api/user/{userId}/permissions"
        }
      }
    },
    "/api/version": {
      "post": {
        "tags": ["application-version-controller"],
        "summary": "Create a new version for a platform and product with a status and message.",
        "operationId": "createVersionUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "version",
          "in": "query",
          "description": "version",
          "required": true,
          "type": "string"
        }, {
          "name": "platform",
          "in": "query",
          "description": "platform",
          "required": true,
          "type": "string",
          "enum": ["IOS", "ANDROID", "WINDOWS_STORE", "WEB"]
        }, {
          "name": "product",
          "in": "query",
          "description": "product",
          "required": true,
          "type": "string",
          "enum": ["SHODOGG_CONNECT", "HPSN_PARTNERS", "HPSN_EMPLOYEES"]
        }, {
          "name": "status",
          "in": "query",
          "description": "status",
          "required": true,
          "type": "string",
          "enum": ["OK", "WARNING", "INCOMPATIBLE"]
        }, {
          "name": "message",
          "in": "query",
          "description": "message",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApplicationVersion"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.message": "method.request.querystring.message",
            "integration.request.querystring.status": "method.request.querystring.status",
            "integration.request.querystring.version": "method.request.querystring.version",
            "integration.request.querystring.platform": "method.request.querystring.platform",
            "integration.request.querystring.product": "method.request.querystring.product"
          },
          "type": "http",
          "uri": "/api/version"
        }
      }
    },
    "/api/version/check": {
      "post": {
        "tags": ["application-version-controller"],
        "summary": "Check a version number to receive its status and message.",
        "operationId": "checkVersionUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "version",
          "in": "query",
          "description": "version",
          "required": true,
          "type": "string"
        }, {
          "name": "platform",
          "in": "query",
          "description": "platform",
          "required": true,
          "type": "string",
          "enum": ["IOS", "ANDROID", "WINDOWS_STORE", "WEB"]
        }, {
          "name": "product",
          "in": "query",
          "description": "product",
          "required": true,
          "type": "string",
          "enum": ["SHODOGG_CONNECT", "HPSN_PARTNERS", "HPSN_EMPLOYEES"]
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationVersionResponseDTO"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.version": "method.request.querystring.version",
            "integration.request.querystring.platform": "method.request.querystring.platform",
            "integration.request.querystring.product": "method.request.querystring.product"
          },
          "type": "http",
          "uri": "/api/version/check"
        }
      }
    },
    "/api/version/{versionId}": {
      "delete": {
        "tags": ["application-version-controller"],
        "summary": "Delete an existing version by ID.",
        "operationId": "deleteVersionUsingDELETE",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [{
          "name": "versionId",
          "in": "path",
          "description": "versionId",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/version/{versionId}"
        }
      }
    },
    "/api/versions": {
      "get": {
        "tags": ["application-version-controller"],
        "summary": "Retrieve a list of ApplicationVersion objects optionally filtered.",
        "operationId": "getVersionsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "platform",
          "in": "query",
          "description": "platform",
          "required": false,
          "type": "string",
          "enum": ["IOS", "ANDROID", "WINDOWS_STORE", "WEB"]
        }, {
          "name": "product",
          "in": "query",
          "description": "product",
          "required": false,
          "type": "string",
          "enum": ["SHODOGG_CONNECT", "HPSN_PARTNERS", "HPSN_EMPLOYEES"]
        }, {
          "name": "status",
          "in": "query",
          "description": "status",
          "required": false,
          "type": "string",
          "enum": ["OK", "WARNING", "INCOMPATIBLE"]
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApplicationVersion"
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.status": "method.request.querystring.status",
            "integration.request.querystring.platform": "method.request.querystring.platform",
            "integration.request.querystring.product": "method.request.querystring.product"
          },
          "type": "http",
          "uri": "/api/versions"
        }
      }
    },
    "/api/youtube/asset": {
      "post": {
        "tags": ["you-tube-controller"],
        "summary": "Add a YouTube asset by URL",
        "operationId": "addYouTubeAssetUsingPOST_1",
        "consumes": ["application/json", "application/x-www-form-urlencoded"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "in": "body",
          "name": "youTubeAssetCreationDTO",
          "description": "youTubeAssetCreationDTO",
          "required": true,
          "schema": {
            "$ref": "#/definitions/YouTubeAssetCreationDTO"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleSuccessResultsDTO«Asset»"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/youtube/asset"
        }
      }
    },
    "/api/youtube/search": {
      "get": {
        "tags": ["you-tube-controller"],
        "summary": "Search YouTube for the specified query.  Returns a standard YouTube API JSON response.",
        "operationId": "searchYoutubeUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "query",
          "in": "query",
          "description": "query",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.query": "method.request.querystring.query"
          },
          "type": "http",
          "uri": "/api/youtube/search"
        }
      },
      "post": {
        "tags": ["you-tube-controller"],
        "summary": "Search YouTube for the specified query.  Returns a standard YouTube API JSON response.",
        "operationId": "searchYoutubeUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "query",
          "in": "query",
          "description": "query",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.query": "method.request.querystring.query"
          },
          "type": "http",
          "uri": "/api/youtube/search"
        }
      }
    },
    "/api/youtube/searchdto": {
      "get": {
        "tags": ["you-tube-controller"],
        "summary": "Search YouTube for the specified query.  Returns an array of YouTubeSearchResultDTOs",
        "operationId": "searchYouTubeWithDTOResultsUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "query",
          "in": "query",
          "description": "query",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/YouTubeSearchResults"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.query": "method.request.querystring.query"
          },
          "type": "http",
          "uri": "/api/youtube/searchdto"
        }
      },
      "post": {
        "tags": ["you-tube-controller"],
        "summary": "Search YouTube for the specified query.  Returns an array of YouTubeSearchResultDTOs",
        "operationId": "searchYouTubeWithDTOResultsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "query",
          "in": "query",
          "description": "query",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/YouTubeSearchResults"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.query": "method.request.querystring.query"
          },
          "type": "http",
          "uri": "/api/youtube/searchdto"
        }
      }
    },
    "/api/youtube/toprated": {
      "get": {
        "tags": ["you-tube-controller"],
        "summary": "Get a list of top rated YouTube videos.  Returns a standard YouTube API JSON response.",
        "operationId": "getTopRatedUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "http",
          "uri": "/api/youtube/toprated"
        }
      }
    },
    "/api/{appName}/company/{companyId}/user/invite": {
      "post": {
        "tags": ["company-controller"],
        "summary": "Invite user to a company",
        "operationId": "inviteUserToCompanyUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["application/json;charset=UTF-8"],
        "parameters": [{
          "name": "appName",
          "in": "path",
          "description": "appName",
          "required": true,
          "type": "string"
        }, {
          "name": "companyId",
          "in": "path",
          "description": "companyId",
          "required": true,
          "type": "string"
        }, {
          "name": "email",
          "in": "query",
          "description": "email",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "400": {
            "description": "User does not exist"
          }
        },
        "x-amazon-apigateway-integration": {
          "requestParameters": {
            "integration.request.querystring.email": "method.request.querystring.email"
          },
          "responses": {
            "400": {
              "statusCode": "400"
            }
          },
          "type": "http",
          "uri": "/api{appName}/company/{companyId}/user/invite"
        }
      }
    }
  },
  "definitions": {
    "UnauthorizedSessionToken": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "deviceGUID": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "mcoAppId": {
          "type": "string"
        },
        "mcoAppPublicKey": {
          "type": "string"
        },
        "mcoId": {
          "type": "string"
        },
        "mid": {
          "type": "string"
        },
        "sessionToken": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "userAuthToken": {
          "type": "string"
        }
      }
    },
    "MIDPreSyncDTO": {
      "type": "object",
      "properties": {
        "screenSessionId": {
          "type": "string"
        },
        "screenUrl": {
          "type": "string"
        }
      }
    },
    "AnalyticsReport": {
      "type": "object",
      "properties": {
        "companyName": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "downloadCount": {
          "type": "integer",
          "format": "int64"
        },
        "favoritesCount": {
          "type": "integer",
          "format": "int64"
        },
        "folderIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "internalUseOnly": {
          "type": "boolean",
          "example": false
        },
        "level": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "profiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "refId": {
          "type": "string"
        },
        "reports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnalyticsReport"
          }
        },
        "screenCastsCount": {
          "type": "integer",
          "format": "int64"
        },
        "subscriberCount": {
          "type": "integer",
          "format": "int64"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "viewCount": {
          "type": "integer",
          "format": "int64"
        },
        "vpnOnly": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "SimpleSuccessResultsDTO«ScreenWithSessionDTO»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ScreenWithSessionDTO"
        },
        "errorMessage": {
          "type": "string"
        },
        "success": {
          "type": "boolean",
          "example": false
        }
      },
      "description": "Wraps a Data Model Object"
    },
    "AssetEditDTO": {
      "type": "object",
      "properties": {
        "asset_label_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "flag": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          }
        },
        "flags_length": {
          "type": "integer",
          "format": "int32"
        },
        "flightTimeEnd": {
          "type": "integer",
          "format": "int64"
        },
        "flightTimeStart": {
          "type": "integer",
          "format": "int64"
        },
        "locale_country": {
          "type": "string"
        },
        "locale_language": {
          "type": "string"
        },
        "read_only": {
          "type": "boolean",
          "example": false
        },
        "tag": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags_length": {
          "type": "integer",
          "format": "int32"
        },
        "thumbnail_url": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "GroupDTO": {
      "type": "object",
      "properties": {
        "adminUserEmails": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "adminUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "assetsLastModifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "deleted": {
          "type": "boolean",
          "example": false
        },
        "description": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "ownerType": {
          "type": "string",
          "enum": ["USER", "COMPANY"]
        },
        "readOnly": {
          "type": "boolean",
          "example": false
        },
        "repoProvider": {
          "type": "string",
          "enum": ["DROPBOX", "BOX", "BRAINSHARK", "COMMS_FACTORY", "FACEBOOK", "S3", "GMAIL", "GOOGLE_PLUS", "TWITTER", "FLICKR", "LINKEDIN", "YOUTUBE", "VIMEO", "NETFLIX", "HULU", "AMAZON_PRIME", "HBO_GO", "ESPN", "CRACKLE", "VUDU", "FTP_SERVER", "ITUNES", "INSTAGRAM", "UPLOADED_BY_USER", "EXTERNAL_LINK"]
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "UserWithActiveCompanyDTO": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "example": false
        },
        "activeCompanyId": {
          "type": "string"
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserAddress"
          }
        },
        "admin": {
          "type": "boolean",
          "example": false
        },
        "attrs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "clientInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientInformation"
          }
        },
        "companyAdmin": {
          "type": "boolean",
          "example": false
        },
        "companyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "currentUserAuthToken": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "eventUrlId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "fistTimeUser": {
          "type": "boolean",
          "example": false
        },
        "id": {
          "type": "string"
        },
        "lastLoginTime": {
          "type": "string",
          "format": "date-time"
        },
        "lastName": {
          "type": "string"
        },
        "oauthUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pnHost": {
          "type": "string"
        },
        "pnPort": {
          "type": "string"
        },
        "pnProto": {
          "type": "string"
        },
        "repoMetadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserLinkedRepoMetadataDTO"
          }
        },
        "screenSessionId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "userLinkedOAuthMetadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserLinkedOAuthMetadataDTO"
          }
        },
        "wsHost": {
          "type": "string"
        },
        "wsPort": {
          "type": "string"
        },
        "wsProto": {
          "type": "string"
        }
      }
    },
    "Image": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "default": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "objectStoreBucket": {
          "type": "string"
        },
        "objectStoreFileKey": {
          "type": "string"
        },
        "objectStoreProvider": {
          "type": "string",
          "enum": ["S3", "HP_CLOUD"]
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "uploadedByUserId": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ScreenAssetAnalytics": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "id": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "DateTime": {
      "type": "object",
      "properties": {
        "afterNow": {
          "type": "boolean"
        },
        "beforeNow": {
          "type": "boolean"
        },
        "centuryOfEra": {
          "type": "integer",
          "format": "int32"
        },
        "chronology": {
          "$ref": "#/definitions/Chronology"
        },
        "dayOfMonth": {
          "type": "integer",
          "format": "int32"
        },
        "dayOfWeek": {
          "type": "integer",
          "format": "int32"
        },
        "dayOfYear": {
          "type": "integer",
          "format": "int32"
        },
        "equalNow": {
          "type": "boolean"
        },
        "era": {
          "type": "integer",
          "format": "int32"
        },
        "hourOfDay": {
          "type": "integer",
          "format": "int32"
        },
        "millis": {
          "type": "integer",
          "format": "int64"
        },
        "millisOfDay": {
          "type": "integer",
          "format": "int32"
        },
        "millisOfSecond": {
          "type": "integer",
          "format": "int32"
        },
        "minuteOfDay": {
          "type": "integer",
          "format": "int32"
        },
        "minuteOfHour": {
          "type": "integer",
          "format": "int32"
        },
        "monthOfYear": {
          "type": "integer",
          "format": "int32"
        },
        "secondOfDay": {
          "type": "integer",
          "format": "int32"
        },
        "secondOfMinute": {
          "type": "integer",
          "format": "int32"
        },
        "weekOfWeekyear": {
          "type": "integer",
          "format": "int32"
        },
        "weekyear": {
          "type": "integer",
          "format": "int32"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "yearOfCentury": {
          "type": "integer",
          "format": "int32"
        },
        "yearOfEra": {
          "type": "integer",
          "format": "int32"
        },
        "zone": {
          "$ref": "#/definitions/DateTimeZone"
        }
      }
    },
    "BrainsharkSearchResultDTO": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "allTimeViews": {
          "type": "integer",
          "format": "int64"
        },
        "allowMobile": {
          "type": "boolean"
        },
        "allowShare": {
          "type": "boolean"
        },
        "aspectRatio": {
          "type": "string"
        },
        "authorCompanyName": {
          "type": "string"
        },
        "authorEmail": {
          "type": "string"
        },
        "authorFullName": {
          "type": "string"
        },
        "authorId": {
          "type": "integer",
          "format": "int64"
        },
        "authorPhotoUrl": {
          "type": "string"
        },
        "authorTitle": {
          "type": "string"
        },
        "authorUsername": {
          "type": "string"
        },
        "averageRating": {
          "type": "number",
          "format": "double"
        },
        "bypassPlayer": {
          "type": "boolean"
        },
        "companyHighlight": {
          "type": "boolean"
        },
        "companyId": {
          "type": "integer",
          "format": "int64"
        },
        "companyLoginDirectory": {
          "type": "string"
        },
        "companyLogoUrl": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "createdDate": {
          "type": "integer",
          "format": "int64"
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "deviceCanHideSlides": {
          "type": "boolean"
        },
        "deviceCanReOrderSlides": {
          "type": "boolean"
        },
        "displayAuthorInfo": {
          "type": "boolean"
        },
        "durationInSeconds": {
          "type": "integer",
          "format": "int64"
        },
        "expired": {
          "type": "boolean"
        },
        "folderId": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastViewedDate": {
          "type": "integer",
          "format": "int64"
        },
        "mobileUrl": {
          "type": "string"
        },
        "modifiedDate": {
          "type": "integer",
          "format": "int64"
        },
        "numberOfSlides": {
          "type": "integer",
          "format": "int64"
        },
        "personalizeUrl": {
          "type": "string"
        },
        "presentationVersion": {
          "type": "integer",
          "format": "int64"
        },
        "requiresGuestbook": {
          "type": "boolean"
        },
        "requiresPassword": {
          "type": "boolean"
        },
        "shareMessage": {
          "type": "string"
        },
        "shareSubject": {
          "type": "string"
        },
        "shareUrl": {
          "type": "string"
        },
        "slides": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrainsharkSlideDTO"
          }
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "viewingPrice": {
          "type": "number",
          "format": "double"
        },
        "viewingUrl": {
          "type": "string"
        }
      }
    },
    "Playlist": {
      "type": "object",
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetRef"
          }
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "defaultInsertionLocation": {
          "type": "string",
          "enum": ["BEGINNING", "END"]
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "ownerType": {
          "type": "string",
          "enum": ["USER", "COMPANY", "MCO_APP", "SYSTEM"]
        },
        "publiclyViewable": {
          "type": "boolean"
        },
        "sharedWithUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "RecScreenErrorLog": {
      "type": "object",
      "properties": {
        "appCodeName": {
          "type": "string"
        },
        "appName": {
          "type": "string"
        },
        "appVersion": {
          "type": "string"
        },
        "cookieEnabled": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "errorMessage": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "lastCommand": {
          "type": "string"
        },
        "lineNumber": {
          "type": "string"
        },
        "loadingScreenShown": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "screenId": {
          "type": "string"
        },
        "screenSessionId": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "userAgent": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        }
      }
    },
    "ScreenBrowserAnalytics": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "id": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "SocialKeyPair": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "id": {
          "type": "string"
        },
        "oauthAppId": {
          "type": "string"
        },
        "oauthProvider": {
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        },
        "privateKey": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "Asset": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "example": false
        },
        "assetLabelIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "assetType": {
          "type": "string",
          "enum": ["VIDEO", "IMAGE", "AUDIO", "CROCODOC", "BOX", "BRAINSHARK", "SLIDESHOW", "WEB_PAGE", "LINK", "OEMBED"]
        },
        "augmentedPages": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AugmentedPage"
          }
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "deleted": {
          "type": "boolean",
          "example": false
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "externalAssetId": {
          "type": "string"
        },
        "externalOwnerId": {
          "type": "string"
        },
        "favoritesCount": {
          "type": "integer",
          "format": "int64"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          }
        },
        "flightTimeEnd": {
          "type": "string",
          "format": "date-time"
        },
        "flightTimeStart": {
          "type": "string",
          "format": "date-time"
        },
        "folderIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "localeCountryOrRegionIETFBCP47": {
          "type": "string"
        },
        "localeLanguageCodeISO639": {
          "type": "string"
        },
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "originalFilename": {
          "type": "string"
        },
        "originalUrl": {
          "type": "string"
        },
        "pages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Page"
          }
        },
        "ps": {
          "$ref": "#/definitions/PublishedStatus"
        },
        "readOnly": {
          "type": "boolean",
          "example": false
        },
        "relatedAssetIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relatedContentURLs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "repoMetadata": {
          "$ref": "#/definitions/AssetRepoMetadata"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "userId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "JasperMetaData": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "errorMessage": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "updated": {
          "type": "boolean",
          "example": false
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "ContactInfo": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        }
      },
      "description": "Nested Data Model within Event Model"
    },
    "ScreenAssetStateCommandDTO": {
      "type": "object",
      "properties": {
        "cmd": {
          "type": "string"
        },
        "cmdParms": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "screenId": {
          "type": "string"
        },
        "screenSessionId": {
          "type": "string"
        },
        "seq": {
          "type": "integer",
          "format": "int64"
        },
        "states": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScreenAssetState"
          }
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "BillingInformationDTO": {
      "type": "object",
      "properties": {
        "billingAddress": {
          "type": "string"
        },
        "billingAddress2": {
          "type": "string"
        },
        "billingCardExpirationMonth": {
          "type": "string"
        },
        "billingCardExpirationYear": {
          "type": "string"
        },
        "billingCity": {
          "type": "string"
        },
        "billingCountry": {
          "type": "string"
        },
        "billingFirstName": {
          "type": "string"
        },
        "billingLastName": {
          "type": "string"
        },
        "billingMaskedCard": {
          "type": "string"
        },
        "billingPeriodEnd": {
          "$ref": "#/definitions/DateTime"
        },
        "billingPeriodStart": {
          "$ref": "#/definitions/DateTime"
        },
        "billingState": {
          "type": "string"
        },
        "billingZipCode": {
          "type": "string"
        },
        "companyId": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "currentBillingPlan": {
          "$ref": "#/definitions/BillingPlan"
        },
        "customerId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "numCompanySeats": {
          "type": "integer",
          "format": "int64"
        },
        "numCompanyUsers": {
          "type": "integer",
          "format": "int64"
        },
        "planStartDate": {
          "$ref": "#/definitions/DateTime"
        },
        "subscriptionId": {
          "type": "string"
        },
        "subscriptionState": {
          "type": "string",
          "enum": ["trialing", "trial_ended", "assessing", "active", "soft_failure", "past_due", "suspended", "canceled", "unpaid", "expired"]
        },
        "userId": {
          "type": "string"
        },
        "userSubscriptionActive": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "MCOAppLightDTO": {
      "type": "object",
      "properties": {
        "advancedAuthEnabled": {
          "type": "boolean"
        },
        "appId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "mcoId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "platform": {
          "type": "string",
          "enum": ["IOS", "ANDROID", "WINDOWS_STORE", "WEB"]
        }
      }
    },
    "UserLinkedRepoMetadata": {
      "type": "object",
      "properties": {
        "authenticationParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "id": {
          "type": "string"
        },
        "repoProvider": {
          "type": "string",
          "enum": ["DROPBOX", "BOX", "BRAINSHARK", "COMMS_FACTORY", "FACEBOOK", "S3", "GMAIL", "GOOGLE_PLUS", "TWITTER", "FLICKR", "LINKEDIN", "YOUTUBE", "VIMEO", "NETFLIX", "HULU", "AMAZON_PRIME", "HBO_GO", "ESPN", "CRACKLE", "VUDU", "FTP_SERVER", "ITUNES", "INSTAGRAM", "UPLOADED_BY_USER", "EXTERNAL_LINK"]
        },
        "repoType": {
          "type": "string",
          "enum": ["DEVICE_LOCAL_CONTENT", "PRIVATE_SERVER", "CLOUD_STORAGE", "CLOUD_STREAMING_CONTENT", "SOCIAL_NETWORK", "FTP", "SFTP", "USER_UPLOADED_CONTENT"]
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "MIDContentRegistrationDTO": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "folderId": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "mcoAssetId": {
          "type": "string"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ScreenStyleDTO": {
      "type": "object",
      "properties": {
        "additionalElements": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "audio": {
          "type": "string"
        },
        "connectedUsers": {
          "type": "string"
        },
        "css": {
          "type": "string"
        },
        "disconnect": {
          "type": "string"
        },
        "loadingScreen": {
          "type": "string"
        },
        "postConnect": {
          "type": "string"
        },
        "preConnect": {
          "type": "string"
        },
        "qrCode": {
          "type": "string"
        },
        "syncCode": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "ScreenAssetState": {
      "type": "object",
      "properties": {
        "assetId": {
          "type": "string"
        },
        "assetType": {
          "type": "string",
          "enum": ["VIDEO", "IMAGE", "AUDIO", "CROCODOC", "BOX", "BRAINSHARK", "SLIDESHOW", "WEB_PAGE", "LINK", "OEMBED"]
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "externalAssetId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": ["ScreenAssetStateType(name=started)", "ScreenAssetStateType(name=stopped)", "ScreenAssetStateType(name=paused)", "ScreenAssetStateType(name=seek)", "ScreenAssetStateType(name=volume)", "ScreenAssetStateType(name=buffering)", "ScreenAssetStateType(name=loading)", "ScreenAssetStateType(name=viewing)", "ScreenAssetStateType(name=converting)"]
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "ScreenSession": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "example": false
        },
        "activeCompanyId": {
          "type": "string"
        },
        "activeScreens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Screen"
          }
        },
        "companyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "durationInSecs": {
          "type": "integer",
          "format": "int32"
        },
        "endedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "lastCommand": {
          "$ref": "#/definitions/ScreenAssetStateCommandDTO"
        },
        "locked": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "screens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Screen"
          }
        },
        "startedAt": {
          "type": "string",
          "format": "date-time"
        },
        "unauthorizedSessionTokenIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "userId": {
          "type": "string"
        },
        "viewedAssetIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MIDContentConsumption": {
      "type": "object",
      "properties": {
        "ad_campaign_id": {
          "type": "string"
        },
        "ad_id": {
          "type": "string"
        },
        "asset_id": {
          "type": "string"
        },
        "asset_url": {
          "type": "string"
        },
        "content_event_type": {
          "type": "string"
        },
        "end_time": {
          "type": "integer",
          "format": "int64"
        },
        "mco_asset_id": {
          "type": "string"
        },
        "player_current_state": {
          "type": "string"
        },
        "player_current_time_index": {
          "type": "integer",
          "format": "int64"
        },
        "start_time": {
          "type": "integer",
          "format": "int64"
        },
        "time_index": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ScreenSessionStatus": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "endedAt": {
          "type": "string",
          "format": "date-time"
        },
        "locked": {
          "type": "boolean"
        },
        "secondsSinceLastCommand": {
          "type": "integer",
          "format": "int32"
        },
        "startedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MobileDeviceInfoDTO": {
      "type": "object",
      "properties": {
        "addlDeviceInfo": {
          "type": "object"
        },
        "appName": {
          "type": "string"
        },
        "appVersion": {
          "type": "string"
        },
        "connectedByMobileNetwork": {
          "type": "boolean",
          "example": false
        },
        "deviceId": {
          "type": "string"
        },
        "mobileNetworkProvider": {
          "type": "string"
        },
        "operatingSys": {
          "type": "string"
        },
        "operatingSysVersion": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "DateTimeZone": {
      "type": "object",
      "properties": {
        "fixed": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "RecScreenModule": {
      "type": "object",
      "properties": {
        "additionalJSFileURLs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "cssFileURLs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "javascriptModuleURL": {
          "type": "string"
        },
        "mcoAppId": {
          "type": "string"
        },
        "mcoId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      },
      "description": "Defines a custom JS module used by the rec screen"
    },
    "Survey": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "deleted": {
          "type": "boolean"
        },
        "externalLink": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "questions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Question"
          }
        },
        "remoteSurveyId": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "MCOWithAppsDTO": {
      "type": "object",
      "properties": {
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MCOAppLightDTO"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "MobileAppClosedDTO": {
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "string"
        },
        "toBackground": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "ApplicationVersionResponseDTO": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["OK", "WARNING", "INCOMPATIBLE"]
        },
        "version": {
          "type": "string"
        }
      }
    },
    "UserLinkedOAuthMetadata": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "id": {
          "type": "string"
        },
        "oauthProvider": {
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        },
        "oauthVersion": {
          "type": "string",
          "enum": ["V1A", "V2"]
        },
        "providerUserId": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "Note": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "id": {
          "type": "string"
        },
        "note": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["EMBEDDED", "PERSONAL", "EVENT"]
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "NotificationType": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "deleted": {
          "type": "boolean",
          "example": false
        },
        "description": {
          "type": "string"
        },
        "emailTemplateName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "messageTemplate": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "notificationCategory": {
          "type": "string",
          "enum": ["teamContentUpdated", "personalContentUpdated", "salesActivity", "teamActivity", "shodoggCommunication"]
        },
        "recipientType": {
          "type": "string",
          "enum": ["user", "allInCompany", "presenter", "companyAdmin", "systemAdmin", "groupMembers", "allUsers"]
        },
        "systemAction": {
          "type": "string",
          "enum": ["login", "logout", "loginFail", "resetPW", "s", "sa", "rv", "aa", "ad", "ag", "v", "vE", "cilc", "cilca", "cilcr", "cilcE", "sucilc", "sucilcE", "as", "scSyncCo", "scSyncEv", "scDisc", "ssEUd", "lockSs", "ssDisc", "evUrlPresStart", "evUrlPresEnd", "evUrlDeactivate", "ucP", "ucL", "ucS", "AaCS", "ACF", "pc", "wnu", "fatpcf", "fripcf", "fdipcf", "pcfc", "pcfd", "mobCmd", "mobDeviceInfo", "mobAppCrash", "mobAppUse", "mobUserDevLink", "cA", "cR", "prt", "prtOLD", "prtSL", "als", "AOPL", "ash", "aS", "aPI", "aMI", "aSAN", "aAA", "aDA", "agSS", "agSSs", "auSS", "agSSScrCnt", "apiReapSS", "apiUploadBrainshark", "apiUploadFile", "apiUploadYouTube", "aUVbU", "aUIbU", "auCF", "auTn", "auLA", "auCR", "acUser", "ujc", "auUser", "adUser", "aCC", "aGC", "aUC", "aDC", "aAUtC", "aRUtC", "acGroup", "auGroup", "adGroup", "aga", "dga", "aAddAssetGroup", "aAAtF", "aRAfF", "aAAtGF", "aRAfGF", "aCA", "aUA", "aCAl", "aARA", "aSAFs", "aRA", "aGAlrt", "aGAlrts", "aUAl", "aRAl", "aCFG", "aFAAa", "aFAAu", "aFAAF", "aFAAFU", "aFAAc", "aFAAGF", "aFAAG", "aFAFU", "aFAFG", "aaPtA", "adPfA", "aRemAssetGroup", "acAssetNote", "auAssetNote", "adAssetNote", "aAD", "acPageNote", "auPageNote", "adPageNote", "adUGS", "arUGS", "aaUGS", "apUGS", "adCGS", "apCGS", "apCI", "apSUCI", "agFC", "agRF", "agCRF", "agUF", "auF", "adF", "acF", "auFP", "agFcR", "aRNAC", "agAsset", "acFav", "adFav", "agFav", "acSSL", "aSSLC", "aSSLCE", "aCESSL", "aEAL", "aGACS", "aDBfu", "aDBal", "aDBau", "aDBs", "aDBui", "aaLC", "aaLCE", "aFAU", "aFDU", "aFGAU", "acFU", "oGAU", "oGWR", "oGIR", "oGAR", "oL", "moGAU", "moGWR", "moGIR", "moGAR", "moL", "amaC", "amaGa", "amaG", "amaE", "amaD", "amkC", "amkD", "amkT", "amskC", "amskE", "amskD", "amRV", "amPSSS", "oMRS", "iMRS", "aGFSL", "aFSLC", "aFSLE", "plc", "ple", "pld", "plia", "plie", "plid", "browserInfo"]
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "AssetRef": {
      "type": "object",
      "properties": {
        "addedFromMCOAppId": {
          "type": "string"
        },
        "assetId": {
          "type": "string"
        },
        "companyId": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "externalAssetId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "thumbnailsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JSONObject"
          }
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "AssetSearchResultDTO": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/AssetPrunedNotesDTO"
        },
        "breadcrumbs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderLightDTO"
          }
        },
        "folderId": {
          "type": "string"
        },
        "folderName": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "groupOwnerId": {
          "type": "string"
        },
        "groupOwnerType": {
          "type": "string",
          "enum": ["USER", "COMPANY", "MCO_APP", "SYSTEM"]
        },
        "privateAsset": {
          "type": "boolean",
          "example": false
        }
      },
      "description": "A specific asset search result, which includes additional metadata, such as a list of folders that can be used as breadcrumbs"
    },
    "MIDEventQueryResult": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "eventId": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        }
      }
    },
    "MIDEvent": {
      "type": "object",
      "properties": {
        "adEvent": {
          "$ref": "#/definitions/MIDAdEvent"
        },
        "appInfo": {
          "$ref": "#/definitions/MCOAppInfo"
        },
        "assetId": {
          "type": "string"
        },
        "assetUrl": {
          "type": "string"
        },
        "cast": {
          "$ref": "#/definitions/MIDCastMetadata"
        },
        "content": {
          "$ref": "#/definitions/MIDContentConsumption"
        },
        "deviceGUID": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "eventValue": {
          "type": "object"
        },
        "eventValueOld": {
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "mcoAppId": {
          "type": "string"
        },
        "mcoAppPublicKey": {
          "type": "string"
        },
        "mcoAssetId": {
          "type": "string"
        },
        "mcoId": {
          "type": "string"
        },
        "mid": {
          "type": "string"
        },
        "save": {
          "$ref": "#/definitions/MCOSaveMetadata"
        },
        "screenSessionId": {
          "type": "string"
        },
        "sessionToken": {
          "type": "string"
        },
        "timestampFromServer": {
          "type": "integer",
          "format": "int64"
        },
        "timestampUTC": {
          "type": "integer",
          "format": "int64"
        },
        "unauthorizedSessionToken": {
          "type": "string"
        },
        "unauthorizedSessionTokenId": {
          "type": "string"
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "assetId": {
          "type": "string"
        },
        "clickCount": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "enabled": {
          "type": "boolean"
        },
        "eventId": {
          "type": "string"
        },
        "eventUrlId": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "maxClicksAllowed": {
          "type": "integer",
          "format": "int32"
        },
        "screenSessionId": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "MCOAdminDataFilterDTO": {
      "type": "object",
      "properties": {
        "eventTypes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "mcos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MCOWithAppsDTO"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MIDUserMinimalDTO"
          }
        }
      }
    },
    "BrandedTemplateData": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "fieldValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "subdomain": {
          "type": "string"
        },
        "templateId": {
          "type": "string"
        },
        "uriStyleId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "Group": {
      "type": "object",
      "properties": {
        "adminUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "assetsLastModifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          }
        },
        "folders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Folder"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "ownerType": {
          "type": "string",
          "enum": ["USER", "COMPANY"]
        },
        "readOnly": {
          "type": "boolean"
        },
        "repositoryProvider": {
          "type": "string",
          "enum": ["DROPBOX", "BOX", "BRAINSHARK", "COMMS_FACTORY", "FACEBOOK", "S3", "GMAIL", "GOOGLE_PLUS", "TWITTER", "FLICKR", "LINKEDIN", "YOUTUBE", "VIMEO", "NETFLIX", "HULU", "AMAZON_PRIME", "HBO_GO", "ESPN", "CRACKLE", "VUDU", "FTP_SERVER", "ITUNES", "INSTAGRAM", "UPLOADED_BY_USER", "EXTERNAL_LINK"]
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "uploadsRequireApproval": {
          "type": "boolean"
        }
      }
    },
    "MIDEventLoggingDetail": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "msg": {
          "type": "string"
        },
        "sev": {
          "type": "string"
        }
      }
    },
    "SystemConfig": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "id": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "ClientInformation": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "id": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "Folder": {
      "type": "object",
      "properties": {
        "authorizedUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "description": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          }
        },
        "folders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Folder"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "repositoryProvider": {
          "type": "string",
          "enum": ["DROPBOX", "BOX", "BRAINSHARK", "COMMS_FACTORY", "FACEBOOK", "S3", "GMAIL", "GOOGLE_PLUS", "TWITTER", "FLICKR", "LINKEDIN", "YOUTUBE", "VIMEO", "NETFLIX", "HULU", "AMAZON_PRIME", "HBO_GO", "ESPN", "CRACKLE", "VUDU", "FTP_SERVER", "ITUNES", "INSTAGRAM", "UPLOADED_BY_USER", "EXTERNAL_LINK"]
        },
        "subtitle": {
          "type": "string"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "uploadsRequireApproval": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "FavoriteDTO": {
      "type": "object",
      "properties": {
        "favType": {
          "type": "string",
          "enum": ["ASSET", "FOLDER", "GROUP"]
        },
        "itemId": {
          "type": "string"
        }
      }
    },
    "AutowireCapableBeanFactory": {
      "type": "object"
    },
    "BrainsharkSearchResultsDTO": {
      "type": "object",
      "properties": {
        "didYouMean": {
          "type": "string"
        },
        "done": {
          "type": "boolean"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrainsharkSearchResultDTO"
          }
        },
        "totalRows": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RequestLog": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "id": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "ScreenDTO": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "autoReconnectApproved": {
          "type": "boolean"
        },
        "flurryApiKey": {
          "type": "string"
        },
        "hasAssetState": {
          "type": "boolean",
          "example": false
        },
        "screenId": {
          "type": "string"
        },
        "screenSessionId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "statusBeforeDisconnect": {
          "type": "string"
        },
        "syncCode": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "MIDDataExport": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "exportStatus": {
          "type": "string",
          "enum": ["IN_PROGRESS", "COMPLETE", "FAILED"]
        },
        "fileName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "mcoId": {
          "type": "string"
        },
        "queryRecords": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MIDDataExportQueryRecord"
          }
        },
        "storageBucket": {
          "type": "string"
        },
        "storageFileKey": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "url": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "NotificationTypeDTO": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "messageTemplate": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "notificationCategory": {
          "type": "string",
          "enum": ["teamContentUpdated", "personalContentUpdated", "salesActivity", "teamActivity", "shodoggCommunication"]
        },
        "recipientType": {
          "type": "string",
          "enum": ["user", "allInCompany", "presenter", "companyAdmin", "systemAdmin", "groupMembers", "allUsers"]
        }
      }
    },
    "Question": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionOption"
          }
        },
        "questionType": {
          "type": "string",
          "enum": ["POLL", "TEXT"]
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "LogoutResponseBody": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": false
        }
      },
      "description": "LogoutResponseBody"
    },
    "MIDReceivingScreenInitDTO": {
      "type": "object",
      "properties": {
        "canReceiveCommands": {
          "type": "boolean"
        },
        "customModules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecScreenModule"
          }
        },
        "debugEnabled": {
          "type": "boolean"
        },
        "googleAnalyticsId": {
          "type": "string"
        },
        "midRecScreenStyle": {
          "$ref": "#/definitions/MIDRecScreenStyle"
        },
        "screenId": {
          "type": "string"
        },
        "webSocketHost": {
          "type": "string"
        },
        "webSocketPort": {
          "type": "string"
        },
        "webSocketProtocol": {
          "type": "string"
        }
      }
    },
    "SimpleSuccessResultsDTO«Asset»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Asset"
        },
        "errorMessage": {
          "type": "string"
        },
        "success": {
          "type": "boolean",
          "example": false
        }
      },
      "description": "Wraps a Data Model Object"
    },
    "SlideShareConsumptionAction": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "id": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "AssetPrunedNotesDTO": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "example": false
        },
        "assetLabelIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "assetType": {
          "type": "string",
          "enum": ["VIDEO", "IMAGE", "AUDIO", "CROCODOC", "BOX", "BRAINSHARK", "SLIDESHOW", "WEB_PAGE", "LINK", "OEMBED"]
        },
        "augmentedPages": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AugmentedPage"
          }
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "deleted": {
          "type": "boolean",
          "example": false
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "externalAssetId": {
          "type": "string"
        },
        "externalOwnerId": {
          "type": "string"
        },
        "favoritesCount": {
          "type": "integer",
          "format": "int64"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          }
        },
        "flightTimeEnd": {
          "type": "string",
          "format": "date-time"
        },
        "flightTimeStart": {
          "type": "string",
          "format": "date-time"
        },
        "folderIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "localeCountryOrRegionIETFBCP47": {
          "type": "string"
        },
        "localeLanguageCodeISO639": {
          "type": "string"
        },
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "originalFilename": {
          "type": "string"
        },
        "originalUrl": {
          "type": "string"
        },
        "pages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Page"
          }
        },
        "ps": {
          "$ref": "#/definitions/PublishedStatus"
        },
        "readOnly": {
          "type": "boolean",
          "example": false
        },
        "relatedAssetIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relatedContentURLs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "repoMetadata": {
          "$ref": "#/definitions/AssetRepoMetadata"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "userCanWrite": {
          "type": "boolean",
          "example": false
        },
        "userId": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        },
        "version": {
          "type": "string"
        }
      },
      "description": "Full Asset but notes that do not belong to the current user are pruned out."
    },
    "MIDAdEvent": {
      "type": "object",
      "properties": {
        "ad_id": {
          "type": "string"
        },
        "ad_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ad_system": {
          "type": "string"
        },
        "ad_title": {
          "type": "string"
        },
        "ad_type": {
          "type": "string",
          "enum": ["linear", "nonlinear", "companion"]
        },
        "advertiser": {
          "type": "string"
        },
        "campaign_id": {
          "type": "string"
        },
        "error_code": {
          "type": "string"
        },
        "error_msg": {
          "type": "string"
        },
        "impression_id": {
          "type": "string"
        },
        "impression_url": {
          "type": "string"
        },
        "is_tracking_event": {
          "type": "boolean"
        },
        "metric_companion": {
          "type": "string",
          "enum": ["creativeView"]
        },
        "metric_linear": {
          "type": "string",
          "enum": ["start", "firstQuartile", "midpoint", "thirdQuartile", "complete", "acceptInvitationLinear", "timeSpentViewing", "otherAdInteraction"]
        },
        "metric_nonlinear": {
          "type": "string",
          "enum": ["creativeView", "acceptInvitation", "adExpand", "adCollapse", "minimize", "close", "overlayViewDuration", "otherAdInteraction"]
        },
        "player_op": {
          "type": "string",
          "enum": ["mute", "unmute", "pause", "resume", "rewind", "skip", "progress", "playerExpand", "playerCollapse"]
        },
        "pod_id": {
          "type": "string"
        },
        "vast_req_xml": {
          "type": "string"
        },
        "vast_res_xml": {
          "type": "string"
        },
        "vast_tag": {
          "type": "string"
        },
        "vast_version": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "UserAPIKeyDTO": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "example": false
        },
        "activeCompanyId": {
          "type": "string"
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserAddress"
          }
        },
        "admin": {
          "type": "boolean",
          "example": false
        },
        "apiKeyApplicationNotes": {
          "type": "string"
        },
        "apiKeyDeclinedAt": {
          "type": "string",
          "format": "date-time"
        },
        "apiKeyGrantedAt": {
          "type": "string",
          "format": "date-time"
        },
        "apiKeyRequestedAt": {
          "type": "string",
          "format": "date-time"
        },
        "approvalComments": {
          "type": "string"
        },
        "attrs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "clientInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientInformation"
          }
        },
        "companyAdmin": {
          "type": "boolean",
          "example": false
        },
        "companyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "companyName": {
          "type": "string"
        },
        "currentUserAuthToken": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "eventUrlId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "fistTimeUser": {
          "type": "boolean",
          "example": false
        },
        "id": {
          "type": "string"
        },
        "lastLoginTime": {
          "type": "string",
          "format": "date-time"
        },
        "lastName": {
          "type": "string"
        },
        "oauthUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "phone1": {
          "type": "string"
        },
        "pnHost": {
          "type": "string"
        },
        "pnPort": {
          "type": "string"
        },
        "pnProto": {
          "type": "string"
        },
        "repoMetadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserLinkedRepoMetadataDTO"
          }
        },
        "screenSessionId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "userLinkedOAuthMetadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserLinkedOAuthMetadataDTO"
          }
        },
        "wsHost": {
          "type": "string"
        },
        "wsPort": {
          "type": "string"
        },
        "wsProto": {
          "type": "string"
        }
      }
    },
    "CompanySettingsDTO": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["string", "boolean", "int", "float"]
        }
      }
    },
    "MIDShareQueryResult": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "eventId": {
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "accessCode": {
          "type": "string"
        },
        "assetIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attendees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attendee"
          }
        },
        "contactInfo": {
          "$ref": "#/definitions/ContactInfo"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "dateAndTime": {
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "type": "boolean"
        },
        "duration": {
          "type": "integer",
          "format": "int32"
        },
        "endedAt": {
          "type": "string",
          "format": "date-time"
        },
        "eventUrlId": {
          "type": "string"
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "invitationMemo": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventNote"
          }
        },
        "pausedAt": {
          "type": "string",
          "format": "date-time"
        },
        "phoneNumber": {
          "type": "string"
        },
        "practicedAt": {
          "type": "string",
          "format": "date-time"
        },
        "screenSessionId": {
          "type": "string"
        },
        "startedAt": {
          "type": "string",
          "format": "date-time"
        },
        "state": {
          "type": "string",
          "enum": ["READY", "IN_PROGRESS", "PAUSED", "ENDED", "PRACTICE_MODE", "CANCELED"]
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "userId": {
          "type": "string"
        },
        "viewStartedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MIDDataExportQueryRecord": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "exportFileType": {
          "type": "string",
          "enum": ["CSV", "XLSX"]
        },
        "fileName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "queryParamEnd": {
          "type": "integer",
          "format": "int64"
        },
        "queryParamMCOAppId": {
          "type": "string"
        },
        "queryParamMCOId": {
          "type": "string"
        },
        "queryParamMID": {
          "type": "string"
        },
        "queryParamStart": {
          "type": "integer",
          "format": "int64"
        },
        "selectedCols": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["EVENT_DATA_QUERY", "SHARE_DATA_QUERY", "SOCIAL_DATA_QUERY"]
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "SimpleMessageResultDTO": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "MCOSaveMetadata": {
      "type": "object",
      "properties": {
        "assetRefId": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "ownerType": {
          "type": "string",
          "enum": ["USER", "COMPANY", "MCO_APP", "SYSTEM"]
        },
        "playlistId": {
          "type": "string"
        }
      }
    },
    "DropboxAccountDTO": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "quota": {
          "type": "integer",
          "format": "int64"
        },
        "quotaNormal": {
          "type": "integer",
          "format": "int64"
        },
        "quotaShared": {
          "type": "integer",
          "format": "int64"
        },
        "referralLink": {
          "type": "string"
        },
        "uid": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Company": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserAddress"
          }
        },
        "adminUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "assetLabels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetLabel"
          }
        },
        "childCompanyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "configurationSettings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "defaultGroupId": {
          "type": "string"
        },
        "defaultSequenceOfFolderIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultUserPermissions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["PORTAL_LOGIN", "PORTAL_UPLOAD", "UPLOAD_APPROVER"]
          }
        },
        "deleted": {
          "type": "boolean"
        },
        "displaySequenceOfFolderIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "localeVariant": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "seats": {
          "type": "integer",
          "format": "int32"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "CompanyWithChildren": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserAddress"
          }
        },
        "adminUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "assetLabels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetLabel"
          }
        },
        "childCompanies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyWithChildren"
          }
        },
        "childCompanyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "configurationSettings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "defaultGroupId": {
          "type": "string"
        },
        "defaultSequenceOfFolderIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultUserPermissions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["PORTAL_LOGIN", "PORTAL_UPLOAD", "UPLOAD_APPROVER"]
          }
        },
        "deleted": {
          "type": "boolean"
        },
        "displaySequenceOfFolderIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "localeVariant": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "seats": {
          "type": "integer",
          "format": "int32"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "ApplicationVersion": {
      "type": "object",
      "properties": {
        "applicationName": {
          "type": "string",
          "enum": ["SHODOGG_CONNECT", "HPSN_PARTNERS", "HPSN_EMPLOYEES"]
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "platform": {
          "type": "string",
          "enum": ["IOS", "ANDROID", "WINDOWS_STORE", "WEB"]
        },
        "status": {
          "type": "string",
          "enum": ["OK", "WARNING", "INCOMPATIBLE"]
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "version": {
          "type": "string"
        },
        "versionMajor": {
          "type": "integer",
          "format": "int32"
        },
        "versionMinor": {
          "type": "integer",
          "format": "int32"
        },
        "versionPatch": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Page": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "hqThumbnailUrl": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "marker": {
          "type": "string"
        },
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "smallThumbnailUrl": {
          "type": "string"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "UserAddress": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "street1": {
          "type": "string"
        },
        "street2": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "AssetCreationDTO": {
      "type": "object",
      "properties": {
        "asset_type": {
          "type": "string",
          "enum": ["VIDEO", "IMAGE", "AUDIO", "CROCODOC", "BOX", "BRAINSHARK", "SLIDESHOW", "WEB_PAGE", "LINK", "OEMBED"]
        },
        "description": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "original_filename": {
          "type": "string"
        },
        "original_url": {
          "type": "string"
        },
        "read_only": {
          "type": "boolean",
          "example": false
        },
        "thumbnail_url": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "MIDEventLoggingResults": {
      "type": "object",
      "properties": {
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MIDEventLoggingDetail"
          }
        },
        "eventsLoggedCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DropboxEntryDTO": {
      "type": "object",
      "properties": {
        "assetId": {
          "type": "string"
        },
        "bytes": {
          "type": "integer",
          "format": "int64"
        },
        "clientMtime": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "dir": {
          "type": "boolean"
        },
        "filename": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "mimeType": {
          "type": "string"
        },
        "modified": {
          "type": "string"
        },
        "newVersionAvailable": {
          "type": "boolean",
          "example": false
        },
        "path": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "root": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["QUEUED", "CONVERTING", "COMPLETE", "ERROR"]
        },
        "statusMessage": {
          "type": "string"
        },
        "thumbExists": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "ApplicationContext": {
      "type": "object",
      "properties": {
        "applicationName": {
          "type": "string"
        },
        "autowireCapableBeanFactory": {
          "$ref": "#/definitions/AutowireCapableBeanFactory"
        },
        "beanDefinitionCount": {
          "type": "integer",
          "format": "int32"
        },
        "beanDefinitionNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classLoader": {
          "$ref": "#/definitions/ClassLoader"
        },
        "displayName": {
          "type": "string"
        },
        "environment": {
          "$ref": "#/definitions/Environment"
        },
        "id": {
          "type": "string"
        },
        "parent": {
          "$ref": "#/definitions/ApplicationContext"
        },
        "parentBeanFactory": {
          "$ref": "#/definitions/BeanFactory"
        },
        "startupDate": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BrainsharkSlideDTO": {
      "type": "object",
      "properties": {
        "animationTimings": {
          "type": "string"
        },
        "chapterTitle": {
          "type": "string"
        },
        "duration": {
          "type": "integer",
          "format": "int64"
        },
        "firstAnimationTimed": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "mobileDuration": {
          "type": "number",
          "format": "double"
        },
        "mobileUrl": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int64"
        },
        "questionId": {
          "type": "integer",
          "format": "int64"
        },
        "shapes": {
          "type": "object"
        },
        "slideTransition": {
          "type": "object"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "FolderDTO": {
      "type": "object",
      "properties": {
        "assetIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attrs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "authorizedUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          }
        },
        "folders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderDTO"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subtitle": {
          "type": "string"
        },
        "thumbnailUrl": {
          "type": "string"
        }
      }
    },
    "VerifySessionResponseDTO": {
      "type": "object",
      "properties": {
        "admin": {
          "type": "boolean",
          "example": false
        },
        "adminOfCompanyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      }
    },
    "MobileCommandDTO": {
      "type": "object",
      "properties": {
        "cmd": {
          "type": "string",
          "enum": ["DISCONNECT", "HOME", "DISPLAY", "SAVE_AS", "PROMPT"]
        },
        "cmdParms": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "screenId": {
          "type": "string"
        },
        "screenSessionId": {
          "type": "string"
        },
        "states": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MobileScreenAssetState"
          }
        }
      }
    },
    "MIDSocialData": {
      "type": "object"
    },
    "Collection«string»": {
      "type": "object"
    },
    "MobileAppCrashDTO": {
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "mobileInfo": {
          "$ref": "#/definitions/MobileDeviceInfoDTO"
        },
        "stackTrace": {
          "type": "string"
        }
      }
    },
    "UserLinkedOAuthMetadataDTO": {
      "type": "object",
      "properties": {
        "oauthProvider": {
          "type": "string",
          "enum": ["LINKEDIN", "SALESFORCE", "FACEBOOK", "GOOGLE"]
        },
        "oauthVersion": {
          "type": "string",
          "enum": ["V1A", "V2"]
        },
        "providerUserId": {
          "type": "string"
        }
      }
    },
    "FolderContentDTO": {
      "type": "object",
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetMinimalDTO"
          }
        },
        "authorizedUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "folders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Folder"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "repositoryProvider": {
          "type": "string",
          "enum": ["DROPBOX", "BOX", "BRAINSHARK", "COMMS_FACTORY", "FACEBOOK", "S3", "GMAIL", "GOOGLE_PLUS", "TWITTER", "FLICKR", "LINKEDIN", "YOUTUBE", "VIMEO", "NETFLIX", "HULU", "AMAZON_PRIME", "HBO_GO", "ESPN", "CRACKLE", "VUDU", "FTP_SERVER", "ITUNES", "INSTAGRAM", "UPLOADED_BY_USER", "EXTERNAL_LINK"]
        },
        "subtitle": {
          "type": "string"
        }
      }
    },
    "NotificationSettingsDTO": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "notificationFrequency": {
          "type": "string",
          "enum": ["instant", "instantOnceComplete", "daily", "weekly", "monthly", "dateTime"]
        },
        "notificationType": {
          "$ref": "#/definitions/NotificationTypeDTO"
        },
        "notificationTypeId": {
          "type": "string"
        },
        "shouldBeInFeed": {
          "type": "boolean",
          "example": false
        },
        "shouldSendEmail": {
          "type": "boolean",
          "example": false
        },
        "shouldSendMobilePushNotification": {
          "type": "boolean",
          "example": false
        },
        "shouldSendPortalPush": {
          "type": "boolean",
          "example": false
        },
        "shouldSendTextMessage": {
          "type": "boolean",
          "example": false
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "AssetMinimalDTO": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "example": false
        },
        "assetId": {
          "type": "string"
        },
        "assetType": {
          "type": "string",
          "enum": ["VIDEO", "YOUTUBE", "IMAGE", "AUDIO", "CROCODOC"]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdByEmail": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "externalAssetId": {
          "type": "string"
        },
        "externalOwnerId": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          }
        },
        "folderIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "noteCount": {
          "type": "integer",
          "format": "int32"
        },
        "originalFilename": {
          "type": "string"
        },
        "originalUrl": {
          "type": "string"
        },
        "pageCount": {
          "type": "integer",
          "format": "int32"
        },
        "readOnly": {
          "type": "boolean",
          "example": false
        },
        "repoMetadata": {
          "$ref": "#/definitions/AssetRepoMetadata"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "MobileAppOpenedDTO": {
      "type": "object",
      "properties": {
        "deviceInfo": {
          "$ref": "#/definitions/MobileDeviceInfoDTO"
        },
        "fromBackground": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "recScreenStyle": {
      "type": "object",
      "properties": {
        "additionalElements": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "audio": {
          "type": "string"
        },
        "connectedUsers": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "css": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disconnect": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "loadingScreen": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "postConnect": {
          "type": "string"
        },
        "preConnect": {
          "type": "string"
        },
        "qrCode": {
          "type": "string"
        },
        "syncCode": {
          "type": "string"
        },
        "templateData": {
          "$ref": "#/definitions/BrandedTemplateData"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "FollowUpCreationDTO": {
      "type": "object",
      "properties": {
        "assetIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "type": "string"
        },
        "recipients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameAndEmailDTO"
          }
        },
        "screenSessionId": {
          "type": "string"
        }
      }
    },
    "RecScreenTemplate": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TemplateField"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "recScreenStyleTemplate": {
          "$ref": "#/definitions/recScreenStyle"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "MobileInitDTO": {
      "type": "object",
      "properties": {
        "numUnreadNotifications": {
          "type": "integer",
          "format": "int64"
        },
        "supportedUploadFileTypes": {
          "type": "string"
        },
        "wsHost": {
          "type": "string"
        },
        "wsPort": {
          "type": "string"
        },
        "wsProto": {
          "type": "string"
        }
      }
    },
    "YouTubeAssetCreationDTO": {
      "type": "object",
      "properties": {
        "folder_id": {
          "type": "string"
        },
        "group_id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "AssetLabel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "MIDSessionCreationRequest": {
      "type": "object",
      "properties": {
        "mid": {
          "type": "string"
        },
        "userAuthToken": {
          "type": "string"
        }
      }
    },
    "MIDRecScreenStyle": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "description": {
          "type": "string"
        },
        "disconnectBGColorHex": {
          "type": "string"
        },
        "disconnectImages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "ownerType": {
          "type": "string",
          "enum": ["USER", "COMPANY", "MCO_APP", "SYSTEM"]
        },
        "splashBGColorHex": {
          "type": "string"
        },
        "splashImages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "MIDAppInitResponseDTO": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "deviceDiscoveryTrackingURL": {
          "type": "string"
        },
        "kinesisEnabled": {
          "type": "boolean"
        },
        "mcoAppInfo": {
          "$ref": "#/definitions/MCOAppLightDTO"
        },
        "mcoId": {
          "type": "string"
        },
        "ustId": {
          "type": "string"
        }
      }
    },
    "AugmentedPage": {
      "type": "object",
      "properties": {
        "afterPageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetMinimalDTO"
          }
        }
      }
    },
    "MIDUserMinimalDTO": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "NameAndEmailDTO": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "RedirectView": {
      "type": "object",
      "properties": {
        "applicationContext": {
          "$ref": "#/definitions/ApplicationContext"
        },
        "attributesMap": {
          "type": "object"
        },
        "beanName": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "exposePathVariables": {
          "type": "boolean"
        },
        "propagateQueryProperties": {
          "type": "boolean"
        },
        "redirectView": {
          "type": "boolean"
        },
        "requestContextAttribute": {
          "type": "string"
        },
        "staticAttributes": {
          "type": "object"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Environment": {
      "type": "object",
      "properties": {
        "activeProfiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultProfiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UserAPIKeyMetadata": {
      "type": "object",
      "properties": {
        "apiKeyApplicationNotes": {
          "type": "string"
        },
        "apiKeyDeclinedAt": {
          "type": "string",
          "format": "date-time"
        },
        "apiKeyGrantedAt": {
          "type": "string",
          "format": "date-time"
        },
        "apiKeyRequestedAt": {
          "type": "string",
          "format": "date-time"
        },
        "approvalComments": {
          "type": "string"
        }
      }
    },
    "AssetRepoMetadata": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "denyRetry": {
          "type": "boolean",
          "example": false
        },
        "displayMessage": {
          "type": "string"
        },
        "errorDetails": {
          "type": "string"
        },
        "errorType": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "internalState": {
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "type": "string"
        },
        "repoProvider": {
          "type": "string",
          "enum": ["DROPBOX", "BOX", "BRAINSHARK", "COMMS_FACTORY", "FACEBOOK", "S3", "GMAIL", "GOOGLE_PLUS", "TWITTER", "FLICKR", "LINKEDIN", "YOUTUBE", "VIMEO", "NETFLIX", "HULU", "AMAZON_PRIME", "HBO_GO", "ESPN", "CRACKLE", "VUDU", "FTP_SERVER", "ITUNES", "INSTAGRAM", "UPLOADED_BY_USER", "EXTERNAL_LINK"]
        },
        "repoType": {
          "type": "string",
          "enum": ["DEVICE_LOCAL_CONTENT", "PRIVATE_SERVER", "CLOUD_STORAGE", "CLOUD_STREAMING_CONTENT", "SOCIAL_NETWORK", "FTP", "SFTP", "USER_UPLOADED_CONTENT"]
        },
        "shared": {
          "type": "boolean",
          "example": false
        },
        "status": {
          "type": "string",
          "enum": ["QUEUED", "CONVERTING", "COMPLETE", "ERROR"]
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "FolderLightDTO": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subtitle": {
          "type": "string"
        },
        "thumbnailUrl": {
          "type": "string"
        }
      },
      "description": "This DTO is intended to look exactly like a Folder, but without a list of sub-folders."
    },
    "Favorite": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "favoriteType": {
          "type": "string",
          "enum": ["ASSET", "FOLDER", "GROUP"]
        },
        "id": {
          "type": "string"
        },
        "itemId": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "ScreenTestResult": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "id": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "ScreenSessionDTO": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "example": false
        },
        "activeCompanyId": {
          "type": "string"
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetMinimalDTO"
          }
        },
        "companyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "durationInSecs": {
          "type": "integer",
          "format": "int32"
        },
        "endedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "lastCommand": {
          "$ref": "#/definitions/ScreenAssetStateCommandDTO"
        },
        "locked": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "screens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScreenDTO"
          }
        },
        "startedAt": {
          "type": "string",
          "format": "date-time"
        },
        "unauthorizedSessionTokenIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "EventNote": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "eventId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "note": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["EMBEDDED", "PERSONAL", "EVENT"]
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "example": false
        },
        "activeCompanyId": {
          "type": "string"
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserAddress"
          }
        },
        "admin": {
          "type": "boolean",
          "example": false
        },
        "apiKey": {
          "type": "string"
        },
        "apiKeyMetadata": {
          "$ref": "#/definitions/UserAPIKeyMetadata"
        },
        "apiKeyPendingApproval": {
          "type": "boolean"
        },
        "clientInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientInformation"
          }
        },
        "companyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "companyName": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "defaultPlaylistId": {
          "type": "string"
        },
        "displaySequenceOfFolderIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "email": {
          "type": "string"
        },
        "emailLowerCase": {
          "type": "string"
        },
        "favorites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Favorite"
          }
        },
        "firstName": {
          "type": "string"
        },
        "firstTimeUser": {
          "type": "boolean",
          "example": false
        },
        "folders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Folder"
          }
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "id": {
          "type": "string"
        },
        "jasperMetadata": {
          "$ref": "#/definitions/JasperMetaData"
        },
        "jasperMetadataSHA1": {
          "type": "string"
        },
        "lastLoginTime": {
          "type": "string",
          "format": "date-time"
        },
        "lastName": {
          "type": "string"
        },
        "loginStatus": {
          "type": "integer",
          "format": "int32"
        },
        "oauthUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "password": {
          "type": "string"
        },
        "passwordExpired": {
          "type": "boolean"
        },
        "passwordResetToken": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["PORTAL_LOGIN", "PORTAL_UPLOAD", "UPLOAD_APPROVER"]
          }
        },
        "phone1": {
          "type": "string"
        },
        "repoMetadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserLinkedRepoMetadata"
          }
        },
        "salt": {
          "type": "string"
        },
        "sessionTokens": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "udid": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "userAuthTokens": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DateTime"
          }
        },
        "userLinkedOAuthMetadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserLinkedOAuthMetadata"
          }
        },
        "verificationLinkId": {
          "type": "string"
        }
      }
    },
    "NotificationDTO": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "enum": ["teamContentUpdated", "personalContentUpdated", "salesActivity", "teamActivity", "shodoggCommunication"]
        },
        "companyId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "notificationTypeId": {
          "type": "string"
        },
        "notificationTypeName": {
          "type": "string"
        },
        "read": {
          "type": "boolean",
          "example": false
        },
        "targetObjectId": {
          "type": "string"
        },
        "targetObjectType": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "Screen": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "example": false
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "currentAssetsState": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScreenAssetState"
          }
        },
        "domainURL": {
          "type": "string"
        },
        "eventId": {
          "type": "string"
        },
        "flurryApiKey": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "screenId": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["new", "waiting", "insession", "rejected", "removed", "disconnected"]
        },
        "statusBeforeDisconnect": {
          "type": "string",
          "enum": ["new", "waiting", "insession", "rejected", "removed", "disconnected"]
        },
        "syncCode": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "userAgent": {
          "type": "string"
        },
        "userAgentId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "UserLinkedRepoMetadataDTO": {
      "type": "object",
      "properties": {
        "repoProvider": {
          "type": "string",
          "enum": ["DROPBOX", "BOX", "BRAINSHARK", "COMMS_FACTORY", "FACEBOOK", "S3", "GMAIL", "GOOGLE_PLUS", "TWITTER", "FLICKR", "LINKEDIN", "YOUTUBE", "VIMEO", "NETFLIX", "HULU", "AMAZON_PRIME", "HBO_GO", "ESPN", "CRACKLE", "VUDU", "FTP_SERVER", "ITUNES", "INSTAGRAM", "UPLOADED_BY_USER", "EXTERNAL_LINK"]
        },
        "repoType": {
          "type": "string",
          "enum": ["DEVICE_LOCAL_CONTENT", "PRIVATE_SERVER", "CLOUD_STORAGE", "CLOUD_STREAMING_CONTENT", "SOCIAL_NETWORK", "FTP", "SFTP", "USER_UPLOADED_CONTENT"]
        }
      }
    },
    "DataConsumptionResultsDTO": {
      "type": "object",
      "properties": {
        "dryRun": {
          "type": "boolean"
        },
        "recordsProcessed": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ModelAndView": {
      "type": "object",
      "properties": {
        "empty": {
          "type": "boolean"
        },
        "model": {
          "type": "object"
        },
        "modelMap": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "reference": {
          "type": "boolean"
        },
        "view": {
          "$ref": "#/definitions/View"
        },
        "viewName": {
          "type": "string"
        }
      }
    },
    "EventUrlSyncResponse": {
      "type": "object",
      "properties": {
        "eventId": {
          "type": "string"
        },
        "eventUrlId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "screenSessionDTO": {
          "$ref": "#/definitions/ScreenSessionDTO"
        },
        "screenSessionId": {
          "type": "string"
        },
        "uriPath": {
          "type": "string"
        },
        "webSocketHost": {
          "type": "string"
        },
        "webSocketPort": {
          "type": "string"
        },
        "webSocketProtocol": {
          "type": "string"
        }
      }
    },
    "AssetStatus": {
      "type": "object",
      "properties": {
        "assetId": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["QUEUED", "CONVERTING", "COMPLETE", "ERROR"]
        }
      }
    },
    "BillingPlan": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "example": false
        },
        "componentPeriodicCostCents": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "description": {
          "type": "string"
        },
        "free": {
          "type": "boolean",
          "example": false
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "periodLength": {
          "type": "integer",
          "format": "int32"
        },
        "periodicCostCents": {
          "type": "integer",
          "format": "int64"
        },
        "productId": {
          "type": "string"
        },
        "quantityComponentId": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "MessageAlert": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "deleted": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "url": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "UserLightDTO": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      }
    },
    "MCOApp": {
      "type": "object",
      "properties": {
        "activeRecScreenStyleId": {
          "type": "string"
        },
        "applicationPlatform": {
          "type": "string",
          "enum": ["IOS", "ANDROID", "WINDOWS_STORE", "WEB"]
        },
        "companyId": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "deleted": {
          "type": "boolean",
          "example": false
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "keyPairIDList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "keyPairs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MCOAppKeyPair"
          }
        },
        "mcoMidAuthServiceEnabled": {
          "type": "boolean",
          "example": false
        },
        "mcoMidAuthServiceUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "socialKeyPairIDList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "socialKeyPairs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SocialKeyPair"
          }
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "MIDUserSocialDataDTO": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "socialData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MIDSocialData"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "AutoSyncDTO": {
      "type": "object",
      "properties": {
        "recScreenUrl": {
          "type": "string"
        },
        "screenId": {
          "type": "string"
        },
        "screenSessionId": {
          "type": "string"
        }
      }
    },
    "BeanFactory": {
      "type": "object"
    },
    "ClassLoader": {
      "type": "object",
      "properties": {
        "parent": {
          "$ref": "#/definitions/ClassLoader"
        }
      }
    },
    "Chronology": {
      "type": "object",
      "properties": {
        "zone": {
          "$ref": "#/definitions/DateTimeZone"
        }
      }
    },
    "SimpleSuccessResultsDTO«UserLightDTO»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/UserLightDTO"
        },
        "errorMessage": {
          "type": "string"
        },
        "success": {
          "type": "boolean",
          "example": false
        }
      },
      "description": "Wraps a Data Model Object"
    },
    "SimpleCountResultDTO": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PortalInitDTO": {
      "type": "object",
      "properties": {
        "activeCompanyId": {
          "type": "string"
        },
        "activeCompanyOwnerId": {
          "type": "string"
        },
        "activeCompanySettings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "admin": {
          "type": "boolean"
        },
        "analyticsViewsEnabled": {
          "type": "boolean",
          "example": false
        },
        "assetFlagsEnabled": {
          "type": "boolean",
          "example": false
        },
        "assetLabelsEnabled": {
          "type": "boolean",
          "example": false
        },
        "assetTagsEnabled": {
          "type": "boolean",
          "example": false
        },
        "companyIdsAndDefaultGroupIds": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "companyIdsAndNames": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "companySupportedRepos": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultSupportedRepos": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "email": {
          "type": "string"
        },
        "environmentShortName": {
          "type": "string"
        },
        "eventPrefix": {
          "type": "string"
        },
        "folderFlagsEnabled": {
          "type": "boolean",
          "example": false
        },
        "jasperReportsServerUrl": {
          "type": "string"
        },
        "jaspersoftName": {
          "type": "string"
        },
        "jaspersoftPassword": {
          "type": "string"
        },
        "maxUploadFileSizeBytes": {
          "type": "integer",
          "format": "int32"
        },
        "pnHost": {
          "type": "string"
        },
        "pnPort": {
          "type": "string"
        },
        "pnProto": {
          "type": "string"
        },
        "recscreenUrl": {
          "type": "string"
        },
        "subscriptionState": {
          "type": "string",
          "enum": ["trialing", "trial_ended", "assessing", "active", "soft_failure", "past_due", "suspended", "canceled", "unpaid", "expired"]
        },
        "supportedAssetFlags": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["VPN", "INTERNAL_USE_ONLY"]
          }
        },
        "supportedUploadFileTypes": {
          "type": "string"
        },
        "userAdminCompanies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userFirstName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userLastName": {
          "type": "string"
        }
      }
    },
    "MCOAppKeyPair": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "enabled": {
          "type": "boolean",
          "example": false
        },
        "id": {
          "type": "string"
        },
        "privateKey": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "QuestionOption": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "YouTubeSearchResult": {
      "type": "object",
      "properties": {
        "assetIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "authorName": {
          "type": "string"
        },
        "authorUri": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "durationInSeconds": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "thumbnails": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "viewCount": {
          "type": "string"
        }
      }
    },
    "NotificationEnums": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "frequencies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "messageTemplateKeys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recipientTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "systemActions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MCOAppInfo": {
      "type": "object",
      "properties": {
        "appName": {
          "type": "string"
        },
        "build": {
          "type": "integer",
          "format": "int32"
        },
        "verMajor": {
          "type": "integer",
          "format": "int32"
        },
        "verMinor": {
          "type": "integer",
          "format": "int32"
        },
        "verPatch": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "MediaAssetCreationDTO": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "folder_id": {
          "type": "string"
        },
        "group_id": {
          "type": "string"
        },
        "thumbnail_url": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "UserPortalErrorLog": {
      "type": "object",
      "properties": {
        "apiCallMethod": {
          "type": "string"
        },
        "apiCallParams": {
          "type": "string"
        },
        "apiCallUri": {
          "type": "string"
        },
        "appCodeName": {
          "type": "string"
        },
        "appName": {
          "type": "string"
        },
        "appVersion": {
          "type": "string"
        },
        "cookieEnabled": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "errorMessage": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "lineNumber": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "responseCode": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "userAgent": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        }
      }
    },
    "View": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string"
        }
      }
    },
    "Analytics": {
      "type": "object",
      "properties": {
        "P": {
          "type": "string"
        },
        "act": {
          "type": "string",
          "enum": ["login", "logout", "loginFail", "resetPW", "s", "sa", "rv", "aa", "ad", "ag", "v", "vE", "cilc", "cilca", "cilcr", "cilcE", "sucilc", "sucilcE", "as", "scSyncCo", "scSyncEv", "scDisc", "ssEUd", "lockSs", "ssDisc", "evUrlPresStart", "evUrlPresEnd", "evUrlDeactivate", "ucP", "ucL", "ucS", "AaCS", "ACF", "pc", "wnu", "fatpcf", "fripcf", "fdipcf", "pcfc", "pcfd", "mobCmd", "mobDeviceInfo", "mobAppCrash", "mobAppUse", "mobUserDevLink", "cA", "cR", "prt", "prtOLD", "prtSL", "als", "AOPL", "ash", "aS", "aPI", "aMI", "aSAN", "aAA", "aDA", "agSS", "agSSs", "auSS", "agSSScrCnt", "apiReapSS", "apiUploadBrainshark", "apiUploadFile", "apiUploadYouTube", "aUVbU", "aUIbU", "auCF", "auTn", "auLA", "auCR", "acUser", "ujc", "auUser", "adUser", "aCC", "aGC", "aUC", "aDC", "aAUtC", "aRUtC", "acGroup", "auGroup", "adGroup", "aga", "dga", "aAddAssetGroup", "aAAtF", "aRAfF", "aAAtGF", "aRAfGF", "aCA", "aUA", "aCAl", "aARA", "aSAFs", "aRA", "aGAlrt", "aGAlrts", "aUAl", "aRAl", "aCFG", "aFAAa", "aFAAu", "aFAAF", "aFAAFU", "aFAAc", "aFAAGF", "aFAAG", "aFAFU", "aFAFG", "aaPtA", "adPfA", "aRemAssetGroup", "acAssetNote", "auAssetNote", "adAssetNote", "aAD", "acPageNote", "auPageNote", "adPageNote", "adUGS", "arUGS", "aaUGS", "apUGS", "adCGS", "apCGS", "apCI", "apSUCI", "agFC", "agRF", "agCRF", "agUF", "auF", "adF", "acF", "auFP", "agFcR", "aRNAC", "agAsset", "acFav", "adFav", "agFav", "acSSL", "aSSLC", "aSSLCE", "aCESSL", "aEAL", "aGACS", "aDBfu", "aDBal", "aDBau", "aDBs", "aDBui", "aaLC", "aaLCE", "aFAU", "aFDU", "aFGAU", "acFU", "oGAU", "oGWR", "oGIR", "oGAR", "oL", "moGAU", "moGWR", "moGIR", "moGAR", "moL", "amaC", "amaGa", "amaG", "amaE", "amaD", "amkC", "amkD", "amkT", "amskC", "amskE", "amskD", "amRV", "amPSSS", "oMRS", "iMRS", "aGFSL", "aFSLC", "aFSLE", "plc", "ple", "pld", "plia", "plie", "plid", "browserInfo"]
        },
        "creAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "Attendee": {
      "type": "object",
      "properties": {
        "connected": {
          "type": "boolean",
          "example": false
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "email": {
          "type": "string"
        },
        "emailSent": {
          "type": "boolean",
          "example": false
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "screenId": {
          "type": "string"
        },
        "syncCode": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        }
      }
    },
    "ScreenSessionMinimalDTO": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "example": false
        },
        "activeCompanyId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "durationInSecs": {
          "type": "integer",
          "format": "int32"
        },
        "endedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "startedAt": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "MobileScreenAssetState": {
      "type": "object",
      "properties": {
        "assetId": {
          "type": "string"
        },
        "assetType": {
          "type": "string",
          "enum": ["VIDEO", "IMAGE", "AUDIO", "CROCODOC", "BOX", "BRAINSHARK", "SLIDESHOW", "WEB_PAGE", "LINK", "OEMBED"]
        },
        "state": {
          "type": "string",
          "enum": ["PLAY", "PAUSE", "SEEK", "VOLUME", "SAVEAS"]
        }
      }
    },
    "MIDCastMetadata": {
      "type": "object",
      "properties": {
        "asset_state_type": {
          "type": "string"
        },
        "cmd_sequence": {
          "type": "integer",
          "format": "int64"
        },
        "cmd_timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "cmd_verb": {
          "type": "string"
        },
        "screen_id": {
          "type": "string"
        },
        "screen_session_id": {
          "type": "string"
        },
        "tcd_id": {
          "type": "string"
        },
        "tcd_state": {
          "type": "string"
        }
      }
    },
    "ScreenSessionLight": {
      "type": "object",
      "properties": {
        "activeScreens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScreenDTO"
          }
        },
        "screenSessionId": {
          "type": "string"
        }
      }
    },
    "SimpleSuccessResultsDTO«ScreenSession»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ScreenSession"
        },
        "errorMessage": {
          "type": "string"
        },
        "success": {
          "type": "boolean",
          "example": false
        }
      },
      "description": "Wraps a Data Model Object"
    },
    "YouTubeSearchResults": {
      "type": "object",
      "properties": {
        "itemsPerPage": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/YouTubeSearchResult"
          }
        },
        "startIndex": {
          "type": "integer",
          "format": "int64"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ScreenWithSessionDTO": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "example": false
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "currentAssetsState": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScreenAssetState"
          }
        },
        "domainURL": {
          "type": "string"
        },
        "eventId": {
          "type": "string"
        },
        "flurryApiKey": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "screenId": {
          "type": "string"
        },
        "screenSessionId": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["new", "waiting", "insession", "rejected", "removed", "disconnected"]
        },
        "statusBeforeDisconnect": {
          "type": "string",
          "enum": ["new", "waiting", "insession", "rejected", "removed", "disconnected"]
        },
        "syncCode": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "userAgent": {
          "type": "string"
        },
        "userAgentId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "webSocketHost": {
          "type": "string"
        },
        "webSocketPort": {
          "type": "string"
        },
        "webSocketProtocol": {
          "type": "string"
        }
      }
    },
    "FollowUpDTO": {
      "type": "object",
      "properties": {
        "activeCompanyId": {
          "type": "string"
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetMinimalDTO"
          }
        },
        "attendeeStatusMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "attendees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attendee"
          }
        },
        "consumptionData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlideShareConsumptionAction"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "linkAnalytics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Analytics"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "screenSession": {
          "$ref": "#/definitions/ScreenSessionMinimalDTO"
        },
        "screenSessionId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "PublishedStatus": {
      "type": "object",
      "properties": {
        "approvedOrRejectedByUserId": {
          "type": "string"
        },
        "approvedOrRejectedOnDate": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "id": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": ["UPLOADED", "APPROVED", "REJECTED"]
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "uploadedByUserId": {
          "type": "string"
        }
      }
    },
    "EventUrl": {
      "type": "object",
      "properties": {
        "baseUriPath": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTime"
        },
        "deleted": {
          "type": "boolean",
          "example": false
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "updatedAt": {
          "$ref": "#/definitions/DateTime"
        },
        "uriPath": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "AssetSearchResultsDTO": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "pageOffset": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "query": {
          "type": "string"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetSearchResultDTO"
          }
        },
        "sort": {
          "type": "string"
        }
      },
      "description": "an object that encapsulates all of the search results for a query plus additional metadata"
    },
    "MIDUserSession": {
      "type": "object",
      "properties": {
        "mcoAppId": {
          "type": "string"
        },
        "mcoAppPublicKey": {
          "type": "string"
        },
        "mcoId": {
          "type": "string"
        },
        "mid": {
          "type": "string"
        },
        "sessionToken": {
          "type": "string"
        }
      }
    },
    "TemplateField": {
      "type": "object",
      "properties": {
        "cssClass": {
          "type": "string"
        },
        "defaultValue": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "fieldType": {
          "type": "string",
          "enum": ["IMG_URL", "HEX_COLOR", "TEXT"]
        },
        "name": {
          "type": "string"
        },
        "optional": {
          "type": "boolean"
        }
      }
    }
  }
}